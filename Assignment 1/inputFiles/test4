From VM Fri Sep  3 16:35:43 1999
X-VM-VHeader: ("Resent-" "From:" "Sender:" "To:" "Apparently-To:" "Cc:" "Subject:" "Date:") nil
X-VM-Bookmark: 24
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["2526" "Tue" "24" "August" "1999" "13:10:41" "-0400" "David Martin" "dave@csd.uwo.ca" nil "56" "Rules of Ethical Conduct" "^From:" nil nil "8" nil nil (number " " mark "U    David Martin      Aug 24   56/2526  " thread-indent "\"Rules of Ethical Conduct\"\n") nil nil]
	nil)
X-VM-Labels: nil
X-VM-Summary-Format: "%n %*%a %-17.17F %-3.3m %2d %4l/%-5c %I\"%s\"\n"
Content-Length: 2526
Received: by chaplin.csd.uwo.ca;
	(id NAA02398) Tue, 24 Aug 1999 13:10:41 -0400 (EDT)
Message-Id: <199908241710.NAA02398@chaplin.csd.uwo.ca>
From: David Martin <dave@csd.uwo.ca>
To: solis@csd.uwo.ca
Subject: Rules of Ethical Conduct
Date: Tue, 24 Aug 1999 13:10:41 -0400 (EDT)

                     THE UNIVERSITY OF WESTERN ONTARIO
              LONDON                                   CANADA


                         Rules of Ethical Conduct


     The computing resources of the Department of Computer Science
     have been acquired for specific academic purposes - namely the
     teaching of, and research into the field of Computer Science.  As
     a user authorized by the Department, you may use departmental
     resources, especially computing, only for the purposes for which
     they were allocated.

     Offences include, but are not limited to, the following:

       1. To give, sell or otherwise provide computing resources to an
          individual or individuals who do not have explicit
          permission to use these resources from the authority which
          allocated them.  This includes permitting anyone to use your
          account.

       2. Unauthorized inspection, alteration, deletion, publication,
          copying or tampering with files.

       3. To engage in any action which denies or unreasonably
          restricts the use of computer facilities to their authorized
          users.  This includes using the facilities for work not
	  directly related to the Computer Science course or research
	  work for which the account was issued.

       4. To physically misuse or maltreat any computing facilities.

       5. To remove any piece of computing equipment or parts thereof
          from the designated room, without the written authorization
          of both the chairman of the Resource Planning Committee and
          the Director of Computing Services.

       6. To divulge the access code to any room with a combination
          lock or otherwise permit any individual to enter such room
          or rooms.

     In addition to the penalties imposed by University policies, any
     person found to have violated these rules may be prosecuted to
     the full extent of the law.

     These regulations are meant primarily as guidelines to
     acceptable behaviour, but also to make it clear that the copying
     of software and the misuse of software and hardware may be
     criminal offences.

     Your use of your account will be taken as an agreement to comply
     with the above code of ethical behaviour. If you feel that you
     cannot comply with this code, please refrain from using your
     account and speak with either the Director of Computing Services
     or the Chairman of the Department as soon as possible.
From VM Fri Sep  3 16:35:43 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["183" "Thu" "26" "August" "1999" "10:16:49" "-0400" "Janice Wiersma" "janice@csd.uwo.ca" nil "10" "grad course" "^From:" nil nil "8" nil nil (number " " mark "U    Janice Wiersma    Aug 26   10/183   " thread-indent "\"grad course\"\n") nil nil]
	nil)
Content-Length: 183
Received: from chandelier by chaplin.csd.uwo.ca with SMTP;
	(id KAA03493) Thu, 26 Aug 1999 10:16:58 -0400 (EDT)
Message-Id: <3.0.5.32.19990826101649.00b79180@chaplin.csd.uwo.ca>
X-Sender: janice@chaplin.csd.uwo.ca
X-Mailer: QUALCOMM Windows Eudora Light Version 3.0.5 (32)
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
From: Janice Wiersma <janice@csd.uwo.ca>
To: solis@csd.uwo.ca
Subject: grad course
Date: Thu, 26 Aug 1999 10:16:49 -0400


Hi Roberto -

Could you please let me know as soon as possible, when you would like to
offer your grad course 872a?  Mondays, Thursdays, and Fridays are wide open.

thanks,

Janice

From VM Fri Sep  3 16:35:43 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["1076" "Fri" "27" "August" "1999" "17:15:32" "+0200" "Edgar Ramos" "ramos@mpi-sb.mpg.de" nil "36" "Re: Saludos" "^From:" nil nil "8" nil nil (number " " mark "U    Edgar Ramos       Aug 27   36/1076  " thread-indent "\"Re: Saludos\"\n") nil nil]
	nil)
Content-Length: 1076
Received: from mail.mpi-sb.mpg.de by chaplin.csd.uwo.ca with ESMTP;
	(id LAA12411) Fri, 27 Aug 1999 11:16:30 -0400 (EDT)
Received: from mpii01607.ag1.mpi-sb.mpg.de (mpii01607.ag1.mpi-sb.mpg.de [139.19.11.36])
	by mail.mpi-sb.mpg.de (8.8.7/8.8.8) with ESMTP id RAA27410
	for <solis@csd.uwo.ca>; Fri, 27 Aug 1999 17:16:03 +0200
Received: from mpi-sb.mpg.de (localhost.mpi-sb.mpg.de [127.0.0.1])
	by mpii01607.ag1.mpi-sb.mpg.de (8.8.8/8.8.8) with ESMTP id RAA04695
	for <solis@csd.uwo.ca>; Fri, 27 Aug 1999 17:15:32 +0200 (MET DST)
Message-ID: <37C6AB94.88EDF083@mpi-sb.mpg.de>
X-Mailer: Mozilla 4.61 [en] (X11; U; SunOS 5.6 sun4m)
X-Accept-Language: en
MIME-Version: 1.0
References: <199908261832.OAA17176@brown.csd.uwo.ca>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
From: Edgar Ramos <ramos@mpi-sb.mpg.de>
Sender: ramos@mpi-sb.mpg.de
To: Roberto Solis-Oba <solis@csd.uwo.ca>
Subject: Re: Saludos
Date: Fri, 27 Aug 1999 17:15:32 +0200

>
>
> Como esta? Espero que no le hayamos dado demasiada lata en los ultimos dias
> que estuvimos en Saarbrucken. Le queremos agradecer toda su ayuda.

No problem.

>
> Nosostros llegamos bien a Canada. Todavia estamos en el proceso de
> comprar muebles y carro. He pasado la mayor parte del timepo en eso.

Me alegro que les haya ido bien. Suerte con las compras ..

>
> Me acaban de dar mi cuenta y decidi que el primer mensaje que queria enviar
> era para usted.
>
> Edgar te quiero pedir un favor. estoy tratando de telnet al MPI, pero algo
> no funciona. Usualmente hacia telnet idefix.mpi-sb.mpg.de, pero  ahora no
> sirve.  Me puede usted  dar el nombre de alguna maquina del MPI a la cual
> pueda hacer telnet?

Hace unos dias nos enviaron un mensaje al respecto. Desde afuera no es posible

usar telnet, sino ssh, por razones de seguridad. Ojala tenga ssh disponible
alla,
porque de otra forma no seria posible, entiendo. Lo mismo pasa con ftp, pero
tendre
que averiguar el comando que si funciona.

> Le mandamos muchos abrazos.

Gracias y saludos tambien.

-Edgar

From VM Fri Sep  3 16:35:43 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["323" "Fri" "27" "August" "1999" "18:41:20" "+0200" "Edgar Ramos" "ramos@mpi-sb.mpg.de" nil "19" "Re: Favor" "^From:" nil nil "8" nil nil (number " " mark "U    Edgar Ramos       Aug 27   19/323   " thread-indent "\"Re: Favor\"\n") nil nil]
	nil)
Content-Length: 323
Received: from mail.mpi-sb.mpg.de by chaplin.csd.uwo.ca with ESMTP;
	(id MAA14680) Fri, 27 Aug 1999 12:41:30 -0400 (EDT)
Received: from mpii01607.ag1.mpi-sb.mpg.de (mpii01607.ag1.mpi-sb.mpg.de [139.19.11.36])
	by mail.mpi-sb.mpg.de (8.8.7/8.8.8) with ESMTP id SAA28154
	for <solis@csd.uwo.ca>; Fri, 27 Aug 1999 18:41:53 +0200
Received: from mpi-sb.mpg.de (localhost.mpi-sb.mpg.de [127.0.0.1])
	by mpii01607.ag1.mpi-sb.mpg.de (8.8.8/8.8.8) with ESMTP id SAA04747
	for <solis@csd.uwo.ca>; Fri, 27 Aug 1999 18:41:21 +0200 (MET DST)
Message-ID: <37C6BFB0.2B3F432F@mpi-sb.mpg.de>
X-Mailer: Mozilla 4.61 [en] (X11; U; SunOS 5.6 sun4m)
X-Accept-Language: en
MIME-Version: 1.0
References: <199908271619.MAA08143@brown.csd.uwo.ca>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
From: Edgar Ramos <ramos@mpi-sb.mpg.de>
Sender: ramos@mpi-sb.mpg.de
To: Roberto Solis-Oba <solis@csd.uwo.ca>
Subject: Re: Favor
Date: Fri, 27 Aug 1999 18:41:20 +0200


ok.

idefix.ag1.mpi-sb.mpg.de  (note ag1 !)

q.mpi-sb.mpg.de  (no ag1 !)

mpii01607.ag1.mpi-sb.mpg.de  (mi maquina , pero frecuentemente esta
durmiendo)


Nos hablamos.

-Edgar

PS.  Me habia dicho que le echara una mirada a su correo manana ?  o era
hoy ?
        Y entonces dejo la llave adentro, en la caja de correo.

From VM Fri Sep  3 16:35:43 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["325" "Mon" "30" "August" "1999" "08:50:13" "+0200" "wetzel@mpi-sb.mpg.de" "wetzel@mpi-sb.mpg.de" nil "15" "favour" "^From:" nil nil "8" nil nil (number " " mark "U    wetzel@mpi-sb.mpg Aug 30   15/325   " thread-indent "\"favour\"\n") nil nil]
	nil)
Content-Length: 325
Received: from mail.mpi-sb.mpg.de by chaplin.csd.uwo.ca with ESMTP;
	(id CAA29471) Mon, 30 Aug 1999 02:50:37 -0400 (EDT)
Received: from mpii-rw.zb.mpi-sb.mpg.de (mpii-rw.zb.mpi-sb.mpg.de [139.19.2.201])
	by mail.mpi-sb.mpg.de (8.8.7/8.8.8) with ESMTP id IAA03335
	for <solis@csd.uwo.ca>; Mon, 30 Aug 1999 08:52:04 +0200
Received: (from wetzel@localhost)
	by mpii-rw.zb.mpi-sb.mpg.de (8.8.8/8.8.8) id IAA02768
	for solis@csd.uwo.ca; Mon, 30 Aug 1999 08:50:13 +0200 (MET DST)
Message-Id: <199908300650.IAA02768@mpii-rw.zb.mpi-sb.mpg.de>
From: wetzel@mpi-sb.mpg.de
To: solis@csd.uwo.ca
Subject: favour
Date: Mon, 30 Aug 1999 08:50:13 +0200 (MET DST)


dear roberto,

nice to hear that you arrived safely.

it is no problem for me to send the mailbox key to mrs. neu. maybe she has
not noticed that you still have the key, otherwise she would have phone
me already, hasn't she? I wait for edgar returning the key for me.

I hope you'll settle down soon.

all the best
roxane


From VM Fri Sep  3 16:35:43 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["389" "Mon" "30" "August" "1999" "09:47:22" "-0400" "Judy Purves" "jpurves@julian.uwo.ca" nil "20" "Fall Perspectives on Teaching" "^From:" nil nil "8" nil nil (number " " mark "U    Judy Purves       Aug 30   20/389   " thread-indent "\"Fall Perspectives on Teaching\"\n") nil nil]
	nil)
Content-Length: 389
Received: from juliet.its.uwo.ca by chaplin.csd.uwo.ca with ESMTP;
	(id JAA16038) Mon, 30 Aug 1999 09:50:18 -0400 (EDT)
Received: from julian.uwo.ca by juliet.its.uwo.ca with ESMTP id JAA19527;
        Mon, 30 Aug 1999 09:50:18 -0400 (EDT)
X-Authentication-Warning: juliet.its.uwo.ca: Host slbjap.das.uwo.ca [129.100.32.87] claimed to be julian.uwo.ca
Message-ID: <37CA8B6A.AA67987F@julian.uwo.ca>
X-Mailer: Mozilla 4.03 [en] (Win95; I)
MIME-Version: 1.0
References: <199908281521.LAA03556@brown.csd.uwo.ca>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
From: Judy Purves <jpurves@julian.uwo.ca>
To: Roberto Solis-Oba <solis@csd.uwo.ca>
Subject: Fall Perspectives on Teaching
Date: Mon, 30 Aug 1999 09:47:22 -0400

Dear Roberto,

This will confirm your registration for the Fall Perspectives on Teaching
conference.  We look forward to seeing you on Sept. 1.

Judy Purves
Educational Development Office


Roberto Solis-Oba wrote:

> I would like to register for the conference. My name is Roberto Solis-Oba and
> I am a new faculty member at the Department of Computer Science.
>
> Thanks
>
> Roberto



From VM Fri Sep  3 16:35:43 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["1373" "Mon" "30" "August" "1999" "17:31:27" "+0200" "Edgar Ramos" "ramos@mpi-sb.mpg.de" nil "39" "Re: Gracias" "^From:" nil nil "8" nil nil (number " " mark "U    Edgar Ramos       Aug 30   39/1373  " thread-indent "\"Re: Gracias\"\n") nil nil]
	nil)
Content-Length: 1373
Received: from mail.mpi-sb.mpg.de by chaplin.csd.uwo.ca with ESMTP;
	(id LAA21207) Mon, 30 Aug 1999 11:31:44 -0400 (EDT)
Received: from mpii01607.ag1.mpi-sb.mpg.de (mpii01607.ag1.mpi-sb.mpg.de [139.19.11.36])
	by mail.mpi-sb.mpg.de (8.8.7/8.8.8) with ESMTP id RAA08005
	for <solis@csd.uwo.ca>; Mon, 30 Aug 1999 17:33:31 +0200
Received: from mpi-sb.mpg.de (localhost.mpi-sb.mpg.de [127.0.0.1])
	by mpii01607.ag1.mpi-sb.mpg.de (8.8.8/8.8.8) with ESMTP id RAA07214
	for <solis@csd.uwo.ca>; Mon, 30 Aug 1999 17:31:29 +0200 (MET DST)
Message-ID: <37CAA3CF.D34AA08@mpi-sb.mpg.de>
X-Mailer: Mozilla 4.61 [en] (X11; U; SunOS 5.6 sun4m)
X-Accept-Language: en
MIME-Version: 1.0
References: <199908271910.PAA13040@brown.csd.uwo.ca>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
From: Edgar Ramos <ramos@mpi-sb.mpg.de>
Sender: ramos@mpi-sb.mpg.de
To: Roberto Solis-Oba <solis@csd.uwo.ca>
Subject: Re: Gracias
Date: Mon, 30 Aug 1999 17:31:27 +0200

Roberto,

> Muchas gracias por la informacion. Le agradeceria muchisimo si pudiera checar
> mi correo ma~ana en la tarde.

Fui a recorrer el correo el Sabado. Ya el nombre Solis-Oba no estaba en ninguna
casilla de correo, y las dos sin nombre estaban vacias (extranamente, aunque la
llave entraba en una de ellas, no pude abrir). Tiene sentido que la duena removio
el nombre (y quizas el correo adentro) y entonces el correo ya no dejo nada a su
nombre despues.


> Le agradeceria mas si pudiera recoger tambien el
> correo que tenga en el MPI y me lo mande a
>
> Dr. Roberto Solis-Oba
> The University of Western Ontario
> Department of Computer Science
> Middlesex College
> London, Ontario, N6A 5B7
> Canada

No lo hacen automaticamente aqui a medida que se le acumulen las cosas ?

> Muchisimas gracias. Otro favor. Podria decirle a Roxane que si le llama a mi
> landlady para que recoja la llave? Lo mejor es que usted le deje la llave a Roxane,
> no la deje en el mailbox porque si no la due~a no va a poder recogerla.

Voy a hacer eso entonces.

Acabo de recibir el paquete de "Medica". Lo abro para verificar el contenido ?
O lo mando tal cual ? (supongo es mejor que verifique que si enviaron lo
correcto). Tambien queria confirmar que debo escribir "Puzzles" (no deberia
escribir mas bien en espanol y/o aleman ? Como seria en espanol ?) y costo
30 DM.

-Edgar


From VM Fri Sep  3 16:35:43 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["1146" "Mon" "30" "August" "1999" "23:03:31" "+0200" "ramos@mpi-sb.mpg.de" "ramos@mpi-sb.mpg.de" nil "41" "Re: Gracias" "^From:" nil nil "8" nil nil (number " " mark "U    ramos@mpi-sb.mpg. Aug 30   41/1146  " thread-indent "\"Re: Gracias\"\n") nil nil]
	nil)
Content-Length: 1146
Received: from mail.mpi-sb.mpg.de by chaplin.csd.uwo.ca with ESMTP;
	(id RAA03239) Mon, 30 Aug 1999 17:03:39 -0400 (EDT)
Received: from idefix.ag1.mpi-sb.mpg.de (idefix.ag1.mpi-sb.mpg.de [139.19.10.53])
	by mail.mpi-sb.mpg.de (8.8.7/8.8.8) with ESMTP id XAA09949;
	Mon, 30 Aug 1999 23:05:39 +0200
Received: (from ramos@localhost)
	by idefix.ag1.mpi-sb.mpg.de (8.8.8/8.8.8) id XAA21915;
	Mon, 30 Aug 1999 23:03:31 +0200 (MET DST)
Message-Id: <199908302103.XAA21915@idefix.ag1.mpi-sb.mpg.de>
In-Reply-To: <199908302025.QAA00065@brown.csd.uwo.ca> from Roberto Solis-Oba at "Aug 30, 1999 04:25:52 pm"
X-Mailer: ELM [version 2.4ME+ PL52 (25)]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
From: ramos@mpi-sb.mpg.de
To: solis@csd.uwo.ca (Roberto Solis-Oba)
Cc: ramos@mpi-sb.mpg.de (Edgar Ramos)
Subject: Re: Gracias
Date: Mon, 30 Aug 1999 23:03:31 +0200 (MET DST)

> Edgar,
> 
> muchsa gracias por regocer mi correo. Supongo que los del MPI me van a
> enviar algun dia mi correo. Sin embargo estoy esperando algo urgente de
> U. West Virginia y de   un doctor en Saarbrucken. Si me hace el favor
> de poner mi mail en un sobre con mi direccion y ponerlo en el
> bin "postausgang" se lo agradeceria muchisimo.

Bueno

> 
> Tal vez sea bueno revisar el contenido del paquete de Medica. Le
> voy a preguntar a Veronica exactamente que  debia haber en el paquete
> y le mando un mensaje ma~ana. Muchisimas gracias. Puzzle en espa~ol
> en Mexico se dice rompecabezas.

Ya estuve mirando ... y hay dos equipos de examen medicos (ojos, oido,
nariz? ...). Esta seguro entonces de que corren el riesgo de que les
abran y les pongan problema ... escribire entonces "Raetsel/Rompecabezas".

> 
> Reciba muchos saludos.
> 
> Roberto

No le habia contado:

* El envio de la caja costo 47 DM

* Subramanyam recogio la silla para el bebe (y cogio un par de paraguas)

* Se me olvido coger la cortina del bano ...

* Fue facil deshacerme de la ropa ... aqui cerca habia un contenedor
  de la cruz roja

Nos hablamos.

-Edgar


From VM Fri Sep  3 16:35:43 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["182641" "Wed" "1" "September" "1999" "10:39:58" "+0200" "Jansen, Klaus" "klaus@idsia.ch" nil "3891" "Re: Paper" "^From:" nil nil "9" nil nil (number " " mark "U    Jansen, Klaus     Sep  1 3891/182641 " thread-indent "\"Re: Paper\"\n") nil nil]
	nil)
Content-Length: 182641
Received: from fava.idsia.ch by chaplin.csd.uwo.ca with ESMTP;
	(id EAA29447) Wed, 1 Sep 1999 04:40:13 -0400 (EDT)
Received: from cicoria.idsia.ch ([195.176.191.24]) by fava.idsia.ch
          (Post.Office MTA v3.1 release PO203a  ID# 114-37856U100L2S100)
          with SMTP id AAA21913 for <solis@csd.uwo.ca>;
          Wed, 1 Sep 1999 10:39:57 +0200
Received: from cicoria by cicoria.idsia.ch (SMI-8.6/SMI-SVR4)
	id KAA10105; Wed, 1 Sep 1999 10:39:58 +0200
Message-Id: <199909010839.KAA10105@cicoria.idsia.ch>
Reply-To: Klaus Jansen <klaus@idsia.ch>
MIME-Version: 1.0
Content-Type: MULTIPART/mixed; BOUNDARY=Corps_of_Giraffes_538_000
X-Mailer: dtmail 1.2.1 CDE Version 1.2.1 SunOS 5.6 sun4u sparc 
From: klaus@idsia.ch (Jansen, Klaus)
To: solis@csd.uwo.ca
Subject: Re: Paper
Date: Wed, 1 Sep 1999 10:39:58 +0200 (MET DST)

--Corps_of_Giraffes_538_000
Content-Type: TEXT/plain; charset=us-ascii
Content-MD5: PyMZzAm/NOufdmMSEz56dQ==

Dear Roberto,


> 
> I do not know what happened. I revised the LATIN paper and sent you a 
version 
> just before I left Saarbrucken, but it seems that you did not receive it. 

yes, I have not got it.

> I am sorry about this. Thanks for submitting the paper, I thought that the 
deadline
> was sometime in September. If they accept the paper I will work on the final
> version since you and Monaldo did most of the work for the sumbmission.

thanks, please look at the long/short version and check also the details.
I have found some mistakes in the short version that I have corrected
before the submission. Therefore, it would be good if you can over it
now. Monaldo is on vacation until 9th of September.

> 
> How was your trip to Kiel? Did you find an apartment? Did you like the city?

we have found a nice small house in the near of Kiel (in a small village)
with a small garden. Erika and Viviane like it also.


> we had some trouble witht he apartment here also. The apartment that they 
> reserved for us was not in very good condition. So we had to spend some time 
> looking for something better. Finally we found a nicer apartment and 
Veronica
> likes it. 

this is important. And I thought that this could happen to you (to look
for a nicer one).

> 
> The city looks a lot like West Lafayette (where Purdue is). But they say it 
is
> very cold in the winter. I am a little worried about that, since Veronica 
does
> not like cold weather. I hope it is not as bad as they said.

if it is cold, you will have probably snow. And your children will enjoy 
this. 

> 
> I hope I will settle down soon so I have time to start working again. It 
seems
> that I have been wasting most of my time going to government offices, 
looking
> for an apartment, etc. I hope you are having more fun than me.
> 

I hope that you settle down soon. Please look at the Florida paper; I think
they wait for our version. 

All bests, Klaus

--Corps_of_Giraffes_538_000
Content-Type: TEXT/plain; name="latin2000.tex"; charset=us-ascii; x-unix-mode=0644
Content-Description: latin2000.tex
Content-MD5: 1AMeB5gJFiEJ2ipC8qOf6g==



%  \documentclass[a4paper,eepic,11pt]{article}

\documentclass[a4paper,eepic,11pt]{llncs}
\textwidth17cm
\textheight22cm
\oddsidemargin0cm
\evensidemargin0cm
\usepackage{graphicx}
\usepackage{amsmath}


%  \newtheorem{theorem}{Theorem}
%  \newtheorem{acknowledgement}[theorem]{Acknowledgement}
%  \newtheorem{algorithm}[theorem]{Algorithm}
%  \newtheorem{axiom}[theorem]{Axiom}
%  \newtheorem{case}[theorem]{Case}
%  \newtheorem{claim}[theorem]{Claim}
%  \newtheorem{conclusion}[theorem]{Conclusion}
%  \newtheorem{condition}[theorem]{Condition}
%  \newtheorem{conjecture}[theorem]{Conjecture}
%  \newtheorem{corollary}[theorem]{Corollary}
%  \newtheorem{criterion}[theorem]{Criterion}
%  \newtheorem{definition}[theorem]{Definition}
%  \newtheorem{example}[theorem]{Example}
%  \newtheorem{exercise}[theorem]{Exercise}
%  \newtheorem{lemma}{Lemma}
%  \newtheorem{notation}[theorem]{Notation}
%  \newtheorem{problem}[theorem]{Problem}
%  \newtheorem{proposition}[theorem]{Proposition}
%  \newtheorem{remark}{Remark}
%  \newtheorem{solution}[theorem]{Solution}
%  \newtheorem{summary}[theorem]{Summary}
%  \newenvironment{proof}[1][Proof]{\textbf{#1.} }{\ \rule{0.5em}{0.5em}}

\begin{document}

\title{Approximation Algorithms for Flexible Job Shop Problems
\thanks{Supported by EU ESPRIT LTR Project No. 20244
(ALCOM-IT) and by the Swiss Office F\'ed\'eral de
l'\'education et de la Science project n 97.0315 titled "Platform".}}
%
\author{Klaus Jansen\inst{1} \and Monaldo Mastrolilli\inst{1} \and
Roberto Solis-Oba\inst{2}}
%
\institute{
IDSIA Lugano, Corso Elvezia 36, 6900 Lugano, Switzerland \\
klaus,monaldo@idsia.ch
%
\and
Max-Planck-Institut f\"ur Informatik, Im Stadtwald, 
66123 Saarbr\"ucken, Germany \\
solis@mpi-sb.mpg.de
}


%
%  \author{Klaus Jansen$^{1}$, Monaldo $^{1}$ and Roberto
%  Solis-Oba$^{2}$ \\
%EndAName
%  $^{1}${\small IDSIA, Corso Elvezia 36 6900 Lugano, Switzerland,} \\
%  \{{\small klaus, monaldo\}@idsia.ch}\\
%  $^{2}$ {\small MPII, Im Stadtwald 66123 Saarbr\"{u}cken, Germany,}\\
%  {\small solis@mpi-sb.mpg.de}}

\maketitle

\begin{abstract}
The Flexible Job Shop Problem (FJSP) is an extension of the classical job
shop scheduling problem which allows an operation to be processed by any
machine from a given set. The problem is to assign each operation to a
machine and to order the operations on the machines, such that the maximum
delivery completion time over all jobs is minimized.

We present a linear time approximation scheme for the non-preemptive version
of the FJSP and a $(2+\varepsilon )$-approximation algorithm for the
preemptive case with migration.
\end{abstract}

\section{Introduction}

In the job shop scheduling problem (JSP), there is a set $\mathcal{J}%
=\{J_{1},\ldots ,J_{n}\}$ of $n$ jobs, a set $M=\{1,\ldots ,m\}$ of $m$
machines, and a set $\mathcal{O}=\left\{ O_{ij}|i=1,...,\mu
,j=1,...,n\right\} $ of $\mu n$ operations. Each job $J_{j}$ consists of a
sequence of $\mu $ operations $O_{1j},O_{2j},\ldots ,O_{\mu j}$, where $%
O_{ij}$ must be processed without interruption on a prespecified 
machine $m_{ij}\in
\{1,\ldots ,m\}$ during $p_{ij}$ time units. The operations $%
O_{1j},O_{2j},\ldots ,O_{\mu j}$ must be processed one after another in the
given order and each machine can process at most one operation at a time.

In this paper we study a generalization of the JSP called the flexible job
shop problem \cite{BR}, which models a wide range of problems encountered in
real manufacturing systems. FJSP extends JSP by allowing an operation $%
O_{ij} $ to be processed by any machine from a given set $M_{ij}\subseteq M$%
. The processing time for operation $O_{ij}$ on machine $k\in M_{ij}$ is $%
p_{ij}^{k}$. In addition, each job $J_{j}$ has a \textit{delivery time }$%
q_{j}$. If in a schedule $J_{j}$ completes its processing at time $C_{j}$,
then its \textit{delivery completion time} is equal to $C_{j}+q_{j}$. The
goal is to choose for each operation $O_{ij}$ an eligible machine and a
starting time $s_{ij}$ when it must be performed so that the maximum
delivery completion time $L_{\max }$ over all jobs is minimized. 
% new
This problem is equivalent to scheduling jobs on unrelated machines with chain
precedence constraints \cite{SSW}. If all delivery times $q_j = 0$, then we 
have to minimize the maximum completion time (or makespan) $C_{max}$ over all
jobs. 

FJSP is therefore more complex than JSP because of the need to determine the
assignment of operations to machines other than the traditional sequencing
decisions. The FJSP is NP-hard since it is an extension of the job shop
scheduling problem \cite{GJS}.  Therefore, our aim is to design an efficient
algorithm to generate approximate solutions that are provably close to the
optimum. A lot of research has been done on the job shop scheduling problem.
For the case of job shops when $m$ and $\mu $ are fixed, Jansen et al. \cite
{JSS1,JSS2} have designed a linear time approximation scheme for the makespan
minimization problem. When $m$ and $\mu $ are part of the input the best
known result \cite{GPSS} is an approximation algorithm with worst case bound 
$O((\log (m\mu )\log (min(m\mu ,p_{max}))/\log \log (m\mu ))^{2})$, where $%
p_{max}$ is the largest processing time among all operations. Shmoys, Stein
and Wein \cite{SSW} described a polynomial-time randomized algorithm for the
problem of scheduling jobs on unrelated parallel machines subject to chain
precedence constraints, that with high probability, yields a schedule that
is of length at most $O((\log ^{2}n/\log \log n)C_{\max }^{\ast })$, where $%
C_{\max }^{\ast }$ is the optimal makespan.

In this work we study the preemptive and non-preemptive versions of the
flexible job shop scheduling problem when the number of machines $m$ and the
number of operations per job $\mu $ are fixed. Two variants of the
preemptive flexible job shop problem can be considered: with migration and
without migration. Without migration means that each operation must be
processed by a unique machine. So if an operation is preempted, later it has
to be resumed on the same machine. In Sections \ref{Sect:PTAS} we describe
a polynomial time approximation scheme for the
flexible job shop problem with delivery times. We notice that by using the
same techniques we can also handle the case in which each job $J_{j}$ has a 
\emph{release time} $r_{j}$ when it becomes available for processing and the
objective is to minimize the makespan. Furthermore our techniques can be
extended to design a linear time approximation scheme for the preemptive
flexible job shop problem without migration; see our full version
 \cite{JSS3}. For the preemptive
case with migration we present in Section \ref{Sect:migration} a $%
(2+\varepsilon )$-approximation algorithm to handle the problem in which
each job $J_{j}$ has a release time $r_{j}$ and a delivery time $q_{j}$, and
the objective is to minimize the maximum delivery completion time. In both
preemptive problems the number of preemptions can be bounded by a constant
by using our algorithms. 

In the remainder of this paper we will use the following remarks. Let $%
P_{j}=\sum_{i=1}^{\mu }[\min_{s\in M_{kj}}p_{ij}^{s}]$ denote the \textit{%
minimum job length}, and $P=\sum_{J_{j}\in \mathcal{J}}P_{j}$. Let $%
t_{j}=r_{j}+P_{j}+q_{j}$ and $t_{\max }=\max_{j}t_{j}$, where $j=1,...,n$.
Then we get the following bounds:

\begin{lemma}
\label{Lemma:bound}$\max \left\{ {\frac{P}{m},}t_{\max }\right\} \leq
L_{\max }^{\ast }\leq P+t_{\max }.$
\end{lemma}

The proofs of this and other Lemmas are given in the Appendix.
By dividing all execution times, release times and delivery times by $\max
\left\{ {\frac{P}{m},}t_{\max }\right\} $, we get the bounds ${1}\leq
L_{\max }^{\ast }\leq {m+1}$, $t_{\max }\leq 1$ and $P \le m$. 
We observe that Lemma 
\ref{Lemma:bound} holds also for the preemptive problem with or without
migration, and when release and delivery times are zero.

\section{Outline of the Algorithm\label{Sect:PTAS}}

In this section we provide a high-level description of the approximation
scheme for the non-preemptive flexible job shop problem with delivery times
(release times are assumed to be zero, i.e., $r_{j}=0$ for $J_{j}\in 
\mathcal{J}$). Each step of the algorithm is investigated in the 
following subsections.

\begin{enumerate}
\item  Reduce the number of different delivery times to a constant.

\item  Consider a restricted flexible job shop instance with a constant
number of jobs and compute all the substantially different relative
schedules. A relative schedule is computed by assigning each operation to a
machine and by defining an order between the starting and finishing times of
all operations.

\item  Add the remaining jobs to each relative schedule by solving a relaxed
instance of the problem. Take the best solution among all relative schedules.

\item  Transform the solution into a feasible and approximate solution.
\end{enumerate}

\subsection{Reducing the Number of Delivery Times\label{Sect:prep}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

We use a technique by Hall and Shmoys \cite{HS} to reduce the problem to an
instance with only a constant number of delivery times. Let $q_{\max }$
denote the maximum delivery time and $\varepsilon >0$ be a constant value.
The idea is to round each delivery time down to the nearest multiple of $%
\frac{\varepsilon }{2}q_{\max }$ to get at most $1+2/\varepsilon $ distinct
delivery times. Next, apply a $(1+\varepsilon /2)$-approximation algorithm
that can handle $1+2/\varepsilon $ distinct delivery times, and then add $%
\frac{\varepsilon }{2}q_{\max }$ to the  length of the delivery operations.
This generates a feasible schedule for the original instance
and gives a $(1+\varepsilon )$-approximation algorithm for
the  problem.

In the remainder of this paper, we shall restrict our attention to the
problem for which the delivery times $q_{1},...,q_{n}$ take on $\chi $
distinct values, which we denote $\delta _{1}>...>\delta _{\chi }$, and
partition the jobs into sets $D_{w}=\left\{ J_{j}\in \mathcal{J}%
|q_{j}=\delta _{w}\right\} $, $w=1,...,\chi $.

\subsection{Relative Schedules}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The delivery time of a job can be interpreted as an additional operation of
the job that has to be processed on a non-bottleneck machine. Because of
this interpretation, we can add to the set $\mathcal{O}$ of operations a set 
$\mathcal{D=}\left\{ d_{1},...,d_{\chi }\right\} $ of $\chi $ delivery
operations; the processing time of operation $d_{w}$ is $\delta _{w}$, for $%
w=1,...,\chi $. Each job has to perform a delivery operation on a
non-bottleneck machine at the end.

W.l.o.g. we assume  that $P_{1}\geq P_{2}\geq ...\geq P_{n}$. Let $\mathcal{L}%
\subset \mathcal{J}$ be the set formed by the first $k$ jobs with the
longest minimum job length, where $k$ is a constant that is defined later.
We call $\mathcal{L}$ the set of \emph{long} jobs. Set $\mathcal{S}=\mathcal{%
J}\setminus \mathcal{L}$ is the set of \emph{short} jobs and $\mathcal{O}_{%
\mathcal{L}}$ the set of operations from long jobs. Now, consider a
restricted flexible job shop problem with jobs from $\mathcal{L}$ only, and
compute all of the different relative schedules. A \emph{relative schedule} $%
R$ for $\mathcal{L}$ is constructed by choosing a machine $m_{ij}$
for each operation 
$O_{ij}\in \mathcal{O}_{\mathcal{L}}$ and by determining a partial order for
the starting and finishing times of operations from $\mathcal{O}_{\mathcal{L}%
}\mathcal{\cup D}$.

A relative schedule $R$ is feasible if

\begin{itemize}
\item  every operation of $\mathcal{D}$ finishes at the same time;

\item  delivery operation $d_{w}$ starts before \thinspace $d_{w+1}$, for $%
w=1,...,\chi -1$;

\item  the last operation of each long job does not end after the starting
time of its corresponding delivery operation;

\item  the operations of any long job must be processed one after another in
the given order and each machine can process at most one operation at a time.
\end{itemize}

Two operations $O_{ij}$ and $O_{i^{\prime }j^{\prime }}$, $%
J_{j},J_{j^{\prime }}\in \mathcal{L}$ and $j\not=j^{\prime }$, are
compatible if they are assigned to different machines. Operations from $%
\mathcal{D}$ are always compatible. For any given relative schedule, and by
looking at every time an operation from $\mathcal{D\cup O}_{\mathcal{L}}$
starts or ends, a \emph{snapshot} of $\mathcal{D\cup O}_{\mathcal{L}}$ is
defined as subset of compatible operations which are processed right after
that time. Therefore, a \emph{relative schedule} $R$ is a sequence $%
M(1),\ldots ,M(g)$ of snapshots of $\mathcal{D\cup O}_{\mathcal{L}}$, where $%
M(1)=\emptyset $ and $M(g)=\mathcal{D}$. Let $\alpha _{ij}$ and $\beta _{ij}$
be the first and last snapshots where operation $O_{ij}$ is placed.

We observe that $g$ can be bounded by $2\mu k+\chi $. Notice, that we have
included one further snapshot $M(1)=\emptyset $ without operations of jobs
in $\mathcal{L}$. This corresponds to the case when the schedule for $%
\mathcal{J}$ does not contain any operation $O_{ij}$ of a job $J_{j}\in 
\mathcal{L}$ at the beginning. Since $k$, $m$ and $\mu $ are constant, the
number of relative schedules is also constant.

\subsection{Problem Relaxation\label{Sect:relax}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

For each relative schedule $R=(M(1),\ldots ,M(g))$, in the following we
formulate a linear program $LP(R)$ to find a (in general infeasible)
schedule for the small jobs by solving $LP(R)$. For each job $J_{j}\in 
\mathcal{S}$ we use a set of decision variables $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}\in \lbrack 0,1]$ for tuples $(i_{1},\ldots
,i_{\mu })\in A$ and $(s_{1},\ldots ,s_{\mu })\in B$, where $%
A=\{(i_{1},\ldots ,i_{\mu })|i_\ell \in \{1,\ldots,g\}, 
 i_{1}\leq i_{2}\leq \ldots \leq i_{\mu}\}$ and 
 $B=\{(s_{1},\ldots ,s_{\mu })|s_i \in \{1,\ldots,m\}, i=1,...,\mu
\} $.
The meaning of these variables is that $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}=1$ if and only if each operation $O_{kj}$ of
job $J_{j}$ is scheduled in snapshot $i_{k}$ and on machine $s_{k}$ for each 
$1\leq k\leq \mu $. Note that by the way in which we numbered the
operations, any tuple $(i_{1},\ldots ,i_{\mu })\in A$ represents a valid
ordering for the operations.

For any snapshot $M(\ell )$ let $P(\ell )=\bigcup_{O_{ij}\in M(\ell
),J_{j}\in \mathcal{L}}\,\,\{m_{ij}\}$, be the set of machines that process
operations from long jobs during snapshot $M(\ell )$, where $m_{ij}\in
\{1,...,m\}$ denotes the machine on which operation $O_{ij}$ of job $%
J_{j}\in \mathcal{L}$ is processed according to relative schedule $R$.
Furthermore, let $\alpha _{w}$ denote the snapshot in which delivery
operation $d_{w}$ starts, for $w=1,...,\chi $. Let the load $L_{\ell ,h}$ on
machine $h$ in snapshot $M(\ell )$ be defined as the total processing time
of operations from short jobs that are executed by machine $h$ during
snapshot $\ell $, i.e., 
\begin{equation*}
L_{\ell ,h}=\sum_{J_{j}\in \mathcal{S}}\sum_{{\ \ \ }(i_{1},\ldots ,i_{\mu
}) \in A,(s_{1},\ldots ,s_{\mu })\in B}\sum_{{\ \ \ \ \ }k=1,\ldots ,\mu
|i_{k}=\ell ,s_{k}=h}\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}p_{kj}^{s_{k}}.
\end{equation*}
\ $\ $Each variable $t_{\ell }$, $1\leq \ell \leq g$, denotes the length of
snapshot $M(\ell )$. Let $p_{ij}$ denote the processing time of operation $%
O_{ij}$ ($1\leq i\leq \mu $, $J_{j}\in \mathcal{L}$) according to the
relative schedule $R$. Let $X_{j}=\left\{ x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}|(i_{1},\ldots ,i_{\mu }) \in A,
(s_{1},\ldots ,s_{\mu})\in B\right\} $ be the set of decision variables 
associated with
job $J_{j}$. To avoid that some operation $O_{kj}$ of a short job $J_{j}\in 
\mathcal{S}$ is scheduled on a machine $s_{k}\in P(i_{k})$ when it is
occupied by a long job or on a machine $s_{k}\notin M_{kj}$ that cannot
process it, we set $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=0 $. Furthermore, $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=0$ if the last operation of job $J_{j}$ ends after the starting time of
its corresponding delivery operation, i.e., $i_{\mu }\geq \alpha _{w}$ when $%
J_{j}\in D_{w}$, $w=1,...,\chi $. We call $Z_{j}$ the subset of $X_{j}$ that
is set to zero.

The linear program $LP(R)$ for a given relative schedule $R$ is the
following.

\begin{description}
\item[Minimize $~\sum_{\ell=1}^g t_\ell~$]  

\item[~~~s.t.~~~(1)~]  $t_{\ell }\geq 0,$ {\small \ \ \ \ \ \ \ \ \ \ \ \ \
\ \ \ \qquad \qquad \qquad \qquad \qquad \qquad \qquad \qquad \qquad \qquad\ 
}$1\leq \ell \leq g,$

\item[~~~~~~~~~~(2)~]  $\sum_{\ell =\alpha _{ij}}^{\beta _{ij}}t_{\ell
}=p_{ij}$, ~~ $\qquad \qquad \qquad \qquad \qquad \qquad \qquad J_{j}\in 
\mathcal{L}${\small , }$1\leq i\leq \mu ,$

\item[~~~~~~~~~~(3)~]  $\sum_{\ell =\alpha _{w}}^{g}t_{\ell }=\delta
_{w},\qquad \qquad \qquad \qquad \qquad \qquad \qquad \qquad \qquad
w=1,...,\chi ,$

\item[~~~~~~~~~~(4)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}\geq 0$, \ \ ~~ {\small \ }$J_{j}\in \mathcal{S}${\small , }$%
(i_{1},\ldots ,i_{\mu }) \in A,(s_{1},\ldots ,s_{\mu })\in  B,$

\item[~~~~~~~~~~(5)~]  $\sum_{(i_{1},\ldots ,i_{\mu }) \in A,(s_{1},\ldots ,s_{\mu
})\in  B}\,\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })}=1
$,$\qquad \qquad \qquad \ \ \ J_{j}\in \mathcal{S},$

\item[~~~~~~~~~~(6)~]  $L_{\ell ,h}\leq t_{\ell },\qquad \qquad \qquad \ \ \ 
$ ~~ {\small \ \ \ \ \ \ \ \ \ \ \ }$1\leq \ell \leq g,${\small \ }$1\leq
h\leq m,${\small \ }$h\not\in P(\ell ),$

\item[~~~~~~~~~~(7)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=0,\qquad \qquad \qquad \qquad \qquad x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}\in Z_{j}.$
\end{description}

Note that if a variable $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}$ has value one, then job $J_j\in \mathcal{S}$ has a unique snapshot
assignment.

Consider an optimum schedule $S^{\ast }$ for $\mathcal{J}$ that respects the
relative schedule $R$. It is possible to prove that an optimum solution of $%
LP(R)$ has value no larger than the maximum delivery completion time of $%
S^{\ast }$ (Lemma \ref{Lemma:lpbound}) by using Lemma \ref{Lemma:assign}.

\begin{lemma}
\label{Lemma:assign}For any given feasible schedule $S$ and for any job $%
J_{j}\in \mathcal{J}$, there is always an assignment of variables from $%
X_{j}=\left\{ x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}|(i_{1},\ldots ,i_{\mu }) \in A,(s_{1},\ldots ,s_{\mu })\in  B\right\} $
such that the same fraction of every operation of $J_{j}$ is assigned in the
same snapshot and machine as $S$.
\end{lemma}

\begin{lemma}
\label{Lemma:lpbound}An optimum solution of $LP(R)$ has value no larger than
the length of an optimum schedule for $\mathcal{J}$ that respects the
relative schedule $R$.
\end{lemma}

One can solve the linear program $LP(R)$ optimally in polynomial time and
get only a constant number $mg$ of jobs with non-unique snapshot assignment
(see also paper by Potts \cite{Potts} and Hall \cite{Hall}). 
In order to reduce the time complexity of our algorithm the
linear program can be rewritten so that the Logarithmic Potential Price
Directive Decomposition Method developed by Grigoriadis and Khachiyan \cite
{GK} can be used to find an approximate solution in linear time. The new
linear program is obtained by guessing the value $s$ of an optimum schedule
that respects the relative schedule $R$ and add the constraint $\sum_{\ell
=1}^{g}t_{\ell }\,\,\leq s$ to $LP(R)$. Then we replace constraint $(6)$ by
constraint $(6^{\prime })$, where $\lambda $ is a non-negative value:

\begin{description}
\item[~~~~~~~~~(6')~~~]  $L_{\ell ,h}-t_{\ell }+m+1\leq \lambda $, ~~ for $%
h\not\in P(\ell )$.
\end{description}

This new linear program will be denoted as $LP(R,s,\lambda )$.
Let $L_{R}^{\ast }$ be the maximum delivery completion time of an optimum
schedule that respects the relative schedule $R$. 
We note that $LP(R,m+1,m+1)$ is feasible for at least one relative schedule
$R$.  
Using binary
search among $s$ and the algorithm by Grigoriadis and Khachiyan
\cite{GK} with approximate right hand sides in $(6')$ with
$(m+1)(1+\rho') = m + 1 + \rho$ for $\rho' = \rho / (m+1)$, we get:

\begin{lemma}
\label{L1} Let $R$ be a relative schedule for $\cal L$ in an optimum
schedule. A solution for $LP(R,s,m+1+\rho )$, with $s\leq (1+\frac{\epsilon 
}{8})L_{R}^{\ast }$ and $\rho ={\frac{\epsilon }{8g}}$, of value at 
most $(1+
\frac{\epsilon }{4})L_{R}^{\ast }$ can be found in linear time.
\end{lemma}


By using the rounding technique in \cite{JSS2}, we can modify any feasible
solution for $LP(R,s,m+1+\rho )$ to get a new feasible solution in which all
but a constant number of variables $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}$ have value $0$ or $1$. Moreover we can do this
rounding step in linear time.

\begin{lemma}
\label{bound_F}A solution for $LP(R,s,m+1+\rho )$ can be transformed in
linear time into another feasible solution for $LP(R,s,m+1+\rho )$ in which
the set of jobs $\mathcal{F}$ that have fractional assignments in more than
one snapshot after the rounding procedure has size $|\mathcal{F}|\leq mg.$
\end{lemma}

\subsection{Generating a Feasible Schedule}

For each relative schedule $R$ we approximately solve the linear program $%
LP(R)$. Let $R^{\ast }$ denote the relative schedule with the smallest
approximate linear program solution value. Then, we round the solution of
the approximate $LP(R^{\ast })$ to get only few fractional variables. Remove
all jobs $\mathcal{F}$ that received fractional assignment. These jobs will
be placed at the beginning of the schedule. Next, we transform the solution
of the linear program into a feasible schedule as follows. Using the
approximate solution for the LP, our snapshots are enlarged from $t_{\ell }$
to at most $t_{\ell }^{\prime }=t_{\ell }+\rho $. We assume that
the solution value for $LP(R^{\ast },s,m+1+\rho )$ is not greater than 
$m+1$, otherwise the solution obtained by scheduling each job sequentially on
the machines with the smallest processing time has a better value in the
worst case.

Consider a snapshot $M(\ell )$, $\ell \in \{1,\ldots ,g\}$. In this snapshot
the set $P(\ell )$ contains machines that are reserved for the long jobs.
The set of operations $O(\ell )$ from small jobs assigned by the solution of
the linear program must be scheduled in machines $M\setminus P(\ell )$.

Let $\tau =\frac{\varepsilon }{8\mu ^{3}mg}$. Consider the set of operations
from small jobs which have, according to the rounded solution for $%
LP(R^{\ast },s,m+1+\rho )$, processing times greater than $\tau $. The
cardinality of that set is bounded by $\frac{m(m+1)}{\tau }$. Let $\mathcal{V%
}$ the set of jobs corresponding to the $\frac{m(m+1)}{\tau }$ longest
operations from small jobs. Therefore, the number of jobs from $\mathcal{V}$
is at most $\frac{8\mu ^{3}m^{2}(m+1)}{\varepsilon }g$. By removing all jobs
of $\mathcal{V}$ the processing time of the remaining operations from small
jobs will be not greater than $\tau $ (the jobs of $\mathcal{V}$ will be
placed at the beginning of the schedule).

Let $p_{max}(\ell )$ be the maximum processing time among the remaining
operations from $O(\ell )$. On the modified snapshot $M^{\prime }(\ell )$
the remaining operations from the small jobs, which are assigned to machines
according to the rounded solution for $LP(R,s,m+1+\rho )$, form an instance
of the job shop problem with maximum machine load $t_{\ell }^{\prime }$ and
maximum operation length $p_{max}(\ell )$. We use the algorithm of
Sevastianov \cite{Sev1} to find in $O(n^{2}\mu ^{2}m^{2})$ time a schedule
for the operations in $M^{\prime }(\ell )$ of length at most $\bar{t}_{\ell
}=t_{\ell }+\rho +\mu ^{3}mp_{max}(\ell )$. 
Hence we get an enlarged
snapshot $M^{\prime }(\ell )$ of length at most $\bar{t}_{\ell }$. 
 The algorithm
of Sevastianov can be
sped up to get time $O(n)$ by ``sticking'' pairs of small jobs together as
described in \cite{JSS2}.
Summing these enlargements among all snapshots, we get:

\begin{lemma}
\label{L3} $\sum_{\ell =1}^{g}\mu ^{3}mp_{max}(\ell )\leq \mu ^{3}mg\tau =%
\frac{\varepsilon }{8}\leq \frac{\varepsilon }{8}L_{\max }^{\ast }.$
\end{lemma}

The total length of the snapshots $M^{\prime }(\alpha _{ij}),\ldots
,M^{\prime }(\beta _{ij})$ that contain an operation $O_{ij}$ of a long job $%
J_{j}$ might be larger than $p_{ij}$. This creates some idle times on
machine $m_{ij}$. We start operations $O_{ij}$ for long jobs $\mathcal{L}$
at the beginning of the enlarged snapshot $M^{\prime }(\alpha _{ij})$. The
resulting schedule is clearly feasible. Let $S(J^{\prime })$ be the total
processing time of all jobs in some set $J^{\prime }\subset \mathcal{J}$,
when operations of that jobs are assigned to machines with the lowest
processing times.

\begin{lemma}
\label{L2} A feasible schedule for the jobs $\mathcal{J}$ of length at most $%
(1+\frac{3}{8}\epsilon )L_{\max }^{\ast }+S(\mathcal{F\cup V})$ can be found
in $O(n)$ time.
\end{lemma}

The following lemma shows that we can choose the number $k$ of long jobs so
that $S(\mathcal{F\cup V})\leq \frac{\epsilon }{8}L_{\max }^{\ast }$ (see
Lemma \ref{L4}).

%  here are some changes.
%
\begin{lemma}
\label{key} \cite{Amoura,JP1} Let $P_{1} \ge P_{2} \ge \ldots \ge P_{n} > 0$ 
be a
sequence of positive real numbers and $\sum_{j=1}^{n}P_{j} \le m$. Let $q$ be
a nonnegative integer, $\alpha $ be a positive value, and assume that $n\geq
(q+1)^{\lceil {\frac{1}{\alpha }}\rceil }$. There exists an integer $k$ such
that $P_{k+1}+\ldots +P_{k+qk}\leq \alpha m$ and $k\leq (q+1)^{\lceil {%
\frac{1}{\alpha }}\rceil }.$
\end{lemma}

Let $\alpha ={\frac{\epsilon }{8 m}}$ and $qk=\frac{48(1+\varepsilon
)^{2}\mu ^{4}m^{3}}{\varepsilon ^{2}}k$, i.e. $q=\frac{48(1+\varepsilon
)^{2}\mu ^{4}m^{3}}{\varepsilon ^{2}}$. By this lemma, $k\leq (\frac{%
48(1+\varepsilon )^{2}\mu ^{4}m^{3}}{\varepsilon ^{2}}+1)^{\lceil
8 m/\epsilon \rceil }$. We choose $\mathcal{L}$ as the set of $k$ jobs
with the largest values $P_{j}=\sum_{i=1}^{\mu }[\min_{s\in
M_{kj}}p_{ij}^{s}]$.

\begin{lemma}
\label{L4}$S(\mathcal{F\cup V})\leq \frac{\epsilon }{8}L_{\max }^{\ast }.$
\end{lemma}

\begin{theorem}
\label{T1} For any fixed $m$ and $\mu $, there is a polynomial-time
approximation scheme for the flexible job shop scheduling problem that
computes for any fixed real number $\epsilon $, with $\varepsilon >0$, a
feasible schedule with maximum delivery completion time of at most $%
(1+\epsilon )\cdot L_{\max }^{\ast }$ in $O(n)$ time.
\end{theorem}

We note that our algorithm is also a $(2+\varepsilon )$-approximation
algorithm when jobs have release and delivery times. Indeed by adding
release times to jobs in the schedule provided by the described algorithm,
the maximum delivery completion time cannot increase more than $r_{\max }$,
where $r_{\max }$ denotes the maximum release time, and hence the schedule
value is at most $(2+\varepsilon )$ times the optimal value, since $r_{\max
}\leq L_{\max }^{\ast }$.

\section{Preemptive Flexible Job Shop Problem with migration\label%
{Sect:migration}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%

In the preemptive flexible job shop problem with migration the processing of
an operation may be interrupted and resumed later on an eligible machine
that may be different from the previous one. We consider the problem in
which each job $J_{j}$ has a release time $r_{j}$ and a delivery time $%
q_{j}. $

In this section we provide for any $\varepsilon >0$ a $(2+\varepsilon )$%
-approximation algorithm, which runs in linear time when the number of
machines and operations per job are fixed. Our $(2+\varepsilon )$%
-approximation algorithm consists of four steps which are analyzed in the
following.

\paragraph{Step 1}

In the first step we find the optimal solution of a problem relaxation which
assigns operations to machines and time intervals. The problem relaxation is
defined by using linear programming and assuming release times equal to $0$.
Let $t$ denote the objective function value of the linear program defined
later and let $t^{\ast }$ be the optimal value. Consider $\chi $ time
intervals defined as follows, $[0,t-\delta _{1}],[t-\delta _{1},t-\delta
_{2}],...,[t-\delta _{\chi -1},t-\delta _{\chi }]$ (remember from section 
\ref{Sect:prep} that $\delta _{1}>\delta _{2}>...>\delta _{\chi }$). For
each job $J_{j}$ we use a set of decision variables $x_{j,(i_{1},\ldots
,i_{\mu }),(s_{1},\ldots ,s_{\mu })}\in \lbrack 0,1]$ for tuples $%
(i_{1},\ldots ,i_{\mu })\in A$ and $(s_{1},\ldots ,s_{\mu })\in B$, where $%
A=\{(i_{1},\ldots ,i_{\mu })|1\leq i_{1}\leq i_{2}\leq \ldots \leq i_{\mu
}\leq \chi \}$ and $B=\{(s_{1},\ldots ,s_{\mu })|1\leq s_{i}\leq
m,i=1,...,\mu \}$.

The meaning of these variables is that $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}=1$ if and only if, for each $1\leq k\leq \mu $,
each operation $O_{kj}$ of job $J_{j}$ is scheduled on machine $s_{k}$, and
in time interval $[0,t-\delta _{1}]$ if $i_{k}=1$, otherwise in time
interval $[t-\delta _{i_{k}-1},t-\delta _{i_{k}}]$, when $1<i_{k}\leq \chi $%
. Note that by the way in which we numbered the operations, any tuple $%
(i_{1},\ldots ,i_{\mu })\in A$ represents a valid ordering for the
operations. Let the load $L_{\ell ,h}$ on machine $h$ in time interval $\ell 
$ be defined as the total processing time of operations that are executed by
machine $h$ during time interval $\ell $, i.e., 
\begin{equation*}
L_{\ell ,h}=\sum_{j=1}^{n}\sum_{{\ \ \ }(i_{1},\ldots ,i_{\mu
}) \in A,(s_{1},\ldots ,s_{\mu })\in  B}\sum_{{\ \ \ \ \ }k=1,\ldots ,\mu
|i_{k}=\ell ,s_{k}=h}\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}p_{kj}^{s_{k}}.
\end{equation*}
To avoid that some operation $O_{kj}$ of a job $J_{j}\in \mathcal{J}$ is
scheduled on a machine $s_{k}\notin M_{kj}$ that cannot process it, we set $%
x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })}=0$. Furthermore, if
the last operation of any job $J_{j}\in D_{w}$, for $w=1,...,\chi $, ends
after time interval $w$, it is set $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}=0$. We call $Z_{j}$ the subset of $X_{j}$ that
is set to zero. Then we have the linear programming problem $LP$,

\begin{description}
\item[Minimize $~t$]  

\item[~~~s.t.~~~(1)~]  $\sum_{(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})\in A\times B}\,\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=1 $, ~~ $j=1,...,n${\small ,}

\item[~~~~~~~~~~(2)~]  $L_{1,h}\leq t-\delta _{1}$, ~~ $\ \ \qquad \qquad \
\ \ \ \ 1\leq h\leq m${\small ,}

\item[~~~~~~~~~~(3)~]  $L_{\ell ,h}\leq \delta _{\ell -1}-\delta _{\ell }$,
~~ $\qquad \qquad \ \ \ 1\leq h\leq m${\small , }$\ell =2,3,...,\chi $,

\item[~~~~~~~~~~(4)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}\geq 0,\qquad ~\ \ \ \ j=1,...,n,$ $(i_{1},\ldots ,i_{\mu
}) \in A,(s_{1},\ldots ,s_{\mu })\in  B$,

\item[~~~~~~~~~~(5)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=0${\small , \ \ \ ~~\ \qquad }$x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}\in Z_{j}${\small .}
\end{description}

\begin{lemma}
\label{Lemma:lpbound2}An optimum solution of $LP$ has value no larger than
the maximum delivery time of an optimum schedule.
\end{lemma}

A basic optimal solution to $LP$ has the property that the number of
positive variables is at most the number of rows in the constraint matrix.
Hence, at most $m\chi -1$ jobs receive fractional assignment. Again, in
order to reduce the time complexity of the algorithm our linear program can
be rewritten so that the Logarithmic Potential Price Directive Decomposition
Method developed by Grigoriadis and Khachiyan \cite{GK} can be used to find
an approximate solution in linear time. The new linear program is obtained
by guessing the value $s$ of an optimum solution and replacing constraints $%
(2)$ and $(3)$ by constraints $(2^{\prime })$ and $(3^{\prime })$, where $%
\lambda $ is a non-negative value:

\begin{description}
\item[~~~~~~~~~~(2')~]  $\frac{L_{1,h}}{s-\delta _{1}}\leq \lambda $, ~~ $\
\ \qquad \qquad \ \ \ \ \ 1\leq h\leq m${\small ,}

\item[~~~~~~~~~~(3')~]  $\frac{L_{\ell ,h}}{\delta _{\ell -1}-\delta _{\ell }%
}\leq \lambda $, ~~ $\qquad \qquad \ \ \ 1\leq h\leq m${\small , }$\ell
=2,3,...,\chi $.
\end{description}

This new linear program will be denoted as $LP(s,\lambda )$.
%  change,  before it was: $\rho= 1 + \frac{\epsilon }{8+\varepsilon }$
\begin{lemma}
A solution for $LP(\tilde{t},1+\rho )$, with $\tilde{t}\leq (1+\frac{%
\epsilon }{8})t^{\ast }$ and $\rho =\frac{\epsilon }{8+\varepsilon }$, of
value at most $(1+\frac{\epsilon }{4})t^{\ast }$ can be found in linear time.
\end{lemma}

%  new
%% 
As in Section 2, it is possible to modify any feasible solution for $%
LP(s,1+\rho )$ to get a new feasible solution with at most $m\chi $
variables $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })}$ which
have fractional values. Moreover we can do this rounding step in linear time.

\begin{lemma}
A solution for $LP(s,1+\rho )$ can be transformed in linear time into
another feasible solution for $LP(s,1+\rho )$ in which the set of jobs $%
\mathcal{F}$ that have fractional assignments in more than one snapshot
after the rounding procedure has size $|\mathcal{F}|\leq m\chi .$
\end{lemma}

\paragraph{Step 2}

Let $\mathcal{P}$ denote the set of jobs from $\mathcal{J}\backslash 
\mathcal{F}$ for which at least one operation, according to the machine
assignment computed in step 1, has processing time greater than $\frac{%
\varepsilon \tilde{t}}{4 \chi \mu ^{3}m(1+\frac{\epsilon }{8})}$. Let $%
\mathcal{L=F\cup P}$ and $\mathcal{S=J}\backslash \mathcal{L}$. According to
machine and interval assignment of step 1, find a feasible schedule $\sigma
_{\mathcal{S}}$ for the jobs from $\mathcal{S}$ applying Sevastianov's
algorithm. We use the algorithm of Sevastianov to find a schedule for the
operations assigned to each time interval. Since we have $\chi $ time
intervals, the enlargement due to that algorithm is at most $\chi \mu
^{3}mp_{\max }$, where $p_{\max }$ is the maximum processing time of
operations from $\mathcal{S}$ (according to the machine and interval
assignment of step 1). Since $p_{\max }\leq \frac{\varepsilon \tilde{t}}{%
4 \chi \mu ^{3}m(1+\frac{\epsilon }{8})}$, it follows that the maximum
delivery completion time (when release times are assumed to be 0) of the
resulting schedule is $(1+\frac{\epsilon }{4})t^{\ast }+\chi \mu
^{3}mp_{\max }\leq (1+\frac{\epsilon }{4})t^{\ast }+\frac{\varepsilon \tilde{%
t}}{4 (1+\frac{\epsilon }{8})}\leq (1+\frac{\varepsilon }{2})t^{\ast }\leq (1+%
\frac{\varepsilon }{2})L_{\max }^{\ast }$. Note that by considering release
times the described algorithm delivers a schedule for the jobs from $%
\mathcal{S}$ that is at most $(2+\frac{\varepsilon }{2})$ times the optimal
one, since the maximum release time cannot be more than $L_{\max }^{\ast }$.
Again, the algorithm of Sevastianov takes $O(n^{2})$ time, but it can be
sped up to get linear time by ``sticking'' pairs of jobs from $\mathcal{S}$
together as described in \cite{JSS2}. Since Sevastianov's algorithm is
applied $\chi $ times, the time complexity of step 2 is $O(n)$. Furthermore,
the cardinality of set $\mathcal{L}$ of jobs which are not yet scheduled is
bounded by a constant. Indeed, $|\mathcal{P}|$ is at most $m(1+\frac{%
\epsilon }{4})t^{\ast }$ divided by the minimum processing time of set $%
\mathcal{P}$, and therefore $|\mathcal{P}|<m(1+\frac{\epsilon }{4})t^{\ast }%
\frac{4 \chi \mu ^{3}m(1+\frac{\epsilon }{8})}{\varepsilon \tilde{t}}\leq 
\frac{4 \chi \mu ^{3}m^{2}(1+\frac{\epsilon }{8})(1+\frac{\epsilon }{4})}{%
\varepsilon }=O(\frac{\mu ^{3}m^{2}}{\varepsilon ^{2}})$, since $\chi \leq
1+2/\varepsilon $. By definition of set $\mathcal{L}$ we have $|\mathcal{L}%
|=|\mathcal{F}|\mathcal{\cup }|\mathcal{P}|=O(\frac{\mu ^{3}m^{2}}{%
\varepsilon ^{2}})$.

\paragraph{Step 3}

Now we ignore delivery times and consider release times. In the following we
describe how to compute a schedule $\sigma _{\mathcal{L}}$ that minimizes
the makespan for the jobs from $\mathcal{L}$.

As for delivery times, the release time of a job can be interpreted as an
additional operation of the job that has to be processed on a non-bottleneck
machine. Because of this interpretation, we can add to the set $\mathcal{O}_{%
\mathcal{L}}$ of operations a set $\mathcal{R=}\left\{ O_{0j}|J_{j}\in 
\mathcal{L}\right\} $ of release operations; the processing time of
operation $O_{0j}$ is $r_{j}$. Each job $J_{j}\in \mathcal{L}$ has to
perform a release operation $O_{0j}$ on a non-bottleneck machine at the
beginning.

Let us define a snapshot as a subset of operations from $\mathcal{O}_{%
\mathcal{L}}\cup \mathcal{R}$ such that two different operations of the same
job cannot belong to the same snapshot. A \textit{relative order} is an
ordered sequence of different snapshots which defines for every operation $%
O_{ij}$ of $\mathcal{O}_{\mathcal{L}}\cup \mathcal{R}$ the first $\alpha
_{ij}$ and the last $\beta _{ij}$ snapshots in which operation $O_{ij}$ can
start and finish, respectively. Let $g$ be the number of snapshots. A
relative order is feasible if $1\leq \alpha _{ij}\leq \beta _{ij}\leq g$ for
every operation $O_{ij}$ of $\mathcal{O}_{\mathcal{L}}\cup \mathcal{R}$, and
for two operations $O_{ij}$ and $O_{i+1j}$ of the same job $J_{j}\in 
\mathcal{L}$, we have $\beta _{ij}+1=\alpha _{i+1j}$. Furthermore, every
release operation starts in the first snapshot, i.e., $\alpha _{0j}=1$ for $%
J_{j}\in \mathcal{L}$.

We observe that $g$ can be bounded by $(\mu +1)|\mathcal{L}|$, and therefore 
$g=O(\frac{\mu ^{4}m^{2}}{\varepsilon ^{2}})$. Note that a relative order is
defined without assigning operations of long jobs to machines.

Since $\mathcal{L}$ has a constant number of jobs (and hence there is a
constant number of snapshots), we can consider all relative orderings of the
jobs from $\mathcal{L}$ in the snapshots. Any operation is scheduled in
consecutive snapshots $i,i+1,\ldots ,i+t$, \emph{but} only a fraction
(possible equal to zero) of that operation might be scheduled in any of
these snapshots. In every snapshot there can be at most one operation from
any given job from $\mathcal{L}$.

Now we define a linear program. For each operation $O_{ij}$ of job $J_{j}\in 
\mathcal{L}$ we define variable $x_{ij\ell h}$ for every $\alpha _{ij}\leq
\ell \leq \beta _{ij}$ and every $h\in M_{ij}$. Variable $x_{ij\ell h}$
denotes which fraction of operation $O_{ij}$ is scheduled in snapshot $\ell $
and on machine $h$. Let $t_{\ell }$ be the length of snapshot $\ell $. The
load on machine $h$ in snapshot $\ell $ is equal to the total processing
time of operations of jobs from $\mathcal{L}$, i.e., $L_{\ell
,h}=\sum_{J_{j}\in \mathcal{L}}\sum_{i=1,\ldots ,\mu |\alpha _{ij}\leq \ell
\leq \beta _{ij},h\in M_{ij}}\,x_{ij\ell h}p_{ij}^{h}$. The linear program
for a given relative order $R$ is the following.

\begin{description}
\item[Minimize $~\sum_{\ell=1}^g t_\ell~$]  

\item[s.t.~~~(1)~]  $t_{\ell }\geq 0$, {\small \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }$1\leq \ell \leq g,$

\item[~~~~~~~(2)~]  $\sum_{h\in M_{ij}}\sum_{\ell =\alpha _{ij}}^{\beta
_{ij}}x_{ij\ell h}=1$, ~\ {\small \ \ \ }$1\leq i\leq \mu ${\small , }$%
J_{j}\in \mathcal{L}${\small ,}

\item[~~~~~~~(3)~]  $L_{\ell ,h}\leq t_{\ell }$, ~~ $\ \ \ \ \ \ \ \ \ \ \ \
\ \ \ \ \ \ \ \ \ \ \ 1\leq \ell \leq g$, $1\leq h\leq m$,

\item[~~~~~~~(4)~]  $\sum_{h\in M_{ij}}x_{ij\ell h}p_{ij}^{h}\leq t_{\ell },$%
~\ \ \ \ \ \ \ ~ $\ 1\leq \ell \leq g${\small , }$J_{j}\in \mathcal{L}$, $%
\alpha _{ij}\leq \ell \leq \beta _{ij}$,

\item[ \ \ \ \ \ \ (5) ]  $x_{ij\ell h}\geq 0,$ ~\ \ \ \ \ \ \ \ \ \ \ \ \ \
\ \ \ \ \ \ \ \ \ ~ $1\leq i\leq \mu $, $J_{j}\in \mathcal{L}$, $\alpha
_{ij}\leq \ell \leq \beta _{ij},$

\item[ \ \ \ \ \ \ (6) ]  $\sum_{\ell =1}^{\beta _{0j}}t_{\ell }=r_{j},$ ~~ 
{\small \ \ \ \ \qquad \qquad\ \ \ }$J_{j}\in \mathcal{L}$.
\end{description}

Constraints (3) and (4) are machine and job conditions, respectively, which
ensure that preempted operations fit onto machines. Consider any feasible
schedule of jobs from $\mathcal{L}$ according to a relative order $R$, where
with respect to this schedule, $x_{ij\ell h}p_{ij}^{h}$ denote the total
amount of time that machine $h$ works on operation $O_{ij}$ in snapshot $%
\ell $, and $t_{\ell }$ denote the length of snapshot $\ell $. It is evident
that the values $t_{\ell }$ and $x_{ij\ell h}$ for the schedule constitute a
feasible solution to the linear program above. We assert that the converse
is also true. That is, for any feasible solution to the linear programming
problem, there is a feasible solution with the same value of $t_{\ell }$ and 
$x_{ij\ell h}$. It is sufficient to note that any feasible solution to the
linear programming problem provide for each snapshot an instance of the
preemptive open shop scheduling problem. Hence, by referring to \cite{GS,LL}%
, the claim follows. Furthermore, by using the same procedure provided in 
\cite{LL} to construct a schedule for each snapshot with no more than $%
O(m^{2})$ preemptions, there are at most $O(\frac{\mu ^{4}m^{4}}{\varepsilon
^{2}})$ preemptions.

For each relative order $R$ solve the linear program above, and select the
solution with the smallest length. For each snapshot $\ell $, apply the
algorithm described in \cite{LL} to find a schedule with length $t_{\ell }$.
Since the linear program has only a constant number of variables and
constraints,
step 3 can be completed in $O(1)$ time.
%    In the third step of the (2+eps)-approximation algorithm for the
%    preemptive fjsp with migration we have a constant number of jobs (and of
%    course we are still assuming that m and mu are constants). 
%    In that step there is a problem that can be solved by a two-phase method.
%    The first phase consists in solving a linear programming problem. The
%    second phase uses the solution of this LP problem and produces an optimal
%    preemptive schedule.
%    Both phases take polynomial time in the instance size. The instance size
%    is O(k*m*mu*logL) where k is the number of jobs and L is the largest number
%    appearing in this instance.
%
%    My question is the following. Can we claim that step 3 takes O(1) time?
%
%    In my knowledge we can do 2 fundamental assumptions about each "elementary
%    operation" of any algorithm:
%    (1)an elementary operation takes unit cost
%    (2)an elementary operation takes an amount of time that grows
%    approximately as the logarithm of the numbers involved.
%
%    By assumption (1) step 3 requires O(1) time. 
%    By assumption (2) step 3 requires O(logL) time. 
% 
Note that the maximum delivery completion time of the resulting schedule $%
\sigma _{\mathcal{L}}$ is at most $2L_{\max }^{\ast }$.

\paragraph{Step 4}

The output schedule is obtained by appending $\sigma _{\mathcal{S}}$ after $%
\sigma _{\mathcal{L}}$. The makespan of schedule $\sigma _{\mathcal{L}}$ is
not greater than $L_{\max }^{\ast }$ and the maximum delivery completion
time of jobs from $\mathcal{S}$ by appending $\sigma _{\mathcal{S}}$ after $%
\sigma _{\mathcal{L}}$ is at most $(2+\frac{\varepsilon }{2})L_{\max }^{\ast
}$. Hence, from the arguments of Section \ref{Sect:prep} we get the promised
result.

\begin{theorem}
For any fixed $m$ and $\mu $, there is a polynomial-time approximation
algorithm for the preemptive flexible job shop scheduling problem with
migration that computes for any fixed real number $\epsilon $, with $%
\varepsilon >0$, a feasible schedule with maximum delivery completion time
of at most $(2+\varepsilon )\cdot L_{\max }^{\ast }$ in $O(n)$ time.
\end{theorem}

\section{Conclusion}

In the first part of the paper, we have 
proposed a polynomial time approximation scheme for the flexible job
shop problem with delivery times when the number of machines and the number
of operations per job are fixed. The running time for the algorithm is 
$O(n)$. This algorithm can be generalized to the preemptive
variant without migration; see our full version \cite{JSS3}.
In the second part, we have described a $(2+\varepsilon )$-approximation 
algorithm for
the preemptive case with migration.

The job shop scheduling problem with multi-purpose
machines \cite{BJK} is a special case of the flexible job shop problem, in
which the processing time of each operation does not depend anymore on the
machine on which it is processed. For the MPM job shop problem, it is
possible to extend our techniques to provide a linear time approximation
scheme for the problem in which each job $J_{j}$ has a release time $r_{j}$
and a delivery time $q_{j}$, and the objective is to minimize the maximum
delivery time; see \cite{JSS3}.

We conjecture that there is a polynomial-time approximation scheme for the
flexible job shop problem with delivery and release times when the number of
machines and the number of operations per job are fixed, while it remains an
open question whether there is a PTAS for the preemptive case with migration.

%   \newpage

\begin{thebibliography}{99}
\bibitem{Amoura}  {\small A.K. Amoura, E. Bampis, C. Kenyon and Y.
Manoussakis, Scheduling independent multiprocessor tasks, \emph{Proceedings
of the 5th Annual European Symposium on Algorithms}, LNCS 1284 (1997), 1-12. 
}

\bibitem{BJK}  {\small P. Brucker, B. Jurisch, A. Kramer, Complexity of
scheduling problems with multi-purpose machines, \emph{Annals of Operations
Research}, 70 (1997), 57-73.}

\bibitem{BR}  {\small P. Brandimarte, Routing and scheduling in a flexible
job shop by tabu search, \emph{Annals of Operations Research}, 22, pp
158-183, 1993. }

\bibitem{BS}  {\small P. Brucker, R. Schlie, Job-shop scheduling with
multi-purpose machines, Computing 45, 369-375, 1990.}

\bibitem{COLERI}  {\small T. H. Cormen, C.E. Leiserson, R. L. Rivest,
Introduction to Algorithms, \emph{MIT Press,} 1991. }

\bibitem{GJS}  {\small M.R. Garey, D.S. Johnson and R. Sethi, The complexity
of flowshop and jobshop scheduling, \emph{Mathematics of Operations Research}
1 (1976), 117-129. }

\bibitem{GPSS}  {\small L.A. Goldberg, M. Paterson, A. Srinivasan, and E.
Sweedyk, Better approximation guarantees for job-shop scheduling, \emph{%
Proceedings of the 8th Symposium on Discrete Algorithms}, SODA 97, 599-608.}

\bibitem{GS}  {\small T. Gonzales and S. Sahni, Open shop scheduling to
minimize finish time, \emph{Journal of the ACM} 23 (1976), 665-679. }

\bibitem{GS2}  {\small T. Gonzales and S. Sahni, Flowshop and jobshop
schedules: complexity and approximation, \emph{Operations Research} 26
(1978), 36-52. }

\bibitem{GLLR}  {\small R.L. Graham, E.L. Lawler, J.K. Lenstra, A.H.G.
Rinnoy Kan, Optimization and approximation in deterministic sequencing and
scheduling, \emph{Ann. Discrete Math.} 5 (1979), 287-326.}

\bibitem{GK}  {\small M.D. Grigoriadis and L.G. Khachiyan, Coordination
complexity of parallel price-directive decomposition, \emph{Mathematics of
Operations Research} 21 (1996), 321-340. }

\bibitem{Hall}  {\small L.A. Hall, Approximability of flow shop scheduling, 
\emph{Mathematical Programming} 82 (1998), 175-190. }

\bibitem{HS}  {\small L.A. Hall and D.B. Shmoys, Approximation algorithms
for constrained scheduling problems, \emph{Proceedings of the IEEE 30th
Annual Symposium on Foundations of Computer Science}, FOCS 89,
 134-139.}

\bibitem{JP1}  {\small K. Jansen and L. Porkolab, Linear-time approximation
schemes for scheduling malleable parallel tasks, \emph{Proceedings of the
10th Annual ACM-SIAM Symposium on Discrete Algorithms}, 
SODA 99, 490-498. }

\bibitem{JP2}  {\small K. Jansen and L. Porkolab, Improved approximation
schemes for scheduling unrelated parallel machines, \emph{Proceedings
of the 31st Annual ACM
Symposium on Theory of Computing}, STOC 99,  408-417.}

\bibitem{JSS1}  {\small K. Jansen, R. Solis-Oba and M.I. Sviridenko, 
Makespan minimization in job shops: a polynomial time approximation
scheme, emph{Proceedings of the 31st Annual ACM Symposium on Theory of 
Computing}, STOC 99, 394-399. }  

\bibitem{JSS2}  {\small K. Jansen, R. Solis-Oba and M.I. Sviridenko, A
Linear Time Approximation Scheme for the Job Shop Scheduling Problem, to
appear in:} {\small \emph{APPROX 99}, Berkeley, 1999. }

\bibitem{JSS3}  {\small K. Jansen, M. Mastrolilli and R. Solis-Oba,
Approximation Algorithms for Flexible Job Shop Problems, unpublished 
manuscript, 1999. }

\bibitem{LL}  {\small E. L. Lawler, J. Labetoulle, On Preemptive Scheduling
of Unrelated Parallel Processors by Linear Programming, \emph{Journal of the
ACM}, vol. 25, no. 4, pp. 612--619, October 1978.}

\bibitem{LLRS}  {\small E.L. Lawler, J.K. Lenstra, A.H.G. Rinnooy Kan and
D.B. Shmoys, Sequencing and scheduling: Algorithms and complexity, in:
Handbook in Operations Research and Management Science, Vol. 4,
North-Holland, 1993, 445-522. }

\bibitem{Potts}  {\small C.N. Potts, Analysis of a linear programming
heuristic for scheduling unrelated parallel machines, \emph{Discrete Applied
Mathematics} 10 (1985), 155-164. }

\bibitem{PST}  {\small S.A. Plotkin, D.B. Shmoys and E. Tardos, Fast
approximation algorithms for fractional packing and covering problems, \emph{%
Mathematics of Operations Research} 20 (1995), 257-301. }

\bibitem{Sev1}  {\small S.V. Sevastianov, Bounding algorithms for the
routing problem with arbitrary paths and alternative servers, \emph{%
Cybernetics} 22 (1986), 773-780. }

\bibitem{SSW}  {\small D.B. Shmoys, C. Stein and J. Wein, Improved
approximation algorithms for shop scheduling problems, \emph{SIAM Journal on
Computing} 23 (1994), 617-632. }

\bibitem{Va}  {\small R.J.M. Vaessens, Generalized Job Shop Scheduling:
Complexity and Local Search, Ph.D. thesis (1995), Eindhoven University of
Technology.}

\bibitem{WHHHLSS}  {\small D.P. Williamson, L.A. Hall, J.A. Hoogeveen,
C.A.J. Hurkens, J.K. Lenstra, S.V. Sevastianov and D.B. Shmoys, Short shop
schedules, \emph{Operations Research} 45 (1997), 288-294. }
\end{thebibliography}

\newpage

\appendix

\section{Appendix}

\begin{proof} (of Lemma \ref{Lemma:bound}).
$L_{\max }^{\ast }\geq {\frac{P}{m}}$, since this lower bound represents the
best possible situation in which all machines complete processing at exactly
the same time when each operation is processed on its fastest machine and
the delivery and release times of the jobs are $0$. Obviously, $L_{\max
}^{\ast }\geq t_{\max }$ the maximum delivery completion time is greater
than the maximum delivery time of any job when each operation is processed
on its fastest machine.

Now, we need to prove that $L_{\max }^{\ast }\leq P+q_{\max }$. To show that
we describe a simple algorithm $LS$ that provides a feasible schedule whose
maximum delivery completion time $L_{\max }^{LS}$ is at most $P+q_{\max }$:
schedule every operation of the first available job of any arbitrarily
ordered list of jobs on the fastest machine. A job is defined as
``available'' if it has already been released. Let $J_{k}$ be the job whose
lateness attains that of the schedule, i.e., $L_{\max }^{LS}=C_{k}+q_{k}$,
where $C_{k}$ is the completion time of job $J_{k}$. We have $L_{\max
}^{LS}=s_{k}+P_{k}+q_{k}<(r_{k}+P)+P_{k}+q_{k}\leq P+t_{\max }$.
\end{proof}

\bigskip

\begin{proof} (of Lemma \ref{Lemma:assign}).
We assign values to the variables from $X_{j}$ as follows.

\bigskip

\textit{Assignment Procedure}

\begin{enumerate}
\item  For each operation $O_{kj}$ of job $J_{j}$, for $1\leq \ell \leq g$
and $1\leq h\leq m$, initialize $f_{kj}(\ell ,h)$ to be the fraction of
operation $O_{kj}$ that is scheduled in snapshot $M(\ell )$ and on machine $%
h $ according to $S$.

\item  For each $(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })\in
A\times B$

\item  \qquad Set $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}:=f $, where $f:=\mathrm{min}\{f_{kj}(i_{k},s_{k})\mid 1\leq k\leq \mu \}$

\item  \qquad Set $f_{kj}(i_{k},s_{k}):=f_{kj}(i_{k},s_{k})-f\ $\ for $1\leq
k\leq \mu $.
\end{enumerate}

First, note that for any given feasible solution it is $\sum_{\ell
=1}^{g}\sum_{h=1}^{m}f_{kj}(\ell ,h)=1$, for each $J_{j}\in \mathcal{J}$ and 
$1\leq k\leq \mu $. Each time loop (2), (3) and (4) is completed, the same
fraction $f\geq 0$ of every operation of job $J_{j}$ is assigned as $S$;
furthermore for at least one operation $O_{kj}$ the new value of $%
f_{kj}(i_{k},s_{k})$ is set to zero. Hence, for every operation the fraction 
$f$ of step (3) is assigned at most once, since it is subtracted from $%
f_{kj}(i_{k},s_{k})$ that represents the part that is not yet assigned
during the procedure. It follows that $\sum_{(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })\in A\times B}\,\,x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}\leq 1$, and for each snapshot, machine and
operation $O_{ij}$ no more than the corresponding fraction of $O_{ij}$ as $S$
is assigned. Clearly we have $\mathrm{min}\{f_{kj}(i_{k},s_{k})\mid 1\leq
k\leq \mu \}=0$ at the end of step 4, and $\mathrm{min}\{f_{kj}(i_{k},s_{k})%
\mid 1\leq k\leq \mu \}=0$ for each $(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })\in A\times B$, in the end of the assignment procedure. Suppose,
ab absurdo, that at the end of the assignment procedure there is a fraction $%
\hat{f}>0$ of an operation of job $J_{j}$ that is not assigned to any
snapshot and machine, i.e., $\sum_{(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })\in A\times B}\,\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })}<1$. By construction, it follows that the same fraction $\hat{f}$
of every operation of job $J_{j}$ is not assigned by the procedure and
therefore there is at least a $(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })\in A\times B$ for which $\mathrm{min}\{f_{kj}(i_{k},s_{k})\mid
1\leq k\leq \mu \}>0$, which is a contradiction. Therefore, the sum of the
assigned fraction for each operation is 1 and the same fraction of every
operation of $J_{j}$ is assigned in the same snapshot and machine as $S$,
since for each snapshot, machine and operation $O_{ij}$ no more than the
corresponding fraction of $O_{ij}$ as $S$ is assigned.
\end{proof}

\begin{proof} (of Lemma \ref{Lemma:lpbound}).
Consider an optimum schedule $S^{\ast }$ for $\mathcal{J}$ that respects the
relative schedule $R$. We only need to show that for any job $J_{j}\in 
\mathcal{S}$ there is a feasible solution of $LP(R)$ that schedules all
operations of $J_{j}$ in the same positions as $S^{\ast }$. The latter
follows from Lemma \ref{Lemma:assign}.
\end{proof}

\begin{proof} (of Lemma \ref{L1}).
The algorithm by Grigoriadis and Khachiyan
either determines that $%
LP(R,s,m+1)$ is infeasible, or computes (a solution that is nearly feasible
in the sense that it is) a feasible solution where the right hand sides of $%
(6^{\prime })$ are approximated with $\rho ^{\prime }(m+1)$. This gives
(using $\rho =\rho ^{\prime }(m+1)$) a feasible solution of $%
LP(R,s,(m+1+\rho ))$. The overall running time of the procedure for $%
LP(R,s,m+1)$ is $O(n)$. 

The following assertions are true:
\begin{description}
\item[(1)]  if $LP(R,s,m+1)$ is infeasible, then there exists no schedule
(that respects the relative schedule $R$ for the long jobs in $\mathcal{L}$)
with value at most $s$,
\item[(2)]  if $LP(R,s,m+1)$ is feasible and $s\leq s^{\prime }$, then $%
LP(R,s^{\prime },m+1)$ is feasible,
\item[(3)]  $LP(R,L_{R}^{\ast },m+1)$ is feasible for each relative schedule 
$R$.
\end{description}

Since $R$ is a relative schedule for $\cal L$ 
in an optimum schedule,
the maximum delivery completion time $L_{R}^{\ast }$ is bounded by $m+1$. 
This implies that we can use binary search on the interval 
$[{1},1+m]$
to find a value $s\leq (1+{\frac{\epsilon }{8}})L_{R}^{\ast }$ such that 
$LP(R,s,(m+1+\rho ))$ is feasible for $\rho =\frac{\epsilon }{8g}$. This
search can be performed in $O(\log (\frac{1}{\varepsilon }\log m))$
iterations. A solution value $s$ that is less or equal to $(1+{\frac{%
\epsilon }{8}})L_{R }^{\ast }$ can be found by applying a binary search
only on the following values, 
\begin{equation}
(1+\frac{\varepsilon }{8}),(1+\frac{\varepsilon }{8})^{2},...,(1+\frac{%
\varepsilon }{8})^{b-1},m+1
\end{equation}
where $b$ is bounded by the smallest integer such that $(1+\varepsilon
/8)^{b}\geq m+1$. Thus, $b\leq \ln (m+1)/\ln (1+\varepsilon
/8)+1=O(1/\varepsilon \log m)$, since $\ln (1+\varepsilon /8)\geq \frac{%
\varepsilon /8}{1+\varepsilon /8}$ (see \cite{COLERI} page 35). Indeed,
notice that there exists a nonnegative integer $i\leq b$ such that $L_{R
}^{\ast }\in \lbrack (1+\frac{\varepsilon }{8})^{i},(1+\frac{\varepsilon }{8}%
)^{i+1}]$ and therefore we find a value $\bar{s}$ such that $(1+\frac{%
\varepsilon }{8})^{i}$ is not feasible and $(1+\frac{\varepsilon }{8})^{i+1}$
is feasible. This implies that $\bar{s}\leq (1+{\frac{\epsilon }{8}})L_{R
}^{\ast }.$ For this value $\bar{s}$ a solution to $LP(R,\bar{s},m+1+\rho )$
has value $\sum_{\ell =1}^{g}t_{\ell }\leq (1+{\frac{\epsilon }{8}}%
)L_{R}^{\ast }$, and machine loads $L_{\ell ,h}\leq t_{\ell }+\rho $. Since $%
\rho ={\frac{\epsilon }{8g}}$ we obtain a fractional solution of value $%
\sum_{\ell =1}^{g}(t_{\ell }+\rho )\leq (1+{\frac{\epsilon }{4}})L_{R}^{\ast
}$.
\end{proof}





\begin{proof} (of Lemma \ref{L2}).
The small jobs $\mathcal{F}$ that received fractional assignment and the
jobs in $\mathcal{V}$ are scheduled on the machines with the smallest
processing time sequentially at the beginning of the schedule produced by
the above algorithm. Thus, by Lemmas \ref{L1} and \ref{L3} the claim follows.
\end{proof}

\begin{proof} (of Lemma \ref{L4}).
By Lemmas \ref{bound_F}, since $|\mathcal{V}|\leq \frac{8\mu ^{3}m^{2}(m+1)}{%
\varepsilon }g$, and assuming $m\geq 2$, 
\begin{equation*}
|\mathcal{F}\cup \mathcal{V}|\leq mg+\frac{8\mu ^{3}m^{2}(m+1)}{\varepsilon }%
g\leq \frac{48(1+\varepsilon )^{2}\mu ^{4}m^{3}}{\varepsilon ^{2}}k.
\end{equation*}
By the preceding discussion on the choice of $\mathcal{L}$ and by Lemma \ref
{key}, the total processing time for the jobs in $\mathcal{F\cup V}$ is at
most ${\frac{\epsilon }{8}}\leq \frac{\epsilon }{8}L_{\max }^{\ast }$.
\end{proof}

\begin{proof} (of Theorem \ref{T1}).
Lemmas \ref{L2} and \ref{L4} imply that $(1+\frac{3}{8}\epsilon )L_{\max
}^{\ast }+S(\mathcal{F\cup V})\leq (1+\frac{1}{2}\epsilon )L_{\max }^{\ast }$%
. Then, using the arguments of Section \ref{Sect:prep}, we have a $(1+\frac{1%
}{2}\epsilon )$-approximation algorithm that can handle $1+\frac{2}{\epsilon 
}$ distinct delivery times. That gives a $(1+\epsilon )$-approximation
algorithm for the general case. For every fixed $m$ and $\epsilon $, all
computations can be carried out in $O(n)$ time. 
\end{proof}

\begin{proof} (of Lemma \ref{Lemma:lpbound2}).
Consider an optimum schedule $S^{\ast }$. We only need to show that for any
job $J_{j}\in \mathcal{J}$ there is a feasible solution of $LP$ that
schedules all operations of $J_{j}$ in the same positions as $S^{\ast }$. By
considering the new definition of set $A$ and $B$ given in this section, the
latter follows from Lemma \ref{Lemma:assign}.
\end{proof}

\end{document}





--Corps_of_Giraffes_538_000
Content-Type: TEXT/plain; name="llncs.cls"; charset=us-ascii; x-unix-mode=0644
Content-Description: llncs.cls
Content-MD5: 3Wz+hR35fWb3ALpfGVhr0A==

% LLNCS DOCUMENT CLASS -- version 2.6
% for LaTeX2e
%
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesClass{llncs}[1999/04/27 v2.6
^^JLaTeX document class for Lecture Notes in Computer Science]
% Options
\let\if@envcntreset\iffalse
\DeclareOption{envcountreset}{\let\if@envcntreset\iftrue}
\DeclareOption{citeauthoryear}{\let\citeauthoryear=Y}
\DeclareOption{oribibl}{\let\oribibl=Y}
\let\if@envcntsame\iffalse
\DeclareOption{envcountsame}{\let\if@envcntsame\iftrue}
\let\if@envcntsect\iffalse
\DeclareOption{envcountsect}{\let\if@envcntsect\iftrue}
\let\if@runhead\iffalse
\DeclareOption{runningheads}{\let\if@runhead\iftrue}

\let\if@openbib\iffalse
\DeclareOption{openbib}{\let\if@openbib\iftrue}

\DeclareOption*{\PassOptionsToClass{\CurrentOption}{article}}

\ProcessOptions

\LoadClass[twoside]{article}
\RequirePackage{multicol} % needed for the list of participants, index

\setlength{\textwidth}{12.2cm}
\setlength{\textheight}{19.3cm}

% Ragged bottom for the actual page
\def\thisbottomragged{\def\@textbottom{\vskip\z@ plus.0001fil
\global\let\@textbottom\relax}}

\renewcommand\small{%
   \@setfontsize\small\@ixpt{11}%
   \abovedisplayskip 8.5\p@ \@plus3\p@ \@minus4\p@
   \abovedisplayshortskip \z@ \@plus2\p@
   \belowdisplayshortskip 4\p@ \@plus2\p@ \@minus2\p@
   \def\@listi{\leftmargin\leftmargini
               \parsep 0\p@ \@plus1\p@ \@minus\p@
               \topsep 8\p@ \@plus2\p@ \@minus4\p@
               \itemsep0\p@}%
   \belowdisplayskip \abovedisplayskip
}

\frenchspacing
\widowpenalty=10000
\clubpenalty=10000

\setlength\oddsidemargin   {63\p@}
\setlength\evensidemargin  {63\p@}
\setlength\marginparwidth  {90\p@}

\setlength\headsep   {16\p@}

\setlength\footnotesep{7.7\p@}
\setlength\textfloatsep{8mm\@plus 2\p@ \@minus 4\p@}
\setlength\intextsep   {8mm\@plus 2\p@ \@minus 2\p@}

\setcounter{secnumdepth}{2}

\newcounter {chapter}
\renewcommand\thechapter      {\@arabic\c@chapter}

\newif\if@mainmatter \@mainmattertrue
\newcommand\frontmatter{\cleardoublepage
            \@mainmatterfalse\pagenumbering{Roman}}
\newcommand\mainmatter{\cleardoublepage
       \@mainmattertrue\pagenumbering{arabic}}
\newcommand\backmatter{\if@openright\cleardoublepage\else\clearpage\fi
      \@mainmatterfalse}

\renewcommand\part{\cleardoublepage
                 \thispagestyle{empty}%
                 \if@twocolumn
                     \onecolumn
                     \@tempswatrue
                   \else
                     \@tempswafalse
                 \fi
                 \null\vfil
                 \secdef\@part\@spart}

\def\@part[#1]#2{%
    \ifnum \c@secnumdepth >-2\relax
      \refstepcounter{part}%
      \addcontentsline{toc}{part}{\thepart\hspace{1em}#1}%
    \else
      \addcontentsline{toc}{part}{#1}%
    \fi
    \markboth{}{}%
    {\centering
     \interlinepenalty \@M
     \normalfont
     \ifnum \c@secnumdepth >-2\relax
       \huge\bfseries \partname~\thepart
       \par
       \vskip 20\p@
     \fi
     \Huge \bfseries #2\par}%
    \@endpart}
\def\@spart#1{%
    {\centering
     \interlinepenalty \@M
     \normalfont
     \Huge \bfseries #1\par}%
    \@endpart}
\def\@endpart{\vfil\newpage
              \if@twoside
                \null
                \thispagestyle{empty}%
                \newpage
              \fi
              \if@tempswa
                \twocolumn
              \fi}

\newcommand\chapter{\clearpage
                    \thispagestyle{empty}%
                    \global\@topnum\z@
                    \@afterindentfalse
                    \secdef\@chapter\@schapter}
\def\@chapter[#1]#2{\ifnum \c@secnumdepth >\m@ne
                       \if@mainmatter
                         \refstepcounter{chapter}%
                         \typeout{\@chapapp\space\thechapter.}%
                         \addcontentsline{toc}{chapter}%
                                  {\protect\numberline{\thechapter}#1}%
                       \else
                         \addcontentsline{toc}{chapter}{#1}%
                       \fi
                    \else
                      \addcontentsline{toc}{chapter}{#1}%
                    \fi
                    \chaptermark{#1}%
                    \addtocontents{lof}{\protect\addvspace{10\p@}}%
                    \addtocontents{lot}{\protect\addvspace{10\p@}}%
                    \if@twocolumn
                      \@topnewpage[\@makechapterhead{#2}]%
                    \else
                      \@makechapterhead{#2}%
                      \@afterheading
                    \fi}
\def\@makechapterhead#1{%
% \vspace*{50\p@}%
  {\centering
    \ifnum \c@secnumdepth >\m@ne
      \if@mainmatter
        \large\bfseries \@chapapp{} \thechapter
        \par\nobreak
        \vskip 20\p@
      \fi
    \fi
    \interlinepenalty\@M
    \Large \bfseries #1\par\nobreak
    \vskip 40\p@
  }}
\def\@schapter#1{\if@twocolumn
                   \@topnewpage[\@makeschapterhead{#1}]%
                 \else
                   \@makeschapterhead{#1}%
                   \@afterheading
                 \fi}
\def\@makeschapterhead#1{%
% \vspace*{50\p@}%
  {\centering
    \normalfont
    \interlinepenalty\@M
    \Large \bfseries  #1\par\nobreak
    \vskip 40\p@
  }}

\renewcommand\section{\@startsection{section}{1}{\z@}%
                       {-18\p@ \@plus -4\p@ \@minus -4\p@}%
                       {12\p@ \@plus 4\p@ \@minus 4\p@}%
                       {\normalfont\large\bfseries\boldmath
                        \rightskip=\z@ \@plus 8em\pretolerance=10000 }}
\renewcommand\subsection{\@startsection{subsection}{2}{\z@}%
                       {-18\p@ \@plus -4\p@ \@minus -4\p@}%
                       {8\p@ \@plus 4\p@ \@minus 4\p@}%
                       {\normalfont\normalsize\bfseries\boldmath
                        \rightskip=\z@ \@plus 8em\pretolerance=10000 }}
\renewcommand\subsubsection{\@startsection{subsubsection}{3}{\z@}%
                       {-18\p@ \@plus -4\p@ \@minus -4\p@}%
                       {-0.5em \@plus -0.22em \@minus -0.1em}%
                       {\normalfont\normalsize\bfseries\boldmath}}
\renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}%
                       {-12\p@ \@plus -4\p@ \@minus -4\p@}%
                       {-0.5em \@plus -0.22em \@minus -0.1em}%
                       {\normalfont\normalsize\itshape}}
\renewcommand\subparagraph[1]{\typeout{LLNCS warning: You should not use
                  \string\subparagraph\space with this class}\vskip0.5cm
You should not use \verb|\subparagraph| with this class.\vskip0.5cm}

\DeclareMathSymbol{\Gamma}{\mathalpha}{letters}{"00}
\DeclareMathSymbol{\Delta}{\mathalpha}{letters}{"01}
\DeclareMathSymbol{\Theta}{\mathalpha}{letters}{"02}
\DeclareMathSymbol{\Lambda}{\mathalpha}{letters}{"03}
\DeclareMathSymbol{\Xi}{\mathalpha}{letters}{"04}
\DeclareMathSymbol{\Pi}{\mathalpha}{letters}{"05}
\DeclareMathSymbol{\Sigma}{\mathalpha}{letters}{"06}
\DeclareMathSymbol{\Upsilon}{\mathalpha}{letters}{"07}
\DeclareMathSymbol{\Phi}{\mathalpha}{letters}{"08}
\DeclareMathSymbol{\Psi}{\mathalpha}{letters}{"09}
\DeclareMathSymbol{\Omega}{\mathalpha}{letters}{"0A}

\let\footnotesize\small

\def\vec#1{\mathchoice{\mbox{\boldmath$\displaystyle#1$}}
{\mbox{\boldmath$\textstyle#1$}}
{\mbox{\boldmath$\scriptstyle#1$}}
{\mbox{\boldmath$\scriptscriptstyle#1$}}}

\def\squareforqed{\hbox{\rlap{$\sqcap$}$\sqcup$}}
\def\qed{\ifmmode\squareforqed\else{\unskip\nobreak\hfil
\penalty50\hskip1em\null\nobreak\hfil\squareforqed
\parfillskip=0pt\finalhyphendemerits=0\endgraf}\fi}

\def\getsto{\mathrel{\mathchoice {\vcenter{\offinterlineskip
\halign{\hfil
$\displaystyle##$\hfil\cr\gets\cr\to\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\textstyle##$\hfil\cr\gets
\cr\to\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\scriptstyle##$\hfil\cr\gets
\cr\to\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\scriptscriptstyle##$\hfil\cr
\gets\cr\to\cr}}}}}
\def\lid{\mathrel{\mathchoice {\vcenter{\offinterlineskip\halign{\hfil
$\displaystyle##$\hfil\cr<\cr\noalign{\vskip1.2pt}=\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\textstyle##$\hfil\cr<\cr
\noalign{\vskip1.2pt}=\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\scriptstyle##$\hfil\cr<\cr
\noalign{\vskip1pt}=\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\scriptscriptstyle##$\hfil\cr
<\cr
\noalign{\vskip0.9pt}=\cr}}}}}
\def\gid{\mathrel{\mathchoice {\vcenter{\offinterlineskip\halign{\hfil
$\displaystyle##$\hfil\cr>\cr\noalign{\vskip1.2pt}=\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\textstyle##$\hfil\cr>\cr
\noalign{\vskip1.2pt}=\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\scriptstyle##$\hfil\cr>\cr
\noalign{\vskip1pt}=\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\scriptscriptstyle##$\hfil\cr
>\cr
\noalign{\vskip0.9pt}=\cr}}}}}
\def\grole{\mathrel{\mathchoice {\vcenter{\offinterlineskip
\halign{\hfil
$\displaystyle##$\hfil\cr>\cr\noalign{\vskip-1pt}<\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\textstyle##$\hfil\cr
>\cr\noalign{\vskip-1pt}<\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\scriptstyle##$\hfil\cr
>\cr\noalign{\vskip-0.8pt}<\cr}}}
{\vcenter{\offinterlineskip\halign{\hfil$\scriptscriptstyle##$\hfil\cr
>\cr\noalign{\vskip-0.3pt}<\cr}}}}}
\def\bbbr{{\rm I\!R}} %reelle Zahlen
\def\bbbm{{\rm I\!M}}
\def\bbbn{{\rm I\!N}} %natuerliche Zahlen
\def\bbbf{{\rm I\!F}}
\def\bbbh{{\rm I\!H}}
\def\bbbk{{\rm I\!K}}
\def\bbbp{{\rm I\!P}}
\def\bbbone{{\mathchoice {\rm 1\mskip-4mu l} {\rm 1\mskip-4mu l}
{\rm 1\mskip-4.5mu l} {\rm 1\mskip-5mu l}}}
\def\bbbc{{\mathchoice {\setbox0=\hbox{$\displaystyle\rm C$}\hbox{\hbox
to0pt{\kern0.4\wd0\vrule height0.9\ht0\hss}\box0}}
{\setbox0=\hbox{$\textstyle\rm C$}\hbox{\hbox
to0pt{\kern0.4\wd0\vrule height0.9\ht0\hss}\box0}}
{\setbox0=\hbox{$\scriptstyle\rm C$}\hbox{\hbox
to0pt{\kern0.4\wd0\vrule height0.9\ht0\hss}\box0}}
{\setbox0=\hbox{$\scriptscriptstyle\rm C$}\hbox{\hbox
to0pt{\kern0.4\wd0\vrule height0.9\ht0\hss}\box0}}}}
\def\bbbq{{\mathchoice {\setbox0=\hbox{$\displaystyle\rm
Q$}\hbox{\raise
0.15\ht0\hbox to0pt{\kern0.4\wd0\vrule height0.8\ht0\hss}\box0}}
{\setbox0=\hbox{$\textstyle\rm Q$}\hbox{\raise
0.15\ht0\hbox to0pt{\kern0.4\wd0\vrule height0.8\ht0\hss}\box0}}
{\setbox0=\hbox{$\scriptstyle\rm Q$}\hbox{\raise
0.15\ht0\hbox to0pt{\kern0.4\wd0\vrule height0.7\ht0\hss}\box0}}
{\setbox0=\hbox{$\scriptscriptstyle\rm Q$}\hbox{\raise
0.15\ht0\hbox to0pt{\kern0.4\wd0\vrule height0.7\ht0\hss}\box0}}}}
\def\bbbt{{\mathchoice {\setbox0=\hbox{$\displaystyle\rm
T$}\hbox{\hbox to0pt{\kern0.3\wd0\vrule height0.9\ht0\hss}\box0}}
{\setbox0=\hbox{$\textstyle\rm T$}\hbox{\hbox
to0pt{\kern0.3\wd0\vrule height0.9\ht0\hss}\box0}}
{\setbox0=\hbox{$\scriptstyle\rm T$}\hbox{\hbox
to0pt{\kern0.3\wd0\vrule height0.9\ht0\hss}\box0}}
{\setbox0=\hbox{$\scriptscriptstyle\rm T$}\hbox{\hbox
to0pt{\kern0.3\wd0\vrule height0.9\ht0\hss}\box0}}}}
\def\bbbs{{\mathchoice
{\setbox0=\hbox{$\displaystyle     \rm S$}\hbox{\raise0.5\ht0\hbox
to0pt{\kern0.35\wd0\vrule height0.45\ht0\hss}\hbox
to0pt{\kern0.55\wd0\vrule height0.5\ht0\hss}\box0}}
{\setbox0=\hbox{$\textstyle        \rm S$}\hbox{\raise0.5\ht0\hbox
to0pt{\kern0.35\wd0\vrule height0.45\ht0\hss}\hbox
to0pt{\kern0.55\wd0\vrule height0.5\ht0\hss}\box0}}
{\setbox0=\hbox{$\scriptstyle      \rm S$}\hbox{\raise0.5\ht0\hbox
to0pt{\kern0.35\wd0\vrule height0.45\ht0\hss}\raise0.05\ht0\hbox
to0pt{\kern0.5\wd0\vrule height0.45\ht0\hss}\box0}}
{\setbox0=\hbox{$\scriptscriptstyle\rm S$}\hbox{\raise0.5\ht0\hbox
to0pt{\kern0.4\wd0\vrule height0.45\ht0\hss}\raise0.05\ht0\hbox
to0pt{\kern0.55\wd0\vrule height0.45\ht0\hss}\box0}}}}
\def\bbbz{{\mathchoice {\hbox{$\mathsf\textstyle Z\kern-0.4em Z$}}
{\hbox{$\mathsf\textstyle Z\kern-0.4em Z$}}
{\hbox{$\mathsf\scriptstyle Z\kern-0.3em Z$}}
{\hbox{$\mathsf\scriptscriptstyle Z\kern-0.2em Z$}}}}

\let\ts\,

\setlength\leftmargini  {17\p@}
\setlength\leftmargin    {\leftmargini}
\setlength\leftmarginii  {\leftmargini}
\setlength\leftmarginiii {\leftmargini}
\setlength\leftmarginiv  {\leftmargini}
\setlength  \labelsep  {.5em}
\setlength  \labelwidth{\leftmargini}
\addtolength\labelwidth{-\labelsep}

\def\@listI{\leftmargin\leftmargini
            \parsep 0\p@ \@plus1\p@ \@minus\p@
            \topsep 8\p@ \@plus2\p@ \@minus4\p@
            \itemsep0\p@}
\let\@listi\@listI
\@listi
\def\@listii {\leftmargin\leftmarginii
              \labelwidth\leftmarginii
              \advance\labelwidth-\labelsep
              \topsep    0\p@ \@plus2\p@ \@minus\p@}
\def\@listiii{\leftmargin\leftmarginiii
              \labelwidth\leftmarginiii
              \advance\labelwidth-\labelsep
              \topsep    0\p@ \@plus\p@\@minus\p@
              \parsep    \z@
              \partopsep \p@ \@plus\z@ \@minus\p@}

\renewcommand\labelitemi{\normalfont\bfseries --}
\renewcommand\labelitemii{$\m@th\bullet$}

\setlength\arraycolsep{1.4\p@}
\setlength\tabcolsep{1.4\p@}

\def\tableofcontents{\chapter*{\contentsname\@mkboth{{\contentsname}}%
                                                    {{\contentsname}}}
 \def\authcount##1{\setcounter{auco}{##1}\setcounter{@auth}{1}}
 \def\lastand{\ifnum\value{auco}=2\relax
                 \unskip{} \andname\
              \else
                 \unskip \lastandname\
              \fi}%
 \def\and{\stepcounter{@auth}\relax
          \ifnum\value{@auth}=\value{auco}%
             \lastand
          \else
             \unskip,
          \fi}%
 \@starttoc{toc}\if@restonecol\twocolumn\fi}

\def\l@part#1#2{\addpenalty{\@secpenalty}%
   \addvspace{2em plus\p@}%  % space above part line
   \begingroup
     \parindent \z@
     \rightskip \z@ plus 5em
     \hrule\vskip5pt
     \bfseries\boldmath   % set line in boldface
     \leavevmode          % TeX command to enter horizontal mode.
     #1\par
     \vskip5pt
     \hrule
     \vskip1pt
     \nobreak             % Never break after part entry
   \endgroup}

\def\@dotsep{2}

\def\hyperhrefextend{\ifx\hyper@anchor\@undefined\else
{chapter.\thechapter}\fi}

\def\addnumcontentsmark#1#2#3{%
\addtocontents{#1}{\protect\contentsline{#2}{\protect\numberline
                     {\thechapter}#3}{\thepage}\hyperhrefextend}}
\def\addcontentsmark#1#2#3{%
\addtocontents{#1}{\protect\contentsline{#2}{#3}{\thepage}\hyperhrefextend}}
\def\addcontentsmarkwop#1#2#3{%
\addtocontents{#1}{\protect\contentsline{#2}{#3}{0}\hyperhrefextend}}

\def\@adcmk[#1]{\ifcase #1 \or
\def\@gtempa{\addnumcontentsmark}%
  \or    \def\@gtempa{\addcontentsmark}%
  \or    \def\@gtempa{\addcontentsmarkwop}%
  \fi\@gtempa{toc}{chapter}}
\def\addtocmark{\@ifnextchar[{\@adcmk}{\@adcmk[3]}}

\def\l@chapter#1#2{\addpenalty{-\@highpenalty}
 \vskip 1.0em plus 1pt \@tempdima 1.5em \begingroup
 \parindent \z@ \rightskip \@pnumwidth
 \parfillskip -\@pnumwidth
 \leavevmode \advance\leftskip\@tempdima \hskip -\leftskip
 {\large\bfseries\boldmath#1}\ifx0#2\hfil\null
 \else
      \nobreak
      \leaders\hbox{$\m@th \mkern \@dotsep mu.\mkern
      \@dotsep mu$}\hfill
      \nobreak\hbox to\@pnumwidth{\hss #2}%
 \fi\par
 \penalty\@highpenalty \endgroup}

\def\l@title#1#2{\addpenalty{-\@highpenalty}
 \addvspace{8pt plus 1pt}
 \@tempdima \z@
 \begingroup
 \parindent \z@ \rightskip \@tocrmarg
 \parfillskip -\@tocrmarg
 \leavevmode \advance\leftskip\@tempdima \hskip -\leftskip
 #1\nobreak
 \leaders\hbox{$\m@th \mkern \@dotsep mu.\mkern
 \@dotsep mu$}\hfill
 \nobreak\hbox to\@pnumwidth{\hss #2}\par
 \penalty\@highpenalty \endgroup}

\setcounter{tocdepth}{0}
\newdimen\tocchpnum
\newdimen\tocsecnum
\newdimen\tocsectotal
\newdimen\tocsubsecnum
\newdimen\tocsubsectotal
\newdimen\tocsubsubsecnum
\newdimen\tocsubsubsectotal
\newdimen\tocparanum
\newdimen\tocparatotal
\newdimen\tocsubparanum
\tocchpnum=\z@            % no chapter numbers
\tocsecnum=15\p@          % section 88. plus 2.222pt
\tocsubsecnum=23\p@       % subsection 88.8 plus 2.222pt
\tocsubsubsecnum=27\p@    % subsubsection 88.8.8 plus 1.444pt
\tocparanum=35\p@         % paragraph 88.8.8.8 plus 1.666pt
\tocsubparanum=43\p@      % subparagraph 88.8.8.8.8 plus 1.888pt
\def\calctocindent{%
\tocsectotal=\tocchpnum
\advance\tocsectotal by\tocsecnum
\tocsubsectotal=\tocsectotal
\advance\tocsubsectotal by\tocsubsecnum
\tocsubsubsectotal=\tocsubsectotal
\advance\tocsubsubsectotal by\tocsubsubsecnum
\tocparatotal=\tocsubsubsectotal
\advance\tocparatotal by\tocparanum}
\calctocindent

\def\l@section{\@dottedtocline{1}{\tocchpnum}{\tocsecnum}}
\def\l@subsection{\@dottedtocline{2}{\tocsectotal}{\tocsubsecnum}}
\def\l@subsubsection{\@dottedtocline{3}{\tocsubsectotal}{\tocsubsubsecnum}}
\def\l@paragraph{\@dottedtocline{4}{\tocsubsubsectotal}{\tocparanum}}
\def\l@subparagraph{\@dottedtocline{5}{\tocparatotal}{\tocsubparanum}}

\def\listoffigures{\@restonecolfalse\if@twocolumn\@restonecoltrue\onecolumn
 \fi\section*{\listfigurename\@mkboth{{\listfigurename}}{{\listfigurename}}}
 \@starttoc{lof}\if@restonecol\twocolumn\fi}
\def\l@figure{\@dottedtocline{1}{0em}{1.5em}}

\def\listoftables{\@restonecolfalse\if@twocolumn\@restonecoltrue\onecolumn
 \fi\section*{\listtablename\@mkboth{{\listtablename}}{{\listtablename}}}
 \@starttoc{lot}\if@restonecol\twocolumn\fi}
\let\l@table\l@figure

\renewcommand\listoffigures{%
    \section*{\listfigurename
      \@mkboth{\listfigurename}{\listfigurename}}%
    \@starttoc{lof}%
    }

\renewcommand\listoftables{%
    \section*{\listtablename
      \@mkboth{\listtablename}{\listtablename}}%
    \@starttoc{lot}%
    }

\ifx\oribibl\undefined
\ifx\citeauthoryear\undefined
\renewenvironment{thebibliography}[1]
     {\section*{\refname}
      \def\@biblabel##1{##1.}
      \small
      \list{\@biblabel{\@arabic\c@enumiv}}%
           {\settowidth\labelwidth{\@biblabel{#1}}%
            \leftmargin\labelwidth
            \advance\leftmargin\labelsep
            \if@openbib
              \advance\leftmargin\bibindent
              \itemindent -\bibindent
              \listparindent \itemindent
              \parsep \z@
            \fi
            \usecounter{enumiv}%
            \let\p@enumiv\@empty
            \renewcommand\theenumiv{\@arabic\c@enumiv}}%
      \if@openbib
        \renewcommand\newblock{\par}%
      \else
        \renewcommand\newblock{\hskip .11em \@plus.33em \@minus.07em}%
      \fi
      \sloppy\clubpenalty4000\widowpenalty4000%
      \sfcode`\.=\@m}
     {\def\@noitemerr
       {\@latex@warning{Empty `thebibliography' environment}}%
      \endlist}
\def\@lbibitem[#1]#2{\item[{[#1]}\hfill]\if@filesw
     {\let\protect\noexpand\immediate
     \write\@auxout{\string\bibcite{#2}{#1}}}\fi\ignorespaces}
\newcount\@tempcntc
\def\@citex[#1]#2{\if@filesw\immediate\write\@auxout{\string\citation{#2}}\fi
  \@tempcnta\z@\@tempcntb\m@ne\def\@citea{}\@cite{\@for\@citeb:=#2\do
    {\@ifundefined
       {b@\@citeb}{\@citeo\@tempcntb\m@ne\@citea\def\@citea{,}{\bfseries
        ?}\@warning
       {Citation `\@citeb' on page \thepage \space undefined}}%
    {\setbox\z@\hbox{\global\@tempcntc0\csname b@\@citeb\endcsname\relax}%
     \ifnum\@tempcntc=\z@ \@citeo\@tempcntb\m@ne
       \@citea\def\@citea{,}\hbox{\csname b@\@citeb\endcsname}%
     \else
      \advance\@tempcntb\@ne
      \ifnum\@tempcntb=\@tempcntc
      \else\advance\@tempcntb\m@ne\@citeo
      \@tempcnta\@tempcntc\@tempcntb\@tempcntc\fi\fi}}\@citeo}{#1}}
\def\@citeo{\ifnum\@tempcnta>\@tempcntb\else
               \@citea\def\@citea{,\,\hskip\z@skip}%
               \ifnum\@tempcnta=\@tempcntb\the\@tempcnta\else
               {\advance\@tempcnta\@ne\ifnum\@tempcnta=\@tempcntb \else
                \def\@citea{--}\fi
      \advance\@tempcnta\m@ne\the\@tempcnta\@citea\the\@tempcntb}\fi\fi}
\else
\renewenvironment{thebibliography}[1]
     {\section*{\refname}
      \small
      \list{}%
           {\settowidth\labelwidth{}%
            \leftmargin\parindent
            \itemindent=-\parindent
            \labelsep=\z@
            \if@openbib
              \advance\leftmargin\bibindent
              \itemindent -\bibindent
              \listparindent \itemindent
              \parsep \z@
            \fi
            \usecounter{enumiv}%
            \let\p@enumiv\@empty
            \renewcommand\theenumiv{}}%
      \if@openbib
        \renewcommand\newblock{\par}%
      \else
        \renewcommand\newblock{\hskip .11em \@plus.33em \@minus.07em}%
      \fi
      \sloppy\clubpenalty4000\widowpenalty4000%
      \sfcode`\.=\@m}
     {\def\@noitemerr
       {\@latex@warning{Empty `thebibliography' environment}}%
      \endlist}
      \def\@cite#1{#1}%
      \def\@lbibitem[#1]#2{\item[]\if@filesw
        {\def\protect##1{\string ##1\space}\immediate
      \write\@auxout{\string\bibcite{#2}{#1}}}\fi\ignorespaces}
   \fi
\else
\@cons\@openbib@code{\noexpand\small}
\fi

\def\idxquad{\hskip 10\p@}% space that divides entry from number

\def\@idxitem{\par\hangindent 10\p@}

\def\subitem{\par\setbox0=\hbox{--\enspace}% second order
                \noindent\hangindent\wd0\box0}% index entry

\def\subsubitem{\par\setbox0=\hbox{--\,--\enspace}% third
                \noindent\hangindent\wd0\box0}% order index entry

\def\indexspace{\par \vskip 10\p@ plus5\p@ minus3\p@\relax}

\renewenvironment{theindex}
               {\@mkboth{\indexname}{\indexname}%
                \thispagestyle{empty}\parindent\z@
                \parskip\z@ \@plus .3\p@\relax
                \let\item\par
                \def\,{\relax\ifmmode\mskip\thinmuskip
                             \else\hskip0.2em\ignorespaces\fi}%
                \normalfont\small
                \begin{multicols}{2}[\@makeschapterhead{\indexname}]%
                }
                {\end{multicols}}

\renewcommand\footnoterule{%
  \kern-3\p@
  \hrule\@width 2truecm
  \kern2.6\p@}
  \newdimen\fnindent
  \fnindent1em
\long\def\@makefntext#1{%
    \parindent \fnindent%
    \leftskip \fnindent%
    \noindent
    \llap{\hb@xt@1em{\hss\@makefnmark\ }}\ignorespaces#1}

\long\def\@makecaption#1#2{%
  \vskip\abovecaptionskip
  \sbox\@tempboxa{{\bfseries #1.} #2}%
  \ifdim \wd\@tempboxa >\hsize
    {\bfseries #1.} #2\par
  \else
    \global \@minipagefalse
    \hb@xt@\hsize{\hfil\box\@tempboxa\hfil}%
  \fi
  \vskip\belowcaptionskip}

\def\fps@figure{htbp}
\def\fnum@figure{\figurename\thefigure}
\def \@floatboxreset {%
        \reset@font
        \small
        \@setnobreak
        \@setminipage
}
\def\fps@table{htbp}
\def\fnum@table{\tablename\thetable}
\renewenvironment{table}
               {\setlength\abovecaptionskip{0\p@}%
                \setlength\belowcaptionskip{10\p@}%
                \@float{table}}
               {\end@float}
\renewenvironment{table*}
               {\setlength\abovecaptionskip{0\p@}%
                \setlength\belowcaptionskip{10\p@}%
                \@dblfloat{table}}
               {\end@dblfloat}

\long\def\@caption#1[#2]#3{\par\addcontentsline{\csname
  ext@#1\endcsname}{#1}{\protect\numberline{\csname
  the#1\endcsname}{\ignorespaces #2}}\begingroup
    \@parboxrestore
    \@makecaption{\csname fnum@#1\endcsname}{\ignorespaces #3}\par
  \endgroup}

% LaTeX does not provide a command to enter the authors institute
% addresses. The \institute command is defined here.

\newcounter{@inst}
\newcounter{@auth}
\newcounter{auco}
\def\andname{and}
\def\lastandname{\unskip, and}
\newdimen\instindent
\newbox\authrun
\newtoks\authorrunning
\newtoks\tocauthor
\newbox\titrun
\newtoks\titlerunning
\newtoks\toctitle

\def\clearheadinfo{\gdef\@author{No Author Given}%
                   \gdef\@title{No Title Given}%
                   \gdef\@subtitle{}%
                   \gdef\@institute{No Institute Given}%
                   \gdef\@thanks{}%
                   \global\titlerunning={}\global\authorrunning={}%
                   \global\toctitle={}\global\tocauthor={}}

\def\institute#1{\gdef\@institute{#1}}

\def\institutename{\par
 \begingroup
 \parskip=\z@
 \parindent=\z@
 \setcounter{@inst}{1}%
 \def\and{\par\stepcounter{@inst}%
 \noindent$^{\the@inst}$\enspace\ignorespaces}%
 \setbox0=\vbox{\def\thanks##1{}\@institute}%
 \ifnum\c@@inst=1\relax
 \else
   \setcounter{footnote}{\c@@inst}%
   \setcounter{@inst}{1}%
   \noindent$^{\the@inst}$\enspace
 \fi
 \ignorespaces
 \@institute\par
 \endgroup}

\def\@fnsymbol#1{\ensuremath{\ifcase#1\or\star\or{\star\star}\or
   {\star\star\star}\or \dagger\or \ddagger\or
   \mathchar "278\or \mathchar "27B\or \|\or **\or \dagger\dagger
   \or \ddagger\ddagger \else\@ctrerr\fi}}

\def\inst#1{\unskip$^{#1}$}
\def\fnmsep{\unskip$^,$}
\def\email#1{{\tt#1}}
\def\url#1{#1}
\def\homedir{\~{ }}

\def\subtitle#1{\gdef\@subtitle{#1}}
\clearheadinfo

\renewcommand\maketitle{\newpage
  \refstepcounter{chapter}%
  \stepcounter{section}%
  \setcounter{section}{0}%
  \setcounter{subsection}{0}%
  \setcounter{figure}{0}
  \setcounter{table}{0}
  \setcounter{equation}{0}
  \setcounter{footnote}{0}%
  \begingroup
    \parindent=\z@
    \renewcommand\thefootnote{\@fnsymbol\c@footnote}%
    \if@twocolumn
      \ifnum \col@number=\@ne
        \@maketitle
      \else
        \twocolumn[\@maketitle]%
      \fi
    \else
      \newpage
      \global\@topnum\z@   % Prevents figures from going at top of page.
      \@maketitle
    \fi
    \thispagestyle{empty}\@thanks
%
    \def\\{\unskip\ \ignorespaces}\def\inst##1{\unskip{}}%
    \def\thanks##1{\unskip{}}\def\fnmsep{\unskip}%
    \instindent=\hsize
    \advance\instindent by-\headlineindent
    \if!\the\toctitle!\addcontentsline{toc}{title}{\@title}\else
       \addcontentsline{toc}{title}{\the\toctitle}\fi
    \if@runhead
       \if!\the\titlerunning!\else
         \edef\@title{\the\titlerunning}%
       \fi
       \global\setbox\titrun=\hbox{\small\rm\unboldmath\ignorespaces\@title}%
       \ifdim\wd\titrun>\instindent
          \typeout{Title too long for running head. Please supply}%
          \typeout{a shorter form with \string\titlerunning\space prior to
                   \string\maketitle}%
          \global\setbox\titrun=\hbox{\small\rm
          Title Suppressed Due to Excessive Length}%
       \fi
       \xdef\@title{\copy\titrun}%
    \fi
%
    \if!\the\tocauthor!\relax
      {\def\and{\noexpand\protect\noexpand\and}%
      \protected@xdef\toc@uthor{\@author}}%
    \else
      \def\\{\noexpand\protect\noexpand\newline}%
      \protected@xdef\scratch{\the\tocauthor}%
      \protected@xdef\toc@uthor{\scratch}%
    \fi
    \addtocontents{toc}{{\protect\raggedright\protect\leftskip15\p@
    \protect\rightskip\@tocrmarg
    \protect\itshape\toc@uthor\protect\endgraf}}%
    \if@runhead
       \if!\the\authorrunning!
         \value{@inst}=\value{@auth}%
         \setcounter{@auth}{1}%
       \else
         \edef\@author{\the\authorrunning}%
       \fi
       \global\setbox\authrun=\hbox{\small\unboldmath\@author\unskip}%
       \ifdim\wd\authrun>\instindent
          \typeout{Names of authors too long for running head. Please supply}%
          \typeout{a shorter form with \string\authorrunning\space prior to
                   \string\maketitle}%
          \global\setbox\authrun=\hbox{\small\rm
          Authors Suppressed Due to Excessive Length}%
       \fi
       \xdef\@author{\copy\authrun}%
       \markboth{\@author}{\@title}%
     \fi
  \endgroup
  \setcounter{footnote}{0}%
  \clearheadinfo}
%
\def\@maketitle{\newpage
 \markboth{}{}%
 \def\lastand{\ifnum\value{@inst}=2\relax
                 \unskip{} \andname\
              \else
                 \unskip \lastandname\
              \fi}%
 \def\and{\stepcounter{@auth}\relax
          \ifnum\value{@auth}=\value{@inst}%
             \lastand
          \else
             \unskip,
          \fi}%
 \begin{center}%
 {\Large \bfseries\boldmath
  \pretolerance=10000
  \@title \par}\vskip .8cm
\if!\@subtitle!\else {\large \bfseries\boldmath
  \vskip -.65cm
  \pretolerance=10000
  \@subtitle \par}\vskip .8cm\fi
 \setbox0=\vbox{\setcounter{@auth}{1}\def\and{\stepcounter{@auth}}%
 \def\thanks##1{}\@author}%
 \global\value{@inst}=\value{@auth}%
 \global\value{auco}=\value{@auth}%
 \setcounter{@auth}{1}%
{\lineskip .5em
\noindent\ignorespaces
\@author\vskip.35cm}
 {\small\institutename}
 \end{center}%
 }

% definition of the "\spnewtheorem" command.
%
% Usage:
%
%     \spnewtheorem{env_nam}{caption}[within]{cap_font}{body_font}
% or  \spnewtheorem{env_nam}[numbered_like]{caption}{cap_font}{body_font}
% or  \spnewtheorem*{env_nam}{caption}{cap_font}{body_font}
%
% New is "cap_font" and "body_font". It stands for
% fontdefinition of the caption and the text itself.
%
% "\spnewtheorem*" gives a theorem without number.
%
% A defined spnewthoerem environment is used as described
% by Lamport.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\def\@thmcountersep{}
\def\@thmcounterend{.}

\def\spnewtheorem{\@ifstar{\@sthm}{\@Sthm}}

% definition of \spnewtheorem with number

\def\@spnthm#1#2{%
  \@ifnextchar[{\@spxnthm{#1}{#2}}{\@spynthm{#1}{#2}}}
\def\@Sthm#1{\@ifnextchar[{\@spothm{#1}}{\@spnthm{#1}}}

\def\@spxnthm#1#2[#3]#4#5{\expandafter\@ifdefinable\csname #1\endcsname
   {\@definecounter{#1}\@addtoreset{#1}{#3}%
   \expandafter\xdef\csname the#1\endcsname{\expandafter\noexpand
     \csname the#3\endcsname \noexpand\@thmcountersep \@thmcounter{#1}}%
   \expandafter\xdef\csname #1name\endcsname{#2}%
   \global\@namedef{#1}{\@spthm{#1}{\csname #1name\endcsname}{#4}{#5}}%
                              \global\@namedef{end#1}{\@endtheorem}}}

\def\@spynthm#1#2#3#4{\expandafter\@ifdefinable\csname #1\endcsname
   {\@definecounter{#1}%
   \expandafter\xdef\csname the#1\endcsname{\@thmcounter{#1}}%
   \expandafter\xdef\csname #1name\endcsname{#2}%
   \global\@namedef{#1}{\@spthm{#1}{\csname #1name\endcsname}{#3}{#4}}%
                               \global\@namedef{end#1}{\@endtheorem}}}

\def\@spothm#1[#2]#3#4#5{%
  \@ifundefined{c@#2}{\@latexerr{No theorem environment `#2' defined}\@eha}%
  {\expandafter\@ifdefinable\csname #1\endcsname
  {\global\@namedef{the#1}{\@nameuse{the#2}}%
  \expandafter\xdef\csname #1name\endcsname{#3}%
  \global\@namedef{#1}{\@spthm{#2}{\csname #1name\endcsname}{#4}{#5}}%
  \global\@namedef{end#1}{\@endtheorem}}}}

\def\@spthm#1#2#3#4{\topsep 7\p@ \@plus2\p@ \@minus4\p@
\refstepcounter{#1}%
\@ifnextchar[{\@spythm{#1}{#2}{#3}{#4}}{\@spxthm{#1}{#2}{#3}{#4}}}

\def\@spxthm#1#2#3#4{\@spbegintheorem{#2}{\csname the#1\endcsname}{#3}{#4}%
                    \ignorespaces}

\def\@spythm#1#2#3#4[#5]{\@spopargbegintheorem{#2}{\csname
       the#1\endcsname}{#5}{#3}{#4}\ignorespaces}

\def\@spbegintheorem#1#2#3#4{\trivlist
                 \item[\hskip\labelsep{#3#1\ #2\@thmcounterend}]#4}

\def\@spopargbegintheorem#1#2#3#4#5{\trivlist
      \item[\hskip\labelsep{#4#1\ #2}]{#4(#3)\@thmcounterend\ }#5}

% definition of \spnewtheorem* without number

\def\@sthm#1#2{\@Ynthm{#1}{#2}}

\def\@Ynthm#1#2#3#4{\expandafter\@ifdefinable\csname #1\endcsname
   {\global\@namedef{#1}{\@Thm{\csname #1name\endcsname}{#3}{#4}}%
    \expandafter\xdef\csname #1name\endcsname{#2}%
    \global\@namedef{end#1}{\@endtheorem}}}

\def\@Thm#1#2#3{\topsep 7\p@ \@plus2\p@ \@minus4\p@
\@ifnextchar[{\@Ythm{#1}{#2}{#3}}{\@Xthm{#1}{#2}{#3}}}

\def\@Xthm#1#2#3{\@Begintheorem{#1}{#2}{#3}\ignorespaces}

\def\@Ythm#1#2#3[#4]{\@Opargbegintheorem{#1}
       {#4}{#2}{#3}\ignorespaces}

\def\@Begintheorem#1#2#3{#3\trivlist
                           \item[\hskip\labelsep{#2#1\@thmcounterend}]}

\def\@Opargbegintheorem#1#2#3#4{#4\trivlist
      \item[\hskip\labelsep{#3#1}]{#3(#2)\@thmcounterend\ }}

\if@envcntsect
   \def\@thmcountersep{.}
   \spnewtheorem{theorem}{Theorem}[section]{\bfseries}{\itshape}
\else
   \spnewtheorem{theorem}{Theorem}{\bfseries}{\itshape}
   \if@envcntreset
      \@addtoreset{theorem}{section}
   \else
      \@addtoreset{theorem}{chapter}
   \fi
\fi

%definition of divers theorem environments
\spnewtheorem*{claim}{Claim}{\itshape}{\rmfamily}
\spnewtheorem*{proof}{Proof}{\itshape}{\rmfamily}
\if@envcntsame % alle Umgebungen wie Theorem.
   \def\spn@wtheorem#1#2#3#4{\@spothm{#1}[theorem]{#2}{#3}{#4}}
\else % alle Umgebungen mit eigenem Zaehler
   \if@envcntsect % mit section numeriert
      \def\spn@wtheorem#1#2#3#4{\@spxnthm{#1}{#2}[section]{#3}{#4}}
   \else % nicht mit section numeriert
      \if@envcntreset
         \def\spn@wtheorem#1#2#3#4{\@spynthm{#1}{#2}{#3}{#4}
                                   \@addtoreset{#1}{section}}
      \else
         \def\spn@wtheorem#1#2#3#4{\@spynthm{#1}{#2}{#3}{#4}
                                   \@addtoreset{#1}{chapter}}%
      \fi
   \fi
\fi
\spn@wtheorem{case}{Case}{\itshape}{\rmfamily}
\spn@wtheorem{conjecture}{Conjecture}{\itshape}{\rmfamily}
\spn@wtheorem{corollary}{Corollary}{\bfseries}{\itshape}
\spn@wtheorem{definition}{Definition}{\bfseries}{\itshape}
\spn@wtheorem{example}{Example}{\itshape}{\rmfamily}
\spn@wtheorem{exercise}{Exercise}{\itshape}{\rmfamily}
\spn@wtheorem{lemma}{Lemma}{\bfseries}{\itshape}
\spn@wtheorem{note}{Note}{\itshape}{\rmfamily}
\spn@wtheorem{problem}{Problem}{\itshape}{\rmfamily}
\spn@wtheorem{property}{Property}{\itshape}{\rmfamily}
\spn@wtheorem{proposition}{Proposition}{\bfseries}{\itshape}
\spn@wtheorem{question}{Question}{\itshape}{\rmfamily}
\spn@wtheorem{solution}{Solution}{\itshape}{\rmfamily}
\spn@wtheorem{remark}{Remark}{\itshape}{\rmfamily}

\def\@takefromreset#1#2{%
    \def\@tempa{#1}%
    \let\@tempd\@elt
    \def\@elt##1{%
        \def\@tempb{##1}%
        \ifx\@tempa\@tempb\else
            \@addtoreset{##1}{#2}%
        \fi}%
    \expandafter\expandafter\let\expandafter\@tempc\csname cl@#2\endcsname
    \expandafter\def\csname cl@#2\endcsname{}%
    \@tempc
    \let\@elt\@tempd}

\def\theopargself{\def\@spopargbegintheorem##1##2##3##4##5{\trivlist
      \item[\hskip\labelsep{##4##1\ ##2}]{##4##3\@thmcounterend\ }##5}
                  \def\@Opargbegintheorem##1##2##3##4{##4\trivlist
      \item[\hskip\labelsep{##3##1}]{##3##2\@thmcounterend\ }}
      }

\renewenvironment{abstract}{%
      \list{}{\advance\topsep by0.35cm\relax\small
      \leftmargin=1cm
      \labelwidth=\z@
      \listparindent=\z@
      \itemindent\listparindent
      \rightmargin\leftmargin}\item[\hskip\labelsep
                                    \bfseries\abstractname]}
    {\endlist}
\renewcommand{\abstractname}{Abstract.}
\renewcommand{\contentsname}{Table of Contents}
\renewcommand{\figurename}{Fig.\thinspace}
\renewcommand{\tablename}{Table~}

\newdimen\headlineindent             % dimension for space between
\headlineindent=1.166cm              % number and text of headings.

\def\ps@headings{\let\@mkboth\@gobbletwo
   \let\@oddfoot\@empty\let\@evenfoot\@empty
   \def\@evenhead{\normalfont\small\rlap{\thepage}\hspace{\headlineindent}%
                  \leftmark\hfil}
   \def\@oddhead{\normalfont\small\hfil\rightmark\hspace{\headlineindent}%
                 \llap{\thepage}}
   \def\chaptermark##1{}%
   \def\sectionmark##1{}%
   \def\subsectionmark##1{}}

\def\ps@titlepage{\let\@mkboth\@gobbletwo
   \let\@oddfoot\@empty\let\@evenfoot\@empty
   \def\@evenhead{\normalfont\small\rlap{\thepage}\hspace{\headlineindent}%
                  \hfil}
   \def\@oddhead{\normalfont\small\hfil\hspace{\headlineindent}%
                 \llap{\thepage}}
   \def\chaptermark##1{}%
   \def\sectionmark##1{}%
   \def\subsectionmark##1{}}

\if@runhead\ps@headings\else
\ps@empty\fi

\setlength\arraycolsep{1.4\p@}
\setlength\tabcolsep{1.4\p@}

\endinput

--Corps_of_Giraffes_538_000
Content-Type: TEXT/plain; name="journal_1.tex"; charset=us-ascii; x-unix-mode=0644
Content-Description: journal_1.tex
Content-MD5: 0VMP4EtIM1sBJChhurWZIQ==



\documentclass[a4paper,eepic,11pt]{article}

\textwidth16cm
\oddsidemargin0cm
\evensidemargin0cm
\usepackage{graphicx}
\usepackage{amsmath}


\newtheorem{theorem}{Theorem}
\newtheorem{acknowledgement}[theorem]{Acknowledgement}
\newtheorem{algorithm}[theorem]{Algorithm}
\newtheorem{axiom}[theorem]{Axiom}
\newtheorem{case}[theorem]{Case}
\newtheorem{claim}[theorem]{Claim}
\newtheorem{conclusion}[theorem]{Conclusion}
\newtheorem{condition}[theorem]{Condition}
\newtheorem{conjecture}[theorem]{Conjecture}
\newtheorem{corollary}[theorem]{Corollary}
\newtheorem{criterion}[theorem]{Criterion}
\newtheorem{definition}[theorem]{Definition}
\newtheorem{example}[theorem]{Example}
\newtheorem{exercise}[theorem]{Exercise}
\newtheorem{lemma}{Lemma}
\newtheorem{notation}[theorem]{Notation}
\newtheorem{problem}[theorem]{Problem}
\newtheorem{proposition}[theorem]{Proposition}
\newtheorem{remark}{Remark}
\newtheorem{solution}[theorem]{Solution}
\newtheorem{summary}[theorem]{Summary}
\newenvironment{proof}[1][Proof]{\textbf{#1.} }{\ \rule{0.5em}{0.5em}}

\begin{document}

\title{Approximation Algorithms for Flexible Job Shop Problems}
\author{Klaus Jansen$^{1}$, Monaldo Mastrolilli$^{1}$ and Roberto
Solis-Oba$^{2}$ \\
%EndAName
$^{1}${\small IDSIA, Corso Elvezia 36 6900 Lugano, Switzerland,} \\
{\small klaus,monaldo@idsia.ch}\\
$^{2}$ {\small MPII, Im Stadtwald 66123 Saarbr\"{u}cken, Germany,}\\
{\small solis@mpi-sb.mpg.de}}
\maketitle

\begin{abstract}
The Flexible Job Shop Problem (FJSP) is an extension of the classical job
shop scheduling problem which allows an operation to be processed by any
machine from a given set. The problem is to assign each operation to a
machine and to order the operations on the machines, such that the maximum
delivery completion time of any job is minimized.

We study the preemptive and non-preemptive versions of the FJSP when the
number of machines and the number of operations per job are fixed. We
present linear time approximation schemes for both problems.
\end{abstract}

\section{Introduction}

In the job shop scheduling problem (JSP), there is a set $\mathcal{J}%
=\{J_{1},\ldots ,J_{n}\}$ of $n$ jobs, a set $M=\{1,\ldots ,m\}$ of $m$
machines, and a set $\mathcal{O}=\left\{ O_{ij}|i=1,...,\mu
,j=1,...,n\right\} $ of $\mu n$ operations. Each job $J_{j}$ consists of a
sequence of $\mu $ operations $O_{1j},O_{2j},\ldots ,O_{\mu j}$, where $%
O_{ij}$ must be processed without interruption on machine $m_{ij}\in
\{1,\ldots ,m\}$ during $p_{ij}$ time units. The operations $%
O_{1j},O_{2j},\ldots ,O_{\mu j}$ must be processed one after another in the
given order and each machine can process at most one operation at a time.

In this paper we study a generalization of the JSP called the flexible job
shop problem \cite{BR}, which models a wide range of problems encountered in
real manufacturing systems. FJSP extends JSP by allowing an operation $%
O_{ij} $ to be processed by any machine from a given set $M_{ij}\subseteq M$%
. The processing time for operation $O_{ij}$ on machine $k\in M_{ij}$ is $%
p_{ij}^{k}$. In addition, each job $J_{j}$ has a \textit{delivery time } $%
q_{j}$. If in a schedule $J_{j}$ completes its processing at time $C_{j}$,
then its \textit{delivery completion time} is equal to $C_{j}+q_{j}$. The
goal is to choose for each operation $O_{ij}$ an eligible machine and a
starting time $s_{ij}$ when it must be performed so that the maximum
delivery completion time of any job is minimized.

FJSP is therefore more complex than JSP because of the need to determine the
assignment of operations to machines other than the traditional sequencing
decisions. The FJSP is NP-hard since it is an extension of the job shop
scheduling problem \cite{GJS}.

The problem as stated is equivalent to that with due dates $d_{j}$ rather
than delivery times, in which case the objective is to minimize the maximum
lateness, $L_{j}=C_{j}-d_{j}$, of any job $J_{j}$. When considering the
performance of approximation algorithms, the delivery-time model is
preferable \cite{KIM}. Because of this equivalence, we shall use $L_{j}$ to
represent $C_{j}+q_{j}$ and $L_{\max }$ to denote the maximum delivery
completion time.

An important special case of our problem is when the delivery time of each
job is equal to $0$. In that case the objective is to minimize the maximum
completion time $C_{\max }$ (\emph{makespan}), i.e., $C_{\max
}=\max_{j}C_{j} $. The following complexity results deal with makespan
minimization. The job shop problem is strongly NP-hard even if each job has
at most three operations and there are only two machines \cite{LLRS}.
Williamson et al. \cite{WHHHLSS} proved that when the number of machines,
jobs, and operations per job are part of the input there does not exist a
polynomial time approximation algorithm with worst case bound smaller than ${%
\frac{5}{4}}$ unless $P=NP$. On the other hand the preemptive version of the
job shop scheduling problem is NP-complete in the strong sense even when $%
m=3 $ and $\mu =3$ \cite{GS2}.

Following the three-field $\alpha |\beta |\gamma $ notation suggested by
Vaessens \cite{Va} and based on the one given by Graham et al. \cite{GLLR},
we denote our problem by $m1m|chain,op\leq \mu |L_{\max }$. In the first
field $m$ specifies that the number of machines is a constant, $1$ specifies
that any operation requires at most one machine to be processed, and the
second $m$ denotes the upper bound on the number of alternative machines
that can process an operation. The second field specifies the precedence
characteristic and the maximum number of operations per job. The third field
specifies the characteristics of the objective. The following special cases
of our problem are already NP-hard (see \cite{Va} for a survey): $2$ $1$ $%
2|chain,n=3|C_{\max }$, $3$ $1$ $2|chain,n=2|C_{\max }$, $2$ $1$ $%
2|chain,op\leq 2|C_{\max }$.

The NP-hardness of an optimization problem suggests that it is not always
possible to find an optimal solution in polynomial time, unless $P=NP$.
Therefore, our aim is to design an efficient algorithm to generate
approximate solutions that are provably close to the optimum. For an input $%
I $ of one of the above shop problems, let $OPT(I)$ be the length of an
optimum solution, and let $\mathcal{A}(I)$ denote the length of the schedule
obtained by some algorithm $\mathcal{A}$. A polynomial-time approximation
scheme (PTAS) for the problem is an algorithm $\mathcal{A}$ that, for any
(constant) $\epsilon >0$ and input $I$, outputs in time polynomial in the
length of $I$ a feasible schedule with performance guarantee ${\frac{%
\mathcal{A}(I)}{OPT(I)}}\leq 1+\epsilon $. We can view such an algorithm $%
\mathcal{A}$ as a family of algorithms $\{\mathcal{A}_{\epsilon }|\epsilon
>0\}$ such that $\mathcal{A}_{\epsilon }(I)\leq (1+\epsilon )OPT(I)$. A lot
of research has been done on the job shop scheduling problem. For the case
of job shops when $m$ and $\mu $ are fixed, Jansen, Solis-Oba and Sviridenko 
\cite{JSS2} have designed a linear time approximation scheme for the
makespan minimization problem. When $m$ and $\mu $ are part of the input the
best known result \cite{GPSS} is an approximation algorithm with worst case
bound $O((\log (m\mu )\log (min(m\mu ,p_{max}))/\log \log (m\mu ))^{2})$,
where $p_{max}$ is the largest processing time among all operations. Shmoys,
Stein and Wein \cite{SSW} described a polynomial-time randomized algorithm
for the problem of scheduling jobs on unrelated parallel machines subject to
chain precedence constraints ($R|chain|C_{max}$), that with high
probability, yields a schedule that is of length at most $O((\log ^{2}n/\log
\log n)C_{\max }^{\ast })$, where $C_{\max }^{\ast }$ is the optimal
makespan.

In this paper we study the preemptive and non-preemptive versions of the
flexible job shop scheduling problem when the number of machines $m$ and the
number of operations per job $\mu $ are fixed. We generalize the polynomial
time approximation scheme described in \cite{JSS2} to the flexible job shop
problem and extend it to the preemptive case. We consider two variants of
the preemptive flexible job shop problem: with migration and without
migration. Without migration means that each operation must be processed by
a unique machine. So if an operation is preempted, later it has to be
resumed on the same machine.

In Sections \ref{Sect:PTAS} and \ref{Sect:nomigration} linear time
approximation schemes for the non-preemptive and preemptive flexible job
shop problem without migration are provided, respectively. We observe that
by using the same techniques we can also handle the case in which each job $%
J_{j}$ has a \emph{release time} $r_{j}$ when it becomes available for
processing and the objective is to minimize the makespan, while further
ideas are needed to tackle the problem with release and delivery times and
the objective is to minimize the maximum delivery completion time. For the
preemptive case with migration we present in Section \ref{Sect:migration} a $%
(2+\varepsilon )$-approximation algorithm to handle the problem in which
each job $J_{j}$ has a release time $r_{j}$ and a delivery time $q_{j}$, and
the objective is to minimize the maximum delivery time. In both preemptive
problems the number of preemptions is bounded by a constant. The job shop
scheduling problem with multi-purpose machines (MPM job shop) \cite{BJK} is
a special case of the flexible job shop problem, in which the processing
time of each operation does not depend anymore on the machine on which it is
processed. For the MPM job shop problem, in Section \ref{Sect:mpm} we extend
our techniques to handle the problem in which each job $J_{j}$ has a release
time $r_{j}$ and a delivery time $q_{j}$, and the objective is to minimize
the maximum delivery time.

\section{Preliminaries}

In the remainder of this paper we will use the following remarks. Let $%
P_{j}=\sum_{i=1}^{\mu }[\min_{s\in M_{kj}}p_{ij}^{s}]$ denote the \textit{%
minimum job length}, and $P=\sum_{J_{j}\in \mathcal{J}}P_{j}$. Let $%
t_{j}=r_{j}+P_{j}+q_{j}$ and $t_{\max }=\max_{j}t_{j}$, where $j=1,...,n$.
Then we get directly the following bounds:

\begin{lemma}
\label{Lemma:bound} 
\begin{equation*}
\max \left\{ {\frac{P}{m},}t_{\max }\right\} \leq L_{\max }^{\ast }\leq
P+t_{\max }.
\end{equation*}
\end{lemma}

\begin{proof}
$L_{\max }^{\ast }\geq {\frac{P}{m}}$, since this lower bound represents the
best possible situation in which all machines complete processing at exactly
the same time when each operation is processed on its fastest machine and
the delivery and release times of the jobs are $0$. Obviously, $L_{\max
}^{\ast }\geq t_{\max }$ the maximum delivery completion time is greater
than the maximum delivery time of any job when each operation is processed
on its fastest machine.

Now, we need to prove that $L_{\max }^{\ast }\leq P+q_{\max }$. To show that
we describe a simple algorithm $LS$ that provides a feasible schedule whose
maximum delivery completion time $L_{\max }^{LS}$ is at most $P+q_{\max }$:
schedule every operation of the first available job of any arbitrarily
ordered list of jobs on the fastest machine. A job is defined as
``available'' if it has already been released. Let $J_{k}$ be the job whose
lateness attains that of the schedule, i.e., $L_{\max }^{LS}=C_{k}+q_{k}$,
where $C_{k}$ is the completion time of job $J_{k}$. We have $L_{\max
}^{LS}=s_{k}+P_{k}+q_{k}<(r_{k}+P)+P_{k}+q_{k}\leq P+t_{\max }$.
\end{proof}

By dividing all execution times, release times and delivery times by $\max
\left\{ {\frac{P}{m},}t_{\max }\right\} $, we get the bounds 
\begin{gather*}
{1}\leq L_{\max }^{\ast }\leq {m+1,} \\
t_{\max }\leq 1.
\end{gather*}

We observe that Lemma \ref{Lemma:bound} holds also for the preemptive
problem with or without migration.

\section{Outline of the Algorithm\label{Sect:PTAS}}

In this section we provide a high-level description of the approximation
scheme for the non-preemptive flexible job shop problem with delivery times
(release times are assumed to be zero,i.e., $r_{j}=0$ for $J_{j}\in \mathcal{%
J}$). Each point is investigated in the following sections.

\begin{enumerate}
\item  Reduce the number of different delivery times to a constant.

\item  Consider a restricted flexible job shop instance with a constant
number of jobs and compute all the substantially different relative
schedules. A relative schedule is computed by assigning each operation to a
machine and by defining an order between the starting and finishing times of
all operations.

\item  Add the remaining jobs to each relative schedule by solving a relaxed
instance of the problem. Take the best solution of every relaxed instance.

\item  Transform the solution into a feasible and approximate solution.
\end{enumerate}

\subsection{Reducing the Number of Delivery Times\label{Sect:prep}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

We use a technique by Hall and Shmoys \cite{HS} to reduce the problem to an
instance with only a constant number of delivery times. Let $q_{\max }$
denote the maximum delivery time and $\varepsilon >0$ be a constant value.
The idea is to round each delivery time down to the nearest multiple of $%
\frac{\varepsilon }{2}q_{\max }$ to get at most $1+2/\varepsilon $ distinct
delivery times. Next, apply a $(1+\varepsilon /2)$-approximation algorithm
that can handle $1+2/\varepsilon $ distinct delivery times, and then add $%
\frac{\varepsilon }{2}q_{\max }$ to each job's completion time in the
output. The resulting schedule is feasible for the original instance and it
is easy to see that this is a $(1+\varepsilon )$-approximation algorithm for
the original problem.

Thus in the remainder of this paper, we shall restrict our attention to the
problem for which the delivery times $q_{1},...,q_{n}$ take on $\chi $
distinct values, which we denote $\delta _{1}>...>\delta _{\chi }$, and
partition the jobs into sets $D_{w}=\left\{ J_{j}\in \mathcal{J}%
|q_{j}=\delta _{w}\right\} $, $w=1,...,\chi $.

\subsection{Relative Schedules}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The delivery time of a job can be interpreted as an additional operation of
the job that has to be processed on a non-bottleneck machine. Because of
this interpretation, we can add to the set $\mathcal{O}$ of operations a set 
$\mathcal{D=}\left\{ d_{1},...,d_{\chi }\right\} $ of $\chi $ delivery
operations; the processing time of operation $d_{w}$ is $\delta _{w}$, for $%
w=1,...,\chi $. Each job has to perform a delivery operation on a
non-bottleneck machine at the end.

Assume, w.l.o.g., that $P_{1}\geq P_{2}\geq ...\geq P_{n}$. Let $\mathcal{L}%
\subset \mathcal{J}$ be the set formed by the first $k$ jobs with the
longest minimum job length, where $k$ is a constant that is defined later.
We call $\mathcal{L}$ the set of \emph{long} jobs. Set $\mathcal{S}=\mathcal{%
J}\setminus \mathcal{L}$ is the set of \emph{short} jobs and $\mathcal{O}_{%
\mathcal{L}}$ the set of operations from long jobs. Now, consider a
restricted flexible job shop problem with jobs from $\mathcal{L}$ only, and
compute all of the different relative schedules. A \emph{relative schedule} $%
R$ for $\mathcal{L}$ is constructed by choosing a machine for each operation 
$O_{ij}\in \mathcal{O}_{\mathcal{L}}$ and by determining a partial order for
the starting and finishing times of operations from $\mathcal{O}_{\mathcal{L}%
}\mathcal{\cup D}$.

A relative schedule $R$ is feasible if

\begin{itemize}
\item  every operation of $\mathcal{D}$ finishes at the same time;

\item  delivery operation $d_{w}$ starts before \thinspace $d_{w+1}$, for $%
w=1,...,\chi -1$;

\item  the last operation of each long job does not end after the starting
time of its corresponding delivery operation;

\item  the operations of any long job must be processed one after another in
the given order and each machine can process at most one operation at a time.
\end{itemize}

Two operations $O_{ij}$ and $O_{i^{\prime }j^{\prime }}$, $%
J_{j},J_{j^{\prime }}\in \mathcal{L}$ and $j\not=j^{\prime }$, are
compatible if they are assigned to different machines. Operations from $%
\mathcal{D}$ are always compatible. For any given relative schedule, and by
looking at every time an operation from $\mathcal{D\cup O}_{\mathcal{L}}$
starts or ends, a \emph{snapshot} of $\mathcal{D\cup O}_{\mathcal{L}}$ is
defined as subset of compatible operations which are processed right after
that time. Therefore, a \emph{relative schedule} $R$ is a sequence $%
M(1),\ldots ,M(g)$ of snapshots of $\mathcal{D\cup O}_{\mathcal{L}}$, where $%
M(1)=\emptyset $ and $M(g)=\mathcal{D}$. Let $\alpha _{ij}$ and $\beta _{ij}$
be the first and last snapshots where operation $O_{ij}$ is placed.

We observe that $g$ can be bounded by $2\mu k+\chi $. Notice, that we have
included one further snapshot $M(1)=\emptyset $ without operations of jobs
in $\mathcal{L}$. This corresponds to the case when the schedule for $%
\mathcal{J}$ does not contain any operation $O_{ij}$ of a job $J_{j}\in 
\mathcal{L}$ at the beginning. Since $k$, $m$ and $\mu $ are constant, the
number of relative schedules is also constant.

\subsection{Problem Relaxation\label{Sect:relax}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

For each relative schedule $R=(M(1),\ldots ,M(g))$, in the following we
formulate a linear program $LP(R)$ to find a (in general infeasible)
schedule for the small jobs by solving $LP(R)$. For each job $J_{j}\in 
\mathcal{S}$ we use a set of decision variables $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}\in \lbrack 0,1]$ for tuples $(i_{1},\ldots
,i_{\mu })\in A$ and $(s_{1},\ldots ,s_{\mu })\in B$, where $%
A=\{(i_{1},\ldots ,i_{\mu })|1\leq i_{1}\leq i_{2}\leq \ldots \leq i_{\mu
}\leq g\}$ and $B=\{(s_{1},\ldots ,s_{\mu })|1\leq s_{i}\leq m,i=1,...,\mu
\} $.

The meaning of these variables is that $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}=1$ if and only if each operation $O_{kj}$ of
job $J_{j}$ is scheduled in snapshot $i_{k}$ and on machine $s_{k}$ for each 
$1\leq k\leq \mu $. Note that by the way in which we numbered the
operations, any tuple $(i_{1},\ldots ,i_{\mu })\in A$ represents a valid
ordering for the operations.

For any snapshot $M(\ell )$ let $P(\ell )=\bigcup_{O_{ij}\in M(\ell
),J_{j}\in \mathcal{L}}\,\,\{m_{ij}\}$, be the set of machines that process
operations from long jobs during snapshot $M(\ell )$, where $m_{ij}\in
\{1,...,m\}$ denotes the machine on which operation $O_{ij}$ of job $%
J_{j}\in \mathcal{L}$ is processed according to relative schedule $R$.
Furthermore, let $\alpha _{w}$ denote the snapshot in which delivery
operation $d_{w}$ starts, for $w=1,...,\chi $. Let the load $L_{\ell ,h}$ on
machine $h$ in snapshot $M(\ell )$ be defined as the total processing time
of operations from short jobs that are executed by machine $h$ during
snapshot $\ell $, i.e., 
\begin{equation*}
L_{\ell ,h}=\sum_{J_{j}\in \mathcal{S}}\sum_{{\ \ \ }(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })\in A\times B}\sum_{{\ \ \ \ \ }k=1,\ldots ,\mu
|i_{k}=\ell ,s_{k}=h}\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}p_{kj}^{s_{k}}.
\end{equation*}
\ $\ $Each variable $t_{\ell }$, $1\leq \ell \leq g$, denotes the length of
snapshot $M(\ell )$. Let $p_{ij}$ denote the processing time of operation $%
O_{ij}$ ($1\leq i\leq \mu $, $J_{j}\in \mathcal{L}$) according to the
relative schedule $R$. Let $X_{j}=\left\{ x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}|(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})\in A\times B\right\} $ be the set of decision variables associated with
job $J_{j}$. To avoid that some operation $O_{kj}$ of a short job $J_{j}\in 
\mathcal{S}$ is scheduled on a machine $s_{k}\in P(i_{k})$ when it is
occupied by a long job or on a machine $s_{k}\notin M_{kj}$ that cannot
process it, we set $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=0 $. Furthermore, $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=0$ if the last operation of job $J_{j}$ ends after the starting time of
its corresponding delivery operation, i.e., $i_{\mu }\geq \alpha _{w}$ when $%
J_{j}\in D_{w}$, $w=1,...,\chi $. We call $Z_{j}$ the subset of $X_{j}$ that
is set to zero.

The linear program $LP(R)$ for a given relative schedule $R$ is the
following.

\begin{description}
\item[Minimize $~\sum_{\ell=1}^g t_\ell~$]  

\item[~~~s.t.~~~(1)~]  $t_{\ell }\geq 0$, {\small \ \ \ \ \ \ \ \ \ \ \ \ \
\ \ \ \ }$1\leq \ell \leq g$

\item[~~~~~~~~~~(2)~]  $\sum_{\ell =\alpha _{ij}}^{\beta _{ij}}t_{\ell
}=p_{ij}$, ~~ $J_{j}\in \mathcal{L}${\small , }$1\leq i\leq \mu ${\small ,}

\item[~~~~~~~~~~(3)~]  $\sum_{\ell =\alpha _{w}}^{g}t_{\ell }=\delta _{w}$
~~ {\small \ }$w=1,...,\chi ${\small ,}

\item[~~~~~~~~~~(4)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}\geq 0$, \ \ ~~ {\small \ }$J_{j}\in \mathcal{S}${\small , }$%
(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })\in A\times B${\small ,}

\item[~~~~~~~~~~(5)~]  $\sum_{(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})\in A\times B}\,\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=1 $, \ \ \ \ \ \ \ \ \ \ \ \ \ ~~ {\small \ }$J_{j}\in \mathcal{S}$%
{\small ,}

\item[~~~~~~~~~~(6)~]  $L_{\ell ,h}\leq t_{\ell }$, ~~ {\small \ \ \ \ \ \ \
\ \ \ \ }$1\leq \ell \leq g${\small , }$1\leq h\leq m${\small \ and }$%
h\not\in P(\ell )${\small ,}

\item[~~~~~~~~~~(7)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=0${\small , \ \ \ ~~\ if }$x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })}\in Z_{j}${\small .}
\end{description}

Note that if a variable $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}$ has value one, then job $j\in \mathcal{S}$ has a unique snapshot
assignment.

Consider an optimum schedule $S^{\ast }$ for $\mathcal{J}$ that respects the
relative schedule $R$. Now, we prove that an optimum solution of $LP(R)$ has
value no larger than the maximum delivery completion time of $S^{\ast }$,
but before we need the following lemma.

\begin{lemma}
\label{Lemma:assign}For any given feasible schedule $S$ and for any job $%
J_{j}\in \mathcal{J}$, there is always an assignment of variables from $%
X_{j}=\left\{ x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}|(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })\in A\times B\right\} $
such that the same fraction of every operation of $J_{j}$ is assigned in the
same snapshot and machine as $S$.
\end{lemma}

\begin{proof}
We assign values to the variables from $X_{j}$ as follows.

\bigskip

\textit{Assignment Procedure}

\begin{enumerate}
\item  For each operation $O_{kj}$ of job $J_{j}$, for $1\leq \ell \leq g$
and $1\leq h\leq m$, initialize $f_{kj}(\ell ,h)$ to be the fraction of
operation $O_{kj}$ that is scheduled in snapshot $M(\ell )$ and on machine $%
h $ according to $S$.

\item  For each $(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })\in
A\times B$

\item  \qquad Set $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}:=f $, where $f:=\mathrm{min}\{f_{kj}(i_{k},s_{k})\mid 1\leq k\leq \mu \}$

\item  \qquad Set $f_{kj}(i_{k},s_{k}):=f_{kj}(i_{k},s_{k})-f\ $\ for $1\leq
k\leq \mu $.
\end{enumerate}

First, note that for any given feasible solution it is $\sum_{\ell
=1}^{g}\sum_{h=1}^{m}f_{kj}(\ell ,h)=1$, for each $J_{j}\in \mathcal{J}$ and 
$1\leq k\leq \mu $. Each time loop (2), (3) and (4) is completed, the same
fraction $f\geq 0$ of every operation of job $J_{j}$ is assigned as $S$;
furthermore for at least one operation $O_{kj}$ the new value of $%
f_{kj}(i_{k},s_{k})$ is set to zero. Hence, for every operation the fraction 
$f$ of step (3) is assigned at most once, since it is subtracted from $%
f_{kj}(i_{k},s_{k})$ that represents the part that is not yet assigned
during the procedure. It follows that $\sum_{(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })\in A\times B}\,\,x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}\leq 1$, and for each snapshot, machine and
operation $O_{ij}$ no more than the corresponding fraction of $O_{ij}$ as $S$
is assigned. Clearly we have $\mathrm{min}\{f_{kj}(i_{k},s_{k})\mid 1\leq
k\leq \mu \}=0$ at the end of step 4, and $\mathrm{min}\{f_{kj}(i_{k},s_{k})%
\mid 1\leq k\leq \mu \}=0$ for each $(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })\in A\times B$, in the end of the assignment procedure. Suppose,
ab absurdo, that at the end of the assignment procedure there is a fraction $%
\hat{f}>0$ of an operation of job $J_{j}$ that is not assigned to any
snapshot and machine, i.e., $\sum_{(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })\in A\times B}\,\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })}<1$. By construction, it follows that the same fraction $\hat{f}$
of every operation of job $J_{j}$ is not assigned by the procedure and
therefore there is at least a $(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })\in A\times B$ for which $\mathrm{min}\{f_{kj}(i_{k},s_{k})\mid
1\leq k\leq \mu \}>0$, which is a contradiction. Therefore, the sum of the
assigned fraction for each operation is 1 and the same fraction of every
operation of $J_{j}$ is assigned in the same snapshot and machine as $S$,
since for each snapshot, machine and operation $O_{ij}$ no more than the
corresponding fraction of $O_{ij}$ as $S$ is assigned.
\end{proof}

\begin{lemma}
An optimum solution of $LP(R)$ has value no larger than the length of an
optimum schedule for $\mathcal{J}$ that respects the relative schedule $R$.
\end{lemma}

\begin{proof}
Consider an optimum schedule $S^{\ast }$ for $\mathcal{J}$ that respects the
relative schedule $R$. We only need to show that for any job $J_{j}\in 
\mathcal{S}$ there is a feasible solution of $LP(R)$ that schedules all
operations of $J_{j}$ in the same positions as $S^{\ast }$. The latter
follows from Lemma \ref{Lemma:assign}.
\end{proof}

\begin{remark}
One can solve the linear program $LP(R)$ optimally in polynomial time and
get only a constant number of jobs with non-unique snapshot assignment.
Indeed (see also paper by Potts \cite{Potts} and Hall \cite{Hall}), a basic
optimal solution to $LP(R)$ has the property that the number of positive
variables is at most the number of rows in the constraint matrix. From
constraints (2) and (3) there are at most $\chi +k\mu $ rows, from (5) $n-k$
rows and from (6) at most $mg-k\mu $ rows (since $\sum_{l=1}^{g}\left|
P(\ell )\right| \geq k\mu $). Assuming, w.l.o.g., that $p_{ij}>0$ for $1\leq
i\leq \mu $ and $J_{j}\in \mathcal{L}$, there are at least $\chi $ snapshots
for which $t_{\ell }>0$; moreover, every job $J_{j}\in \mathcal{S}$ has at
least one positive variable associated with it. By simple counting we
conclude that there are at most $mg$ jobs with non-unique snapshot
assignment. However for our problem we do not need to solve exactly the
linear program, an approximate solution suffices. We show below how to get
this approximate solution in linear time.
\end{remark}

In order to reduce the time complexity of the algorithm our linear program
can be rewritten so that the Logarithmic Potential Price Directive
Decomposition Method developed by Grigoriadis and Khachiyan \cite{GK} can be
used to find an approximate solution in linear time.

\subsubsection{Approximate Solution of the Linear Program}

We guess the value $s$ of an optimum schedule that respects the relative
schedule $R$ and add the constraint $\sum_{\ell =1}^{g}t_{\ell }\,\,\leq s$
to $LP(R)$. We are interested only in relative schedule for which $s\leq m+1$%
, since a solution of length $m+1$ can be always obtained by scheduling jobs
one after the other. Then we replace constraint $(6)$ by constraint $%
(6^{\prime })$, where $\lambda $ is a non-negative value:

\begin{description}
\item[~~~~~~~~~(6')~~~]  $L_{\ell ,h}-t_{\ell }+m+1\leq \lambda $, ~~ for $%
h\not\in P(\ell )$.
\end{description}

This new linear program will be denoted as $LP(R,s,\lambda )$. The linear
program $LP(R,s,\lambda )$ has a special \emph{block angular} structure (for
a survey see \cite{GK,PST}). The blocks $B_{j}=\{x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}\mid $ conditions (4), (5), and (7) are
satisfied $\}$ for $J_{j}\in \mathcal{S}$ are $(mg)^{\mu }$-dimensional 
\emph{simplicies}, while the block $B_{|\mathcal{S}|+1}=\{t_{\ell }\mid
\sum_{\ell =1}^{g}t_{\ell }\leq s\mathrm{\ }$and\ conditions\ (1), (2) and
(3)\ are\ satisfied$\}$ contains only a constant number of variables and
constraints. Linear inequalities $(6^{\prime })$ form a set of so called 
\emph{coupling constraints}. Let $f_{\ell ,h}=L_{\ell ,h}-t_{\ell }+m+1$.
Since $t_{\ell }\leq s\leq m+1$, these functions are non-negative.

The Logarithmic Potential Price Directive Decomposition Method~\cite{GK}
developed by Grigoriadis and Khachiyan for a large class of problems with
block angular structure provides a $\rho ^{\prime }$-relaxed decision
procedure for $LP(R,s,m+1)$. This procedure either determines that $%
LP(R,s,m+1)$ is infeasible, or computes (a solution that is nearly feasible
in the sense that it is) a feasible solution where the right hand sides of $%
(6^{\prime })$ are approximated with $\rho ^{\prime }(m+1)$. This gives
(using $\rho =\rho ^{\prime }(m+1)$) a feasible solution of $%
LP(R,s,(m+1+\rho ))$. The overall running time of the procedure for $%
LP(R,s,m+1)$ is $O(n)$.

Let $L_{R}^{\ast }$ be the maximum delivery completion time of an optimum
schedule that respects the relative schedule $R$.

\begin{lemma}
The following assertions are true:

\begin{description}
\item[(0)]  $LP(R,m+1,m+1)$ is feasible for at least one relative schedule $%
R $,

\item[(1)]  if $LP(R,s,m+1)$ is infeasible, then there exists no schedule
(that respects the relative schedule $R$ for the long jobs in $\mathcal{L}$)
with value at most $s$,

\item[(2)]  if $LP(R,s,m+1)$ is feasible and $s\leq s^{\prime }$, then $%
LP(R,s^{\prime },m+1)$ is feasible,

\item[(3)]  $LP(R,L_{R}^{\ast },m+1)$ is feasible for each relative schedule 
$R$.
\end{description}
\end{lemma}

Let $R$ be a relative schedule for $\mathcal{L}$ in an optimum schedule.
This Lemma implies that we can use binary search on the interval $[{1},1+m]$
to find a value $s\leq (1+{\frac{\epsilon }{8}})L_{\max }^{\ast }$ such that 
$LP(R,s,(m+1+\rho ))$ is feasible for $\rho =\frac{\epsilon }{8g}$. This
search can be performed in $O(\log (\frac{1}{\varepsilon }\log m))$
iterations. A solution value $s$ that is less or equal to $(1+{\frac{%
\epsilon }{8}})L_{\max }^{\ast }$ can be found by applying a binary search
only on the following values, 
\begin{equation}
(1+\frac{\varepsilon }{8}),(1+\frac{\varepsilon }{8})^{2},...,(1+\frac{%
\varepsilon }{8})^{b-1},m+1
\end{equation}
where $b$ is bounded by the smallest integer such that $(1+\varepsilon
/8)^{b}\geq m+1$. Thus, $b\leq \ln (m+1)/\ln (1+\varepsilon
/8)+1=O(1/\varepsilon \log m)$, since $\ln (1+\varepsilon /8)\geq \frac{%
\varepsilon /8}{1+\varepsilon /8}$ (see \cite{COLERI} page 35). Indeed,
notice that there exists a nonnegative integer $i\leq b$ such that $L_{\max
}^{\ast }\in \lbrack (1+\frac{\varepsilon }{8})^{i},(1+\frac{\varepsilon }{8}%
)^{i+1}]$ and therefore we find a value $\bar{s}$ such that $(1+\frac{%
\varepsilon }{8})^{i}$ is not feasible and $(1+\frac{\varepsilon }{8})^{i+1}$
is feasible. This implies that $\bar{s}\leq (1+{\frac{\epsilon }{8}})L_{\max
}^{\ast }.$ For this value $\bar{s}$ a solution to $LP(R,\bar{s},m+1+\rho )$
has value $\sum_{\ell =1}^{g}t_{\ell }\leq (1+{\frac{\epsilon }{8}}%
)L_{R}^{\ast }$, and machine loads $L_{\ell ,h}\leq t_{\ell }+\rho $. Since $%
\rho ={\frac{\epsilon }{8g}}$ we obtain a fractional solution of value $%
\sum_{\ell =1}^{g}(t_{\ell }+\rho )\leq (1+{\frac{\epsilon }{4}})L_{R}^{\ast
}$.

\begin{lemma}
\label{L1} A solution for $LP(R,s,m+1+\rho )$, with $s\leq (1+\frac{\epsilon 
}{8})L_{R}^{\ast }$ and $\rho ={\frac{\epsilon }{8g}}$, of value at most $(1+%
\frac{\epsilon }{4})L_{R}^{\ast }$ can be found in linear time.
\end{lemma}

As in \cite{JSS2}, in the following section we modify any feasible solution
for $LP(R,s,m+1+\rho )$ to get a new feasible solution in which all but a
constant number of variables $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })}$ have value $0$ or $1$. Moreover we can do this rounding step in
linear time.

\subsubsection{Rounding Step\label{Sect:rounding}}

In this section we show how we can modify any feasible solution for $%
LP(R,s,m+1+\rho )$ to get a new feasible solution in which all but a
constant number of variables $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })}$ have value $0$ or $1$. Moreover we can do this rounding step in
linear time. Let $n^{\prime }=|\mathcal{S}|$.

Let us write the linear program $LP(R,s,m+1+\rho )$ in matrix form as $Bx=b$%
, $x\geq 0$. We arrange the columns of $B$ so that the last $g$ columns
contain the coefficients for variables $t_{\ell }$ and the first $n^{\prime
}(mg)^{\mu }$ columns have the coefficients for variables $%
x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })}$. The key
observation that allows us to perform the rounding in linear time is to note
that matrix $B$ is sparse. In particular, each one of the first $n^{\prime
}(mg)^{\mu }$ columns has at most $\mu +1$ non-zero entries (1 in constraint
(5) and at most $\mu $ in constraints (6')), and it is not difficult to show
that there exists a constant size subset $B^{\prime }$ of these columns in
which the number of non-zero rows is smaller than the number of columns. The
non-zero entries of $B^{\prime }$ induce a singular matrix of constant size,
so we can find a non-zero vector $y$ in the null space of this matrix, i.e., 
$B^{\prime }y=0$.

Let $\delta >0$ be the smallest value such that some component of the vector 
$x+\delta y$ is either zero or one (if the dimension of $y$ is smaller than
the dimension of $x$ we augment it by adding an appropriate number of zero
entries). Note that the vector $x+\delta y$ is a feasible solution of $%
LP(R,s,m+1+\rho )$. Let $x^{0}$and $x^{1}$ be respectively the zero and one
components of vector $x+\delta y$. We update the linear program by making $%
x=x+\delta y$ and then removing from $x$ all variables in $x^{0}$ and $x^{1}$
and all columns of $B$ corresponding to such variables. If $%
x^{1}\not=\emptyset $ then vector $b$ is set to $b-\sum_{i\in x^{1}}B[\ast
,i]$, where $B[\ast ,i]$ is the column of $B$ corresponding to variable $i$.

This process rounds the value of at least one variable $x_{j,(i_{1},\ldots
,i_{\mu }),(s_{1},\ldots ,s_{\mu })}$ to either 0 or 1 and it can be carried
out in constant time since the sizes of the submatroids involved are
constant. We note that the value of $\delta $ can be found in constant time
also since $y$ has constant size. We can repeat this process until only a
constant number of variables $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })}$ have fractional values. Since there is a linear number of these
variables then the overall time is linear.

Now we describe the rounding algorithm in more detail. Let us assume that
the first $n^{\prime }(mg)^{\mu }$ columns of $B$ are indexed so that the
columns corresponding to variables $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}$ for each job $J_{j}$ appear in adjacent
positions. We might assume that at all times during the rounding procedure
each job $J_{j}$ has associated at least two columns in $B$. This assumption
can be made since if job $J_{j}$ has only one associated column, then the
corresponding variable $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}$ must have value either zero or one. Let $B^{\prime }$ be the set formed
by the first $2mg+1$ columns of $B$. Note that at most $2mg$ rows of $%
B^{\prime }$ have non-zero entries. To see this observe that at most $mg+1$
of these entries come from constraint $(5)$, while at most $mg-1$ non-zero
entries come from constraint $(6^{\prime })$ and by the above assumption on
the number of columns for each job.

To avoid introducing more notation let $B^{\prime}$ be the matrix induced by
the non-zero rows. Since $B^{\prime}$ has at most $2mg$ rows and exactly $%
2mg+1$ columns then $B^{\prime}$ is singular and hence its null space has at
least one non-zero vector $y$ such that $B^{\prime}y=0$. Since the size of $%
B^{\prime}$ is constant, vector $y$ can be found in constant time by using
simple linear algebra.

After updating $x$, $B$, and $b$ as described above, the procedure is
repeated. This is done until there are at most $2mg$ columns in $B$
corresponding to variables $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })}$. Hence the total number of iterations is at most $n^{\prime
}(mg)^{\mu }-2mg$ and each iteration can be done in constant time.

\begin{lemma}
\label{bound_F}A solution for $LP(R,s,m+1+\rho )$ can be transformed in
linear time into another feasible solution for $LP(R,s,m+1+\rho )$ in which
the set of jobs $\mathcal{F}$ that have fractional assignments in more than
one snapshot after the rounding procedure has size $|\mathcal{F}|\leq mg.$
\end{lemma}

\begin{proof}
By the above argument at most $2mg$ variables $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}$ might have value different from $0$ and $1$.
Since at the end of the rounding procedure each job has either $0$ or at
least $2$ columns in $B$, then at most $mg$ jobs receive fractional
assignments.
\end{proof}

\subsection{Generating a Feasible Schedule}

For each relative schedule $R$ we approximately solve the linear program $%
LP(R)$. Let $R^{\ast }$ denote the relative schedule with the smallest
approximate linear program solution value. Then, we round the solution of
the approximate $LP(R^{\ast })$ to get only few fractional variables. Remove
all jobs $\mathcal{F}$ that received fractional assignment. These jobs will
be placed at the beginning of the schedule. Next, we transform the solution
of the linear program into a feasible schedule as follows. Using the
approximate solution for the LP, our snapshots are enlarged from $t_{\ell }$
to at most $t_{\ell }^{\prime }=t_{\ell }+\rho $. We assume, w.l.o.g., that
the solution value for $LP(R^{\ast },s,m+1+\rho )$ is not greater than $m+1$%
, otherwise the solution obtained by scheduling each jobs sequentially on
the machines with the smallest processing time has a better makespan in the
worst case.

Consider a snapshot $M(\ell )$, $\ell \in \{1,\ldots ,g\}$. In this snapshot
the set $P(\ell )$ contains machines that are reserved for the long jobs.
The set of operations $O(\ell )$ from small jobs assigned by the solution of
the linear program must be scheduled in machines $M\setminus P(\ell )$.

Let $\tau =\frac{\varepsilon }{8\mu ^{3}mg}$. Consider the set of operations
from small jobs which have, according to the rounded solution for $%
LP(R^{\ast },s,m+1+\rho )$, processing times greater than $\tau $. The
cardinality of that set is bounded by $\frac{m(m+1)}{\tau }$. Let $\mathcal{V%
}$ the set of jobs corresponding to the $\frac{m(m+1)}{\tau }$ longest
operations from small jobs. By removing all jobs of $\mathcal{V}$ the
processing time of the remaining operations from small jobs will be not
greater than $\tau $ (the jobs of $\mathcal{V}$ will be placed at the
beginning of the schedule).

\begin{lemma}
\label{LV} 
\begin{equation}
|\mathcal{V}|\leq \frac{8\mu ^{3}m^{2}(m+1)}{\varepsilon }g.
\end{equation}
\end{lemma}

Let $p_{max}(\ell )$ be the maximum processing time among the remaining
operations from $O(\ell )$. On the modified snapshot $M^{\prime }(\ell )$
the remaining operations from the small jobs, which are assigned to machines
according to the rounded solution for $LP(R,s,m+1+\rho )$, form an instance
of the job shop problem with maximum machine load $t_{\ell }^{\prime }$ and
maximum operation length $p_{max}(\ell )$. We use the algorithm of
Sevastianov \cite{Sev1} to find in $O(n^{2}\mu ^{2}m^{2})$ time a schedule
for the operations in $M^{\prime }(\ell )$ of length at most $\bar{t}_{\ell
}=t_{\ell }+\rho +\mu ^{3}mp_{max}(\ell )$. Hence we get an enlarged
snapshot $M^{\prime }(\ell )$ of length at most $\bar{t}_{\ell }$. Summing
these enlargements among all snapshots, we get:

\begin{lemma}
\label{L3} 
\begin{equation}
\sum_{\ell =1}^{g}\mu ^{3}mp_{max}(\ell )\leq \mu ^{3}mg\tau =\frac{%
\varepsilon }{8}\leq \frac{\varepsilon }{8}L_{\max }^{\ast }.
\end{equation}
\end{lemma}

The total length of the snapshots $M^{\prime }(\alpha _{ij}),\ldots
,M^{\prime }(\beta _{ij})$ that contain an operation $O_{ij}$ of a long job $%
J_{j}$ might be larger than $p_{ij}$. This creates some idle times on
machine $m_{ij}$. We start operations $O_{ij}$ for long jobs $\mathcal{L}$
at the beginning of the enlarged snapshot $M^{\prime }(\alpha _{ij})$. The
resulting schedule is clearly feasible. Let $S(J^{\prime })$ be the total
processing time of all jobs in some set $J^{\prime }\subset \mathcal{J}$,
when operations of that jobs are assigned to machines with the lowest
processing times.

\begin{lemma}
\label{L2} A feasible schedule for the jobs $\mathcal{J}$ of length at most $%
(1+\frac{3}{8}\epsilon )L_{\max }^{\ast }+S(\mathcal{F\cup V})$ can be found
in $O(n^{2})$ time.
\end{lemma}

\begin{proof}
The small jobs $\mathcal{F}$ that received fractional assignment and the
jobs in $\mathcal{V}$ are scheduled on the machines with the smallest
processing time sequentially at the beginning of the schedule produced by
the above algorithm. Thus, by Lemmas \ref{L1} and \ref{L3} the claim follows.
\end{proof}

The following lemma shows that we can choose the number $k$ of long jobs so
that $S(\mathcal{F\cup V})\leq \frac{\epsilon }{8}L_{\max }^{\ast }$ (see
Lemma \ref{L4}).

\begin{lemma}
\label{key} \cite{Amoura, JP1} Let $\{P_{1},P_{2},\ldots ,P_{n}\}$ be a
sequence of positive real numbers and $m+1=\sum_{j=1}^{n}P_{j}$. Let $q$ be
a nonnegative integer, $\alpha $ be a positive value, and assume that $n\geq
(q+1)^{\lceil {\frac{1}{\alpha }}\rceil }$. There exists an integer $k$ such
that $P_{k+1}+\ldots +P_{k+qk}\leq \alpha (m+1)$ and $k\leq (q+1)^{\lceil {%
\frac{1}{\alpha }}\rceil }.$
\end{lemma}

Let $\alpha ={\frac{\epsilon }{8(m+1)}}$ and $qk=\frac{48(1+\varepsilon
)^{2}\mu ^{4}m^{3}}{\varepsilon ^{2}}k$, i.e. $q=\frac{48(1+\varepsilon
)^{2}\mu ^{4}m^{3}}{\varepsilon ^{2}}$. By this lemma, $k\leq (\frac{%
48(1+\varepsilon )^{2}\mu ^{4}m^{3}}{\varepsilon ^{2}}+1)^{\lceil
8(m+1)/\epsilon \rceil }$. We choose $\mathcal{L}$ as the set of $k$ jobs
with the largest values $P_{j}=\sum_{i=1}^{\mu }[\min_{s\in
M_{kj}}p_{ij}^{s}]$.

\begin{lemma}
\label{L4} 
\begin{equation}
S(\mathcal{F\cup V})\leq \frac{\epsilon }{8}L_{\max }^{\ast }.
\end{equation}
\end{lemma}

\begin{proof}
By Lemmas \ref{bound_F} and \ref{LV}, and assuming $m\geq 2$, 
\begin{eqnarray*}
|\mathcal{F}\cup \mathcal{V}| &\leq &mg+\frac{8\mu ^{3}m^{2}(m+1)}{%
\varepsilon }g\leq (\frac{8\mu ^{3}m(m+1)}{\varepsilon }+1)m(2\mu
k+2/\varepsilon +1) \\
&\leq &(\frac{12\mu ^{3}m^{2}}{\varepsilon }+1)m(\frac{3\varepsilon +2}{%
\varepsilon })\mu k\leq (\frac{12\mu ^{3}m^{2}}{\varepsilon }+\frac{\mu
^{3}m^{2}\varepsilon }{4\varepsilon })m(\frac{3\varepsilon +2}{\varepsilon }%
)\mu k \\
&\leq &\frac{(48+\varepsilon )(3\varepsilon +2)}{\varepsilon ^{2}}\mu
^{4}m^{3}k\leq \frac{48(1+\varepsilon )^{2}\mu ^{4}m^{3}}{\varepsilon ^{2}}k.
\end{eqnarray*}
By the preceding discussion on the choice of $\mathcal{L}$ and by Lemma \ref
{key}, the total processing time for the jobs in $\mathcal{F\cup V}$ is at
most ${\frac{\epsilon }{8}}\leq \frac{\epsilon }{8}L_{\max }^{\ast }$.
\end{proof}

\begin{theorem}
\label{T1} For any fixed $m$ and $\mu $, there is a polynomial-time
approximation scheme for the flexible job shop scheduling problem that
computes for any fixed real number $\epsilon $, with $\varepsilon >0$, a
feasible schedule with maximum delivery completion time of at most $%
(1+\epsilon )\cdot L_{\max }^{\ast }$ in $O(n)$ time.
\end{theorem}

\begin{proof}
Lemmas \ref{L2} and \ref{L4} imply that $(1+\frac{3}{8}\epsilon )L_{\max
}^{\ast }+S(\mathcal{F\cup V})\leq (1+\frac{1}{2}\epsilon )L_{\max }^{\ast }$%
. Then, using the arguments of Section \ref{Sect:prep}, we have a $(1+\frac{1%
}{2}\epsilon )$-approximation algorithm that can handle $1+\frac{2}{\epsilon 
}$ distinct delivery times. That gives a $(1+\epsilon )$-approximation
algorithm for the general case. For every fixed $m$ and $\epsilon $, all
computations can be carried out in $O(n)$ time, with exception of the
algorithm of Sevastianov that runs in $O(n^{2})$ time. The latter can be
sped up to get linear time by ``sticking'' pairs of small jobs together as
described in \cite{JSS2}.
\end{proof}

We note that our algorithm is also a $(2+\varepsilon )$-approximation
algorithm when jobs have release and delivery times. Indeed by adding
release times to jobs in the schedule provided by the described algorithm,
the maximum delivery completion time cannot increase more than $r_{\max }$,
where $r_{\max }$ denotes the maximum release time, and hence the schedule
value is at most $(2+\varepsilon )$ times the optimal value, since $r_{\max
}\leq L_{\max }^{\ast }$.

\section{Preemptive Flexible Job Shop without migration\label%
{Sect:nomigration}}

In the preemptive flexible job shop problem without migration the processing
of an operation may be interrupted and resumed later on the same machine.

As in the non-preemptive case we divide the set of jobs $\mathcal{J}$ into
long jobs $\mathcal{L}$ and short jobs $\mathcal{S}$ and set $\mathcal{L}$
has a constant number of jobs. Again, one can associate a relative schedule
to each preemptive schedule of $\mathcal{L}$ by assigning an allowed machine
to each operation of big jobs, and by determining a partial order for the
starting and finishing times of operations from $\mathcal{O}_{\mathcal{L}}%
\mathcal{\cup D}$. The only difference from the nonpreemptive case is that
some unfeasible relative schedules for the nonpreemptive case are now
feasible. Namely, consider two operations $a$ and $b$ from $\mathcal{O}_{%
\mathcal{L}}$ which are assigned to the same machine according to a given
relative schedule $R$. Now, $R$ is feasible even if $a$ starts before $b$
but ends after $b$. By looking at every time in the schedule when an
operation from $\mathcal{O}_{\mathcal{L}}\mathcal{\cup D}$ starts or ends we
define a set of time intervals, similar to those defined in the
non-preemptive case by the snapshots. For convenience we also call these
time intervals snapshots. Since $\mathcal{O}_{\mathcal{L}}\mathcal{\cup D}$
has a constant number of operations (and hence there is a constant number of
snapshots), we can consider all relative orderings of the long jobs in the
snapshots. An operation of a long job is scheduled in consecutive snapshots $%
i,i+1,\ldots ,i+t$, \emph{but} only a fraction (possible equal to zero) of
the operation might be scheduled in any one of these snapshots. However, and
this is crucial for the analysis, in every snapshot there can be at most one
operation from any given long job.

Now we define a linear program as in the case of the non-preemptive flexible
job shop. For each operation $O_{ij}$ of job $J_{j}\in \mathcal{L}$ we
define variable $x_{ij\ell }$ for every $\alpha _{ij}\leq \ell \leq \beta
_{ij}$. Variable $x_{ij\ell }$ denotes which fraction of operation $O_{ij}$
is scheduled in snapshot $\ell $. Let $g$ be the number of snapshots, $%
t_{\ell }$ be the length of the $\ell $ snapshot, and let $O_{h}$ denote the
set of operations from long jobs processed on machine $h$ according to the
relative schedule. Let $L_{\ell ,h}$ be defined as in Section \ref
{Sect:relax} and let $L_{\ell ,h}^{\prime }$ denote the total processing
time of operations from long jobs that are executed by machine $h$ during
snapshot $\ell $, i.e., $L_{\ell ,h}^{\prime }=\sum_{O_{ij}\in O_{h}|\alpha
_{ij}\leq \ell \leq \beta _{ij}}x_{ij\ell }p_{ij}^{h}$. To avoid that some
operation $O_{kj}$ of a short job $J_{j}\in \mathcal{S}$ is scheduled on a
machine $s_{k}\notin M_{kj}$ that cannot process it, we set $%
x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })}=0$. Furthermore, $%
x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })}=0$ if the last
operation of job $J_{j}$ ends after the starting time of its corresponding
delivery operation, i.e., $i_{\mu }\geq \alpha _{w}$ when $J_{j}\in D_{w}$, $%
w=1,...,\chi $. We call $Z_{j}$ the subset of $X_{j}$ that is set to zero.
The new linear program is the following.

\begin{description}
\item[Minimize $~\sum_{\ell=1}^g t_\ell~$]  

\item[s.t.~~~(1)~]  $t_{\ell }\geq 0$, {\small \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
\ \ \ \ \ \ \ \ \ }$1\leq \ell \leq g$

\item[~~~~~~(2')~]  $\sum_{\ell =\alpha _{ij}}^{\beta _{ij}}x_{ij\ell }=1$,
~~ {\small \ \ \ }$1\leq i\leq \mu ${\small , }$J_{j}\in L${\small ,}

\item[~~~~~~~(3)~]  $\sum_{\ell =\alpha _{w}}^{g}t_{\ell }=\delta _{w},$ ~~ 
{\small \ \ \ \ }$w=1,...,\chi ${\small ,}

\item[~~~~~~~(4)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}\geq 0,$ ~~ {\small \ \ \ }$J_{j}\in \mathcal{S}${\small , }$%
(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })\in A\times B${\small ,}

\item[~~~~~~~(5)~]  $\sum_{(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})\in A\times B}\,\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=1,$ ~\ \ \ \ \ ~ $J_{j}\in \mathcal{S}$,

\item[~~~~~~(6')~]  $L_{\ell ,h}+L_{\ell ,h}^{\prime }\leq t_{\ell }$, ~~ 
{\small \ \ \ }$1\leq \ell \leq g$, $1\leq h\leq m$,

\item[~~~~~~(7')~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=0,$ ~~ {\small if} $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}\in Z_{j}${\small ,}

\item[ \ \ \ \ \ (8) ]  $x_{ij\ell }\geq 0,$ ~~ $1\leq i\leq \mu $, $%
J_{j}\in \mathcal{L}$, $\alpha _{ij}\leq \ell \leq \beta _{ij}.$
\end{description}

Note that in any solution of this linear program the schedule for the long
jobs is always feasible, since there is at most one operation of a given job
in any snapshot. We find an approximate solution for the linear program
using the algorithm of Section 3.1, and then we apply our rounding procedure
to this solution. After rounding there are at most $mg$ small jobs that are
preempted (see Section 3.2). These jobs are scheduled at the beginning, as
before.

Let $\tau =\frac{\varepsilon }{8\mu ^{3}mg}$. As for the non-preemptive
case, consider the set of operations from small jobs which have, according
to the rounded solution, processing times greater than $\tau $. The
cardinality of that set is bounded by $\frac{m(m+1)}{\tau }$. Let $\mathcal{V%
}$ the set of jobs corresponding to the $\frac{m(m+1)}{\tau }$ longest
operations from small jobs. By removing all jobs of $\mathcal{V}$ the
processing time of the remaining operations from small jobs will be not
greater than $\tau $ (the jobs of $\mathcal{V}$ will be placed at the
beginning of the schedule). Next, we find a feasible schedule for every
snapshot as follows. Let us consider a snapshot. Then use Sevastianov's
algorithm to find a feasible schedule for the jobs in the snapshot, but
since the performance of that algorithm depends on the longest processing
time it might be necessary to split operations from long jobs into smaller
parts. More precisely, first note that every remaining operation from $%
\mathcal{S}$ is small enough to limit the enlargement due to Sevastianov's
algorithm, while fraction $f_{ij\ell }=x_{ij\ell }p_{ij}^{h}$ of operation $%
O_{ij}$ from long jobs might be too ``big''. In order to bound the
enlargement due to Sevastianov's algorithm it is sufficient that each
fraction $f_{ij\ell }$ is at most $\tau $ otherwise we divide up $f_{ij\ell
} $ into $\left\lceil \frac{f_{ij\ell }}{\tau }\right\rceil $ pieces and
apply Sevastianov's algorithm. At the end we have a feasible schedule
because there is at most one operation of each long job in the snapshot.

In this schedule the number of preemptions is a constant. Indeed the number
of preemptions is equal to the number of times operations from long jobs are
preempted that is at most 
\begin{eqnarray*}
\sum_{J_{j}\in \mathcal{L}}\sum_{i=1}^{\mu }\sum_{\ell =\alpha _{ij}}^{\beta
_{ij}}\left\lceil \frac{f_{ij\ell }}{\tau }\right\rceil &\leq
&\sum_{J_{j}\in \mathcal{L}}\sum_{i=1}^{\mu }\sum_{\ell =\alpha
_{ij}}^{\beta _{ij}}(\frac{f_{ij\ell }}{\tau }+1) \\
&\leq &\frac{m(m+1)}{\tau }+kg,
\end{eqnarray*}
since for each snapshot $\ell $ there are at most $k$ different operations
from long job, and the sum of every fraction $f_{ij\ell }$ cannot be more
than $m(m+1)$ (see Lemma \ref{Lemma:bound}). Hence, our solution has $O(1)$
preemptions. Choosing the size of $\mathcal{L}$ as we did for the
non-preemptive case we ensure that the length of the schedule is at most $%
1+\epsilon $ times the value of an optimum schedule. This algorithm runs in
linear time.

\begin{theorem}
\label{T2} For any fixed $m$ and $\mu $, there is a polynomial-time
approximation scheme for the preemptive flexible job shop scheduling problem
without migration that computes for any fixed real number $\epsilon $, with $%
\varepsilon >0$, a feasible schedule with maximum delivery completion time
of at most $(1+\varepsilon )\cdot L_{\max }^{\ast }$ in $O(n)$ time.
\end{theorem}

Again, note that the described algorithm is also a $(2+\varepsilon )$%
-approximation algorithm for the flexible job shop problem with release and
delivery times which runs in linear time.

\section{Preemptive Flexible Job Shop Problem with migration\label%
{Sect:migration}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%(LINEAR?? CHECK step 1)

In the preemptive flexible job shop problem with migration the processing of
an operation may be interrupted and resumed later on an eligible machine
that may be different from the previous one. We consider the problem in
which each job $J_{j}$ has a release time $r_{j}$ and a delivery time $%
q_{j}. $

In this section we provide for any $\varepsilon >0$ a $(2+\varepsilon )$%
-approximation algorithm, which runs in linear time when the number of
machines and operations per job are fixed. Our $(2+\varepsilon )$%
-approximation algorithm consists of four steps which are analyzed in the
following.

\subsection{Step 1}

In the first step we find the optimal solution of a problem relaxation which
assigns operations to machines and time intervals. The problem relaxation is
defined by using linear programming and assuming release times equal to $0$.
Let $t$ denote the objective function value of the linear program defined
later and let $t^{\ast }$ be the optimal value. Consider $\chi $ time
intervals defined as follows, $[0,t-\delta _{1}],[t-\delta _{1},t-\delta
_{2}],...,[t-\delta _{\chi -1},t-\delta _{\chi }]$ (remember from section 
\ref{Sect:prep} that $\delta _{1}>\delta _{2}>...>\delta _{\chi }$). For
each job $J_{j}$ we use a set of decision variables $x_{j,(i_{1},\ldots
,i_{\mu }),(s_{1},\ldots ,s_{\mu })}\in \lbrack 0,1]$ for tuples $%
(i_{1},\ldots ,i_{\mu })\in A$ and $(s_{1},\ldots ,s_{\mu })\in B$, where $%
A=\{(i_{1},\ldots ,i_{\mu })|1\leq i_{1}\leq i_{2}\leq \ldots \leq i_{\mu
}\leq \chi \}$ and $B=\{(s_{1},\ldots ,s_{\mu })|1\leq s_{i}\leq
m,i=1,...,\mu \}$.

The meaning of these variables is that $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}=1$ if and only if, for each $1\leq k\leq \mu $,
each operation $O_{kj}$ of job $J_{j}$ is scheduled on machine $s_{k}$, and
in time interval $[0,t-\delta _{1}]$ if $i_{k}=1$, otherwise in time
interval $[t-\delta _{i_{k}-1},t-\delta _{i_{k}}]$, when $1<i_{k}\leq \chi $%
. Note that by the way in which we numbered the operations, any tuple $%
(i_{1},\ldots ,i_{\mu })\in A$ represents a valid ordering for the
operations. Let the load $L_{\ell ,h}$ on machine $h$ in time interval $\ell 
$ be defined as the total processing time of operations that are executed by
machine $h$ during time interval $\ell $, i.e., 
\begin{equation*}
L_{\ell ,h}=\sum_{j=1}^{n}\sum_{{\ \ \ }(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })\in A\times B}\sum_{{\ \ \ \ \ }k=1,\ldots ,\mu
|i_{k}=\ell ,s_{k}=h}\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}p_{kj}^{s_{k}}.
\end{equation*}
To avoid that some operation $O_{kj}$ of a job $J_{j}\in \mathcal{J}$ is
scheduled on a machine $s_{k}\notin M_{kj}$ that cannot process it, we set $%
x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })}=0$. Furthermore, if
the last operation of any job $J_{j}\in D_{w}$, for $w=1,...,\chi $, ends
after time interval $w$, it is set $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}=0$. We call $Z_{j}$ the subset of $X_{j}$ that
is set to zero. Then we have the linear programming problem $LP$,

\begin{description}
\item[Minimize $~t$]  

\item[~~~s.t.~~~(1)~]  $\sum_{(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})\in A\times B}\,\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=1 $, ~~ $j=1,...,n${\small ,}

\item[~~~~~~~~~~(2)~]  $L_{1,h}\leq t-\delta _{1}$, ~~ $\ \ \qquad \qquad \
\ \ \ \ 1\leq h\leq m${\small ,}

\item[~~~~~~~~~~(3)~]  $L_{\ell ,h}\leq \delta _{\ell -1}-\delta _{\ell }$,
~~ $\qquad \qquad \ \ \ 1\leq h\leq m${\small , }$\ell =2,3,...,\chi $,

\item[~~~~~~~~~~(4)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}\geq 0,\qquad ~\ \ \ \ j=1,...,n,$ $(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })\in A\times B$

\item[~~~~~~~~~~(5)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=0${\small , \ \ \ ~~\ \qquad if }$x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}\in Z_{j}${\small .}
\end{description}

The following lemma shows that the optimal value $t^{\ast }$ of variable $t$
is a valid lower bound of the maximum of the maximum delivery completion
time for the preemptive flexible job shop problem with migration.

\begin{lemma}
An optimum solution of $LP$ has value no larger than the maximum delivery
time of an optimum schedule.
\end{lemma}

\begin{proof}
Consider an optimum schedule $S^{\ast }$. We only need to show that for any
job $J_{j}\in \mathcal{J}$ there is a feasible solution of $LP$ that
schedules all operations of $J_{j}$ in the same positions as $S^{\ast }$. By
considering the new definition of set $A$ and $B$ given in this section, the
latter follows from Lemma \ref{Lemma:assign}.
\end{proof}

A basic optimal solution to $LP$ has the property that the number of
positive variables is at most the number of rows in the constraint matrix.
Hence, at most $m\chi -1$ jobs receive fractional assignment. Let $\mathcal{F%
}$ denote the set of jobs which receive fractional assignment. In order to
reduce the time complexity of the algorithm our linear program can be
rewritten so that the Logarithmic Potential Price Directive Decomposition
Method developed by Grigoriadis and Khachiyan \cite{GK} can be used to find
an approximate solution in linear time.

\subsubsection{Approximate Solution of the Linear Program}

We guess the value $s$ of an optimum schedule. Then we replace constraints $%
(2)$ and $(3)$ by constraints $(2^{\prime })$ and $(3^{\prime })$, where $%
\lambda $ is a non-negative value:

\begin{description}
\item[Minimize $~\protect\lambda $]  

\item[~~~s.t.~~~(1)~]  $\sum_{(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})\in A\times B}\,\,x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=1 $, ~~ $j=1,...,n${\small ,}

\item[~~~~~~~~~~(2')~]  $\frac{L_{1,h}}{s-\delta _{1}}\leq \lambda $, ~~ $\
\ \qquad \qquad \ \ \ \ \ 1\leq h\leq m${\small ,}

\item[~~~~~~~~~~(3')~]  $\frac{L_{\ell ,h}}{\delta _{\ell -1}-\delta _{\ell }%
}\leq \lambda $, ~~ $\qquad \qquad \ \ \ 1\leq h\leq m${\small , }$\ell
=2,3,...,\chi $.

\item[~~~~~~~~~~(4)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}\geq 0,\qquad ~\ \ \ \ j=1,...,n,$ $(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })\in A\times B$

\item[~~~~~~~~~~(5)~]  $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}=0${\small , \ \ \ ~~\ \qquad if }$x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}\in Z_{j}${\small .}
\end{description}

This new linear program will be denoted as $LP(s,\lambda )$. The linear
program $LP(s,\lambda )$ has a special \emph{block angular} structure (for a
survey see \cite{GK,PST}). The blocks $B_{j}=\{x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}\mid $ conditions (1), (4), and (5) are
satisfied $\}$ for $J_{j}\in \mathcal{J}$ are $(m\chi )^{\mu }$-dimensional 
\emph{simplicies}. Linear inequalities $(2^{\prime })$ and $(3^{\prime })$
form a set of so called \emph{coupling constraints}. Note that functions $%
\frac{L_{1,h}}{s-\delta _{1}}$ and $\frac{L_{\ell ,h}}{\delta _{\ell
-1}-\delta _{\ell }}$ are non-negative.

The Logarithmic Potential Price Directive Decomposition Method~\cite{GK}
developed by Grigoriadis and Khachiyan for a large class of problems with
block angular structure provides a $\rho $-relaxed decision procedure for $%
LP(s,1)$. This procedure either determines that $LP(s,1)$ is infeasible, or
computes (a solution that is nearly feasible in the sense that it is) a
feasible solution of $LP(s,1+\rho )$. The overall running time of the
procedure for $LP(s,1)$ is $O(n)$.

\begin{lemma}
The following assertions are true:

\begin{description}
\item[(0)]  $LP(m+1,1)$ is feasible,

\item[(1)]  if $LP(s,1)$ is infeasible, then there exists no schedule with
value at most $s$,

\item[(2)]  if $LP(s,1)$ is feasible and $s\leq s^{\prime }$, then $%
LP(s^{\prime },1)$ is feasible,

\item[(3)]  $LP(t^{\ast },1)$ is feasible.
\end{description}
\end{lemma}

This Lemma implies that we can use binary search on the interval $[{1},1+m]$
to find a value $\tilde{t}\leq (1+{\frac{\epsilon }{8}})t^{\ast }$ such that 
$LP(\tilde{t},1+\rho )$ is feasible for $\rho =1+\frac{\epsilon }{%
8+\varepsilon }$. This search can be performed in $O(\log (\frac{1}{%
\varepsilon }\log m))$ iterations as before. For this value $\bar{s}$ a
solution to $LP(\tilde{t},1+\rho )$ has $L_{1,h}\leq (\tilde{t}-\delta
_{1})(1+\rho )$ and $L_{\ell ,h}\leq (\delta _{\ell -1}-\delta _{\ell
})(1+\rho )$. Since $\rho =1+\frac{\epsilon }{8+\varepsilon }$ the total
enlargement of all time intervals is at most $(\tilde{t}-\delta _{1})\rho +$ 
$\sum_{\ell =2}^{\chi }(\delta _{\ell -1}-\delta _{\ell })\rho =(\tilde{t}%
-\delta _{\chi })\rho \leq \tilde{t}\rho \leq \rho (1+{\frac{\epsilon }{8}}%
)t^{\ast }=(1+{\frac{\epsilon }{4}})t^{\ast }$.

\begin{lemma}
A solution for $LP(\tilde{t},1+\rho )$, with $\tilde{t}\leq (1+\frac{%
\epsilon }{8})t^{\ast }$ and $\rho =1+\frac{\epsilon }{8+\varepsilon }$, of
value at most $(1+\frac{\epsilon }{4})t^{\ast }$ can be found in linear time.
\end{lemma}

As in \cite{JSS2}, it is possible to modify any feasible solution for $%
LP(s,1+\rho )$ to get a new feasible solution with at most $m\chi $
variables $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })}$ which
have fractional values. Moreover we can do this rounding step in linear time.

\subsubsection{Rounding Step}

In this section we use similar arguments as in Section \ref{Sect:rounding}
to modify any feasible solution for $LP(s,1+\rho )$ to get a new feasible
solution in which all but a constant number of variables $x_{j,(i_{1},\ldots
,i_{\mu }),(s_{1},\ldots ,s_{\mu })}$ have value $0$ or $1$. Moreover we can
do this rounding step in linear time. Let us write the linear program $%
LP(s,1+\rho )$ in matrix form as $Bx=b$, $x\geq 0$. Let us assume that the
columns of $B$ corresponding to variables $x_{j,(i_{1},\ldots ,i_{\mu
}),(s_{1},\ldots ,s_{\mu })}$ for each job $J_{j}$ appear in adjacent
positions. We might assume that at all times during the rounding procedure
each job $J_{j}$ has associated at least two columns in $B$. This assumption
can be made since if job $J_{j}$ has only one associated column, then the
corresponding variable $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu
})}$ must have value either zero or one. Let $B^{\prime }$ be the set formed
by the first $2m\chi +2$ columns of $B$. Note that at most $2m\chi +1$ rows
of $B^{\prime }$ have non-zero entries. To see this observe that at most $%
m\chi +1$ of these entries come from constraint $(1)$ (by the above
assumption on the number of columns for each job), while at most $m\chi $
non-zero entries come from constraints $(2^{\prime })$ and $(3^{\prime })$.

To avoid introducing more notation let $B^{\prime }$ be the matrix induced
by the non-zero rows. Since $B^{\prime }$ has at most $2m\chi +1$ rows and
exactly $2m\chi +2$ columns then $B^{\prime }$ is singular and hence its
null space has at least one non-zero vector $y$ such that $B^{\prime }y=0$.
Since the size of $B^{\prime }$ is constant, vector $y$ can be found in
constant time by using simple linear algebra. Let $\phi >0$ be the smallest
value such that some component of the vector $x+\phi y$ is either zero or
one (if the dimension of $y$ is smaller than the dimension of $x$ we augment
it by adding an appropriate number of zero entries). Note that the vector $%
x+\phi y$ is a feasible solution of $LP(s,1+\rho )$. Let $x^{0}$and $x^{1}$
be respectively the zero and one components of vector $x+\phi y$. We update
the linear program by making $x=x+\phi y$ and then removing from $x$ all
variables in $x^{0}$ and $x^{1}$ and all columns of $B$ corresponding to
such variables. If $x^{1}\not=\emptyset $ then vector $b$ is set to $%
b-\sum_{i\in x^{1}}B[\ast ,i]$, where $B[\ast ,i]$ is the column of $B$
corresponding to variable $i$.

We note that the value of $\phi $ can be found in constant time also since $%
y $ has constant size. We can repeat this process until only a constant
number of variables $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots ,s_{\mu })}$
have fractional values. Since there is a linear number of these variables
then the overall time is linear.

After updating $x$, $B$, and $b$ as described above, the procedure is
repeated. This is done until there are at most $2m\chi +1$ columns in $B$
corresponding to variables $x_{j,(i_{1},\ldots ,i_{\mu }),(s_{1},\ldots
,s_{\mu })}$ and the number of jobs with at least two columns in $B$ is at
most $m\chi $. Furthermore, the total number of iterations is at most $%
n(m\chi )^{\mu }-2m\chi -1$ and each iteration can be done in constant time.

\begin{lemma}
A solution for $LP(s,1+\rho )$ can be transformed in linear time into
another feasible solution for $LP(s,1+\rho )$ in which the set of jobs $%
\mathcal{F}$ that have fractional assignments in more than one snapshot
after the rounding procedure has size $|\mathcal{F}|\leq m\chi .$
\end{lemma}

\subsection{Step 2}

Let $\mathcal{P}$ denote the set of jobs from $\mathcal{J}\backslash 
\mathcal{F}$ for which at least one operation, according to the machine
assignment computed in step 1, has processing time greater than $\frac{%
\varepsilon \tilde{t}}{2\chi \mu ^{3}m(1+\frac{\epsilon }{8})}$. Let $%
\mathcal{L=F\cup P}$ and $\mathcal{S=J}\backslash \mathcal{L}$. According to
machine and interval assignment of step 1, find a feasible schedule $\sigma
_{\mathcal{S}}$ for the jobs from $\mathcal{S}$ applying Sevastianov's
algorithm. We use the algorithm of Sevastianov to find a schedule for the
operations assigned to each time interval. Since we have $\chi $ time
intervals, the enlargement due to that algorithm is at most $\chi \mu
^{3}mp_{\max }$, where $p_{\max }$ is the maximum processing time of
operations from $\mathcal{S}$ (according to the machine and interval
assignment of step 1). Since $p_{\max }\leq \frac{\varepsilon \tilde{t}}{%
2\chi \mu ^{3}m(1+\frac{\epsilon }{8})}$, it follows that the maximum
delivery completion time (when release times are assumed to be 0) of the
resulting schedule is $(1+\frac{\epsilon }{4})t^{\ast }+\chi \mu
^{3}mp_{\max }\leq (1+\frac{\epsilon }{4})t^{\ast }+\frac{\varepsilon \tilde{%
t}}{2(1+\frac{\epsilon }{8})}\leq (1+\frac{\varepsilon }{2})t^{\ast }\leq (1+%
\frac{\varepsilon }{2})L_{\max }^{\ast }$. Note that by considering release
times the described algorithm delivers a schedule for the jobs from $%
\mathcal{S}$ that is at most $(2+\frac{\varepsilon }{2})$ times the optimal
one, since the maximum release time cannot be more than $L_{\max }^{\ast }$.
Again, the algorithm of Sevastianov takes $O(n^{2})$ time, but it can be
sped up to get linear time by ``sticking'' pairs of jobs from $\mathcal{S}$
together as described in \cite{JSS2}. Since Sevastianov's algorithm is
applied $\chi $ times, the time complexity of step 2 is $O(n)$. Furthermore,
the cardinality of set $\mathcal{L}$ of jobs which are not yet scheduled is
bounded by a constant. Indeed, $|\mathcal{P}|$ is at most $m(1+\frac{%
\epsilon }{4})t^{\ast }$ divided by the minimum processing time of set $%
\mathcal{P}$, and therefore $|\mathcal{P}|<m(1+\frac{\epsilon }{4})t^{\ast }%
\frac{2\chi \mu ^{3}m(1+\frac{\epsilon }{8})}{\varepsilon \tilde{t}}\leq 
\frac{2\chi \mu ^{3}m^{2}(1+\frac{\epsilon }{8})(1+\frac{\epsilon }{4})}{%
\varepsilon }=O(\frac{\mu ^{3}m^{2}}{\varepsilon ^{2}})$, since $\chi \leq
1+2/\varepsilon $. By definition of set $\mathcal{L}$ we have $|\mathcal{L}%
|=|\mathcal{F}|\mathcal{\cup }|\mathcal{P}|=O(\frac{\mu ^{3}m^{2}}{%
\varepsilon ^{2}})$.

\paragraph{Step 3}

Now we ignore delivery times and consider release times. In the following we
describe how to compute a schedule $\sigma _{\mathcal{L}}$ that minimizes
the makespan for the jobs from $\mathcal{L}$.

As for delivery times, the release time of a job can be interpreted as an
additional operation of the job that has to be processed on a non-bottleneck
machine. Because of this interpretation, we can add to the set $\mathcal{O}_{%
\mathcal{L}}$ of operations a set $\mathcal{R=}\left\{ O_{0j}|J_{j}\in 
\mathcal{L}\right\} $ of release operations; the processing time of
operation $O_{0j}$ is $r_{j}$. Each job $J_{j}\in \mathcal{L}$ has to
perform a release operation $O_{0j}$ on a non-bottleneck machine at the
beginning.

Let us define a snapshot as a subset of operations from $\mathcal{O}_{%
\mathcal{L}}\cup \mathcal{R}$ such that two different operations of the same
job cannot belong to the same snapshot. A \textit{relative order} is an
ordered sequence of different snapshots which defines for every operation $%
O_{ij}$ of $\mathcal{O}_{\mathcal{L}}\cup \mathcal{R}$ the first $\alpha
_{ij}$ and the last $\beta _{ij}$ snapshots in which operation $O_{ij}$ can
start and finish, respectively. Let $g$ be the number of snapshots. A
relative order is feasible if $1\leq \alpha _{ij}\leq \beta _{ij}\leq g$ for
every operation $O_{ij}$ of $\mathcal{O}_{\mathcal{L}}\cup \mathcal{R}$, and
for two operations $O_{ij}$ and $O_{i+1j}$ of the same job $J_{j}\in 
\mathcal{L}$, we have $\beta _{ij}+1=\alpha _{i+1j}$. Furthermore, every
release operation starts in the first snapshot, i.e., $\alpha _{0j}=1$ for $%
J_{j}\in \mathcal{L}$.

We observe that $g$ can be bounded by $(\mu +1)|\mathcal{L}|$, and therefore 
$g=O(\frac{\mu ^{4}m^{2}}{\varepsilon ^{2}})$. Note that a relative order is
defined without assigning operations of long jobs to machines.

Since $\mathcal{L}$ has a constant number of jobs (and hence there is a
constant number of snapshots), we can consider all relative orderings of the
jobs from $\mathcal{L}$ in the snapshots. Any operation is scheduled in
consecutive snapshots $i,i+1,\ldots ,i+t$, \emph{but} only a fraction
(possible equal to zero) of that operation might be scheduled in any of
these snapshots. In every snapshot there can be at most one operation from
any given job from $\mathcal{L}$.

Now we define a linear program. For each operation $O_{ij}$ of job $J_{j}\in 
\mathcal{L}$ we define variable $x_{ij\ell h}$ for every $\alpha _{ij}\leq
\ell \leq \beta _{ij}$ and every $h\in M_{ij}$. Variable $x_{ij\ell h}$
denotes which fraction of operation $O_{ij}$ is scheduled in snapshot $\ell $
and on machine $h$. Let $t_{\ell }$ be the length of snapshot $\ell $. The
load on machine $h$ in snapshot $\ell $ is equal to the total processing
time of operations of jobs from $\mathcal{L}$, i.e., $L_{\ell
,h}=\sum_{J_{j}\in \mathcal{L}}\sum_{i=1,\ldots ,\mu |\alpha _{ij}\leq \ell
\leq \beta _{ij},h\in M_{ij}}\,x_{ij\ell h}p_{ij}^{h}$. The linear program
for a given relative order $R$ is the following.

\begin{description}
\item[Minimize $~\sum_{\ell=1}^g t_\ell~$]  

\item[s.t.~~~(1)~]  $t_{\ell }\geq 0$, {\small \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }$1\leq \ell \leq g$

\item[~~~~~~~(2)~]  $\sum_{h\in M_{ij}}\sum_{\ell =\alpha _{ij}}^{\beta
_{ij}}x_{ij\ell h}=1$, ~\ {\small \ \ \ }$1\leq i\leq \mu ${\small , }$%
J_{j}\in \mathcal{L}${\small ,}

\item[~~~~~~~(3)~]  $L_{\ell ,h}\leq t_{\ell }$, ~~ $\ \ \ \ \ \ \ \ \ \ \ \
\ \ \ \ \ \ \ \ \ \ \ 1\leq \ell \leq g$, $1\leq h\leq m$,

\item[~~~~~~~(4)~]  $\sum_{h\in M_{ij}}x_{ij\ell h}p_{ij}^{h}\leq t_{\ell },$%
~\ \ \ \ \ \ \ ~ $\ 1\leq \ell \leq g${\small , }$J_{j}\in \mathcal{L}$, $%
\alpha _{ij}\leq \ell \leq \beta _{ij}$,

\item[ \ \ \ \ \ \ (5) ]  $x_{ij\ell h}\geq 0,$ ~\ \ \ \ \ \ \ \ \ \ \ \ \ \
\ \ \ \ \ \ \ \ \ ~ $1\leq i\leq \mu $, $J_{j}\in \mathcal{L}$, $\alpha
_{ij}\leq \ell \leq \beta _{ij},$

\item[ \ \ \ \ \ \ (6) ]  $\sum_{\ell =1}^{\beta _{0j}}t_{\ell }=r_{j},$ ~~ 
{\small \ \ \ \ \qquad \qquad\ \ \ }$J_{j}\in \mathcal{L}$.
\end{description}

\bigskip

Constraints (3) and (4) are machine and job conditions, respectively, which
ensure that preempted operations fit onto machines. Consider any feasible
schedule of jobs from $\mathcal{L}$ according to a relative order $R$, where
with respect to this schedule, $x_{ij\ell h}p_{ij}^{h}$ denote the total
amount of time that machine $h$ works on operation $O_{ij}$ in snapshot $%
\ell $, and $t_{\ell }$ denote the length of snapshot $\ell $. It is evident
that the values $t_{\ell }$ and $x_{ij\ell h}$ for the schedule constitute a
feasible solution to the linear program above. We assert that the converse
is also true. That is, for any feasible solution to the linear programming
problem, there is a feasible solution with the same value of $t_{\ell }$ and 
$x_{ij\ell h}$. It is sufficient to note that any feasible solution to the
linear programming problem provide for each snapshot an instance of the
preemptive open shop scheduling problem. Hence, by referring to \cite{GS,LL}%
, the claim follows. Furthermore, by using the same procedure provided in 
\cite{LL} to construct a schedule for each snapshot with no more than $%
O(m^{2})$ preemptions, there are at most $O(\frac{\mu ^{4}m^{4}}{\varepsilon
^{2}})$ preemptions.

For each relative order $R$ solve the linear program above, and select the
solution with the smallest length. For each snapshot $\ell $, apply the
algorithm described in \cite{LL} to find a schedule with length $t_{\ell }$.
All the algorithm used in this step require polynomial time in the size of
the input, therefore step 3 can be completed in $O(1)$ time, since the input
size is $O(1)$. Note that the maximum delivery completion time of the
resulting schedule $\sigma _{\mathcal{L}}$ is at most $2L_{\max }^{\ast }$.

\subsection{Step 4}

The output schedule is obtained by appending $\sigma _{\mathcal{S}}$ after $%
\sigma _{\mathcal{L}}$. The value is at most $(2+\frac{\varepsilon }{2}%
)L_{\max }^{\ast }$ since the maximum completion time of schedule $\sigma _{%
\mathcal{L}}$ is not greater than $L_{\max }^{\ast }$ and the value of
schedule $\sigma _{\mathcal{S}}$ is at most $(1+\frac{\varepsilon }{2}%
)L_{\max }^{\ast }$. Hence, from the arguments of Section \ref{Sect:prep} we
get the promised result.

\begin{theorem}
For any fixed $m$ and $\mu $, there is a polynomial-time approximation
algorithm for the preemptive flexible job shop scheduling problem with
migration that computes for any fixed real number $\epsilon $, with $%
\varepsilon >0$, a feasible schedule with maximum delivery completion time
of at most $(2+\varepsilon )\cdot L_{\max }^{\ast }$ in $O(n)$ time.
\end{theorem}

\section{The job shop scheduling problem with multi-purpose machines\label%
{Sect:mpm}}

The job shop scheduling problem with multi-purpose machines \cite{BJK} is a
special case of the flexible job shop problem, in which the processing time
of each operation $p_{ij}$ does not depend anymore on the machine on which
it is processed. For this problem, our techniques can also handle the case
in which each job $J_{j}$ has a \emph{release time} $r_{j}$ and a delivery
time $q_{j}$. The main difference from the previous algorithm is that we put
each job $J_{j}$ from the set $\mathcal{F\cup V}$ of jobs (this set is
defined as before), after the corresponding release operation and before its
delivery operation on eligible machines. More precisely, the algorithm works
as follows.

Again, we use a technique by Hall and Shmoys \cite{HS} to obtain problem
instance with only a constant number of delivery and release times, and we
divide the set of jobs $\mathcal{J}$ into long jobs $\mathcal{L}$ and short
jobs $\mathcal{S}$ and set $\mathcal{L}$ has a constant number of jobs.
After, compute all of the different relative schedules of long jobs; a
relative schedule is defined as before, but we add also a constant number of
release operations that increases the number of snapshots by a constant. For
each relative schedule, in a similar way we define a linear program. Let $%
R^{\ast }$ denote the relative schedule with the smallest approximate linear
program solution value. Then, we round the solution of the approximate $%
LP(R^{\ast })$ to get a constant number of fractional variables. The
approximate solution of the linear program has a constant number of jobs
with fractional assignments (set $\mathcal{F}$), and again there is a
constant number of jobs (set $\mathcal{V}$) for which there is at least an
operation with processing time ``too big'' to bound the enlargement due to
Sevastianov's algorithm. We now use a very simple rounding procedure to
obtain an integral (and possibly infeasible) solution for the linear
program. If job $J_{j}$ has more than one nonzero variable associated with
it we set one of them to be one and others to be zero in an arbitrary
manner. The final schedule is built as follows. Assign jobs from $\mathcal{%
F\cup V}$ to machines and snapshots according to the new integral solution.
Build a left justified (that means without leaving idle times) feasible
schedule for the jobs from $\mathcal{F\cup V}$. Assign the remaining small
jobs according to the linear programming solution, and for each snapshot $%
M(\ell )$, $\ell \in \{1,\ldots ,g\}$, schedule operations assigned to $%
M(\ell )$ after the maximum finishing time in $M(\ell )$ of operations of
jobs from $\mathcal{F\cup V}$ (if any), by using Sevastianov's algorithm.
Again, from Lemma \ref{key} it is possible to choose the number of long jobs
such that the enlargement due to the jobs from $\mathcal{F\cup V}$ is
``small'' enough, and by using similar arguments as before, it is possible
to show that the described algorithm is a PTAS which runs in linear time.%
\newline

\begin{theorem}
For any fixed $m$ and $\mu $, there is a polynomial-time approximation
scheme for the MPM job shop scheduling problem with release and delivery
times that computes for any fixed real number $\epsilon $, with $\varepsilon
>0$, a feasible schedule with maximum delivery completion time of at most $%
(1+\epsilon )\cdot L_{\max }^{\ast }$ in $O(n)$ time.
\end{theorem}

By using similar arguments as before, it is possible to provide a linear
time approximation scheme also when preemption without migration is allowed.

\begin{theorem}
For any fixed $m$ and $\mu $, there is a polynomial-time approximation
scheme for the preemptive MPM job shop scheduling problem without migration
with release and delivery times that computes for any fixed real number $%
\epsilon $, with $\varepsilon >0$, a feasible schedule with maximum delivery
completion time of at most $(1+\varepsilon )\cdot L_{\max }^{\ast }$ in $%
O(n) $ time.
\end{theorem}

\section{Conclusion}

We have designed a polynomial time approximation scheme for the flexible job
shop problem with delivery times when the number of machines and the number
of operations per job are fixed. The running time for the algorithm is $O(n)$%
. For the job shop with multi-purpose machines we have shown that it is
possible to extend our techniques to handle the problem with release and
delivery times. We have also described a linear time approximation scheme
for the preemptive version without migration and a $(2+\varepsilon )$%
-approximation algorithm when migration is allowed.

We conjecture that there is a polynomial-time approximation scheme for the
flexible job shop problem with delivery and release times when the number of
machines and the number of operations per job are fixed, while it remains an
open question whether there is a PTAS for the preemptive case with migration.

\newpage

\begin{thebibliography}{99}
\bibitem{Amoura}  {\small A.K. Amoura, E. Bampis, C. Kenyon and Y.
Manoussakis, Scheduling independent multiprocessor tasks, \emph{Proceedings
of the 5th Annual European Symposium on Algorithms}, LNCS 1284 (1997), 1-12. 
}

\bibitem{BJK}  {\small P. Brucker, B. Jurisch, A. Kramer, Complexity of
scheduling problems with multi-purpose machines, \emph{Annals of Operations
Research}, 70 (1997), 57-73.}

\bibitem{BR}  {\small P. Brandimarte, Routing and scheduling in a flexible
job shop by tabu search, \emph{Annals of Operations Research}, 22, pp
158-183, 1993. }

\bibitem{BS}  {\small P. Brucker, R. Schlie, Job-shop scheduling with
multi-purpose machines, Computing 45, 369-375, 1990.}

\bibitem{COLERI}  {\small T. H. Cormen, C.E. Leiserson, R. L. Rivest,
Introduction to Algorithms, \emph{MIT Press,} 1991. }

\bibitem{GJS}  {\small M.R. Garey, D.S. Johnson and R. Sethi, The complexity
of flowshop and jobshop scheduling, \emph{Mathematics of Operations Research}
1 (1976), 117-129. }

\bibitem{GPSS}  {\small L.A. Goldberg, M. Paterson, A. Srinivasan, and E.
Sweedyk, Better approximation guarantees for job-shop scheduling, \emph{%
Proceedings of the 8th Symposium on Discrete Algorithms} SODA 97, 599-608.}

\bibitem{GS}  {\small T. Gonzales and S. Sahni, Open shop scheduling to
minimize finish time, \emph{Journal of the ACM} 23 (1976), 665-679. }

\bibitem{GS2}  {\small T. Gonzales and S. Sahni, Flowshop and jobshop
schedules: complexity and approximation, \emph{Operations Research} 26
(1978), 36-52. }

\bibitem{GLLR}  {\small R.L. Graham, E.L. Lawler, J.K. Lenstra, A.H.G.
Rinnoy Kan, Optimization and approximation in deterministic sequencing and
scheduling, \emph{Ann. Discrete Math.} 5 (1979), 287-326.}

\bibitem{GK}  {\small M.D. Grigoriadis and L.G. Khachiyan, Coordination
complexity of parallel price-directive decomposition, \emph{Mathematics of
Operations Research} 21 (1996), 321-340. }

\bibitem{Hall}  {\small L.A. Hall, Approximability of flow shop scheduling, 
\emph{Mathematical Programming} 82 (1998), 175-190. }

\bibitem{HS}  {\small L.A. Hall and D.B. Shmoys, Approximation algorithms
for constrained scheduling problems, \emph{In Proceedings of the IEEE 30th
Annual Symposium on Foundations of Computer Science }(1989), pp. 134-139.}

\bibitem{JP1}  {\small K. Jansen and L. Porkolab, Linear-time approximation
schemes for scheduling malleable parallel tasks, \emph{Proceedings of the
10th Annual ACM-SIAM Symposium on Discrete Algorithms}, to appear, 1999. }

\bibitem{JP2}  {\small K. Jansen and L. Porkolab, Improved approximation
schemes for scheduling unrelated parallel machines, 31st Annual ACM
Symposium on Theory of} {\small Computing, STOC 99, Atlanta, 1999, 408-417.}

\bibitem{JSS2}  {\small K. Jansen, R. Solis-Oba and M.I. Sviridenko, A
Linear Time Approximation Scheme for the Job Shop Scheduling Problem, to
appear in:} {\small \emph{APPROX 99}, Berkeley, 1999. }

\bibitem{KIM}  {\small H. Kise, T. Ibaraki, and H. Mine, Performance
analysis of six approximation algorithms for the one-machine maximum
lateness scheduling problem with ready times, \emph{Journal of the
Operations Research Society of Japan}, 22(3):205-224, 1979.}

\bibitem{LL}  {\small E. L. Lawler, J. Labetoulle, On Preemptive Scheduling
of Unrelated Parallel Processors by Linear Programming, \emph{Journal of the
ACM}, vol. 25, no. 4, pp. 612--619, October 1978.}

\bibitem{LLRS}  {\small E.L. Lawler, J.K. Lenstra, A.H.G. Rinnooy Kan and
D.B. Shmoys, Sequencing and scheduling: Algorithms and complexity, in:
Handbook in Operations Research and Management Science, Vol. 4,
North-Holland, 1993, 445-522. }

\bibitem{Potts}  {\small C.N. Potts, Analysis of a linear programming
heuristic for scheduling unrelated parallel machines, \emph{Discrete Applied
Mathematics} 10 (1985), 155-164. }

\bibitem{PST}  {\small S.A. Plotkin, D.B. Shmoys and E. Tardos, Fast
approximation algorithms for fractional packing and covering problems, \emph{%
Mathematics of Operations Research} 20 (1995), 257-301. }

\bibitem{Sev1}  {\small S.V. Sevastianov, Bounding algorithms for the
routing problem with arbitrary paths and alternative servers, \emph{%
Cybernetics} 22 (1986), 773-780. }

\bibitem{SSW}  {\small D.B. Shmoys, C. Stein and J. Wein, Improved
approximation algorithms for shop scheduling problems, \emph{SIAM Journal on
Computing} 23 (1994), 617-632. }

\bibitem{Va}  {\small R.J.M. Vaessens, Generalized Job Shop Scheduling:
Complexity and Local Search, Ph.D. thesis (1995), Eindhoven University of
Technology.}

\bibitem{WHHHLSS}  {\small D.P. Williamson, L.A. Hall, J.A. Hoogeveen,
C.A.J. Hurkens, J.K. Lenstra, S.V. Sevastianov and D.B. Shmoys, Short shop
schedules, \emph{Operations Research} 45 (1997), 288-294. }
\end{thebibliography}

\newpage

\end{document}





--Corps_of_Giraffes_538_000--
From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["1637" "Wed" "1" "September" "1999" "10:43:56" "-0400" "Mark Giesbrecht" "mwg@csd.uwo.ca" nil "57" "Reminder: Seminar on Random Number Generators TODAY (Sept. 1)!" "^From:" nil nil "9" nil nil (number " " mark "U    Mark Giesbrecht   Sep  1   57/1637  " thread-indent "\"Reminder: Seminar on Random Number Generators TODAY (Sept. 1)!\"\n") nil nil]
	nil)
Content-Length: 1637
Received: from heffalump by chaplin.csd.uwo.ca with ESMTP;
	(id KAA13703) Wed, 1 Sep 1999 10:44:10 -0400 (EDT)
Message-Id: <199909011443.KAA16288@heffalump>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Mailer: VM 6.22 under 19.15 XEmacs Lucid
From: Mark Giesbrecht <mwg@csd.uwo.ca>
To: notice@csd.uwo.ca
Subject: Reminder: Seminar on Random Number Generators TODAY (Sept. 1)!
Date: Wed, 1 Sep 1999 10:43:56 -0400 (EDT)



                On Nonlinear Pseudo-Random Number Generators

                          Dr. Igor Shparlinski
                         Department of Computing 
                          Macquarie University 
                                Australia 

                        Time:  2:00pm, Wednesday, September 1, 1999
                        Place: Middlesex College 320

                  Ontario Research Centre for Computer Algebra 
                               Seminar Series


Abstract
--------

A survey of some recent results about Nonlinear Pseudo-Random Number
Generators which are frequently used in Cryptography and Monte Carlo
Methods will be given.  These include

- Power Generators

          u_n = u_{n-1}^e  mod M

  and thus the RSA (gcd(e,phi(M)=1) and  Blum-Blum-Shub (e=2) generators

- Inversive generators

          u_n = a/u_{n-1} + b  mod M

  introduced by Harold Niederreiter

- Naor-Reingold generators
 
          f_a(x) = g^{a_1^{x_1}... a_r^{x_r}} mod p

  where g is of multiplicative order l  mod p
  a=(a_1,..., a_r) \in (Z/lZ)^r and
  x=x_1...x_r is the bit expansion of x.

We study the period, distribution and linear complexity of above
sequences.

-----------------

About the Speaker 

Dr. Shparlinski is a leading researcher in computations in number
theory, finite fields, and random number generators and their
applications to cryptography and computational complexity.  He is the
author of 4 books and over 100 journal and conference publications.
Dr. Shparlinski was the winner of the 1996 Australian Mathematical
Society Medal for distinguished research in the mathematical sciences.

From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["78" "Wed" "1" "September" "1999" "14:22:48" "-0400" "dillon@csd.uwo.ca" "dillon@csd.uwo.ca" nil "5" "assignment lockers" "^From:" nil nil "9" nil nil (number " " mark "U    dillon@csd.uwo.ca Sep  1    5/78    " thread-indent "\"assignment lockers\"\n") nil nil]
	nil)
Content-Length: 78
Received: from mccarthy.csd.uwo.ca by chaplin.csd.uwo.ca with SMTP;
	(id OAA22801) Wed, 1 Sep 1999 14:22:50 -0400 (EDT)
Message-Id: <9909011822.AA27458@mccarthy.csd.uwo.ca>
X-Mailer: ELM [version 2.4 PL24]
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
From: dillon@csd.uwo.ca
To: faculty@csd.uwo.ca
Subject: assignment lockers
Date: Wed, 1 Sep 1999 14:22:48 -0400 (EDT)

Please let me know if you would like an assignment locker.  

Thanks.

Sandra
From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["85" "Wed" "1" "September" "1999" "14:40:25" "-0400" "elsakka@csd.uwo.ca" "elsakka@csd.uwo.ca" nil "8" "Re: assignment lockers" "^From:" nil nil "9" nil nil (number " " mark "U    elsakka@csd.uwo.c Sep  1    8/85    " thread-indent "\"Re: assignment lockers\"\n") nil nil]
	nil)
Content-Length: 85
Received: from dba037.csd.uwo.ca by chaplin.csd.uwo.ca with ESMTP;
	(id OAA23263) Wed, 1 Sep 1999 14:40:26 -0400 (EDT)
Message-Id: <199909011840.OAA11214@dba037.csd.uwo.ca>
From: elsakka@csd.uwo.ca
To: dillon@csd.uwo.ca, faculty@csd.uwo.ca
Subject: Re: assignment lockers
Date: Wed, 1 Sep 1999 14:40:25 -0400


Hi Sandra,

Yes please, I would like to have a locker for CS357a.

Thanks,

MAhmoud
From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["394" "Thu" "2" "September" "1999" "12:13:55" "-0400" "Judy Purves" "jpurves@julian.uwo.ca" nil "20" "New Faculty Orientation" "^From:" nil nil "9" nil nil (number " " mark "U    Judy Purves       Sep  2   20/394   " thread-indent "\"New Faculty Orientation\"\n") nil nil]
	nil)
Content-Length: 394
Received: from juliet.its.uwo.ca by chaplin.csd.uwo.ca with ESMTP;
	(id MAA01378) Thu, 2 Sep 1999 12:16:50 -0400 (EDT)
Received: from julian.uwo.ca by juliet.its.uwo.ca with ESMTP id MAA11242;
        Thu, 2 Sep 1999 12:16:49 -0400 (EDT)
X-Authentication-Warning: juliet.its.uwo.ca: Host slbjap.das.uwo.ca [129.100.32.87] claimed to be julian.uwo.ca
Message-ID: <37CEA243.5CF50AE9@julian.uwo.ca>
X-Mailer: Mozilla 4.03 [en] (Win95; I)
MIME-Version: 1.0
References: <199909021453.KAA13882@brown.csd.uwo.ca>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
From: Judy Purves <jpurves@julian.uwo.ca>
To: Roberto Solis-Oba <solis@csd.uwo.ca>
Subject: New Faculty Orientation
Date: Thu, 02 Sep 1999 12:13:55 -0400

Dear Roberto,

This will confirm your registration for the New Faculty Orientation.  We
look forward to seeing you on the 13th at Spencer Hall.

Judy Purves
Educational Development Office


Roberto Solis-Oba wrote:

> I would like to register to the New Faculty Orientation which will
> take place on Sept. 13. I am a new faculty member of Computer Science.
>
> Thanks
>
> Roberto Solis-Oba



From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["81" "Thu" "2" "September" "1999" "14:49:17" "-0400" "Judy Collis" "jcollis@julian.uwo.ca" nil "5" "SIN" "^From:" nil nil "9" nil nil (number " " mark "U    Judy Collis       Sep  2    5/81    " thread-indent "\"SIN\"\n") nil nil]
	nil)
Content-Length: 81
Received: from romeo.its.uwo.ca by chaplin.csd.uwo.ca with ESMTP;
	(id OAA06568) Thu, 2 Sep 1999 14:48:27 -0400 (EDT)
Received: from julian.uwo.ca by romeo.its.uwo.ca with ESMTP id OAA12286;
        Thu, 2 Sep 1999 14:48:27 -0400 (EDT)
X-Authentication-Warning: romeo.its.uwo.ca: Host slbjac.das.uwo.ca [129.100.32.62] claimed to be julian.uwo.ca
Message-ID: <37CEC6AD.BB98D49E@julian.uwo.ca>
Organization: UWO
X-Mailer: Mozilla 4.03 [en] (Win95; I)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
From: Judy Collis <jcollis@julian.uwo.ca>
To: solis@csd.uwo.ca
Subject: SIN
Date: Thu, 02 Sep 1999 14:49:17 -0400

Roberto,
Here is the site --
http://www.hrdc-drhc.gc.ca/sin/nas2120e.shtml
Judy

From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["914" "Thu" "2" "September" "1999" "16:01:20" "-0400" "Scott Feeney" "zebulon@csd.uwo.ca" nil "23" "Re: Homepage " "^From:" nil nil "9" nil nil (number " " mark "U    Scott Feeney      Sep  2   23/914   " thread-indent "\"Re: Homepage \"\n") nil nil]
	nil)
Content-Length: 914
Received: from horse.csd.uwo.ca by chaplin.csd.uwo.ca with ESMTP;
	(id QAA09453) Thu, 2 Sep 1999 16:01:21 -0400 (EDT)
Message-Id: <199909022001.QAA23387@horse.csd.uwo.ca>
X-Mailer: exmh version 2.0.1 12/23/97
In-Reply-To: Your message of "Thu, 02 Sep 1999 14:53:15 EDT."
             <199909021853.OAA05847@algernon> 
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
From: Scott Feeney <zebulon@csd.uwo.ca>
To: Roberto Solis-Oba <solis@csd.uwo.ca>
Subject: Re: Homepage 
Date: Thu, 02 Sep 1999 16:01:20 -0400

Roberto,

In your home directory, create a directory called 'public_html'. Then create a 
symbolic link to it called 'www'. In this new directory, you will create your 
main web page and it must be called 'index.html'. Pages you link to from it 
can be called whatever you want.

We have a standard setup in the department web pages where I create a "cover" 
web page for you which has an optional picture, your name, email address, room 
#, etc. and then a few paragraphs describing your research interests (have a 
look at some of the other faculty member pages, and then email me what you 
want to go there), and then I include a link to your personal pages from there.

cheers
- Scott

---
Scott Feeney - Computer Laboratory Administrator
Department of Computer Science
The University of Western Ontario,  London, Ontario, Canada  N6A 5B7
zebulon@csd.uwo.ca                              (519) 679-2111 x6880


From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["1245" "Fri" "3" "September" "1999" "00:39:27" "-0400" "Kaizhong Zhang" "kzhang@csd.uwo.ca" nil "44" "Faculty Introduction on Friday, Sept. 3" "^From:" nil nil "9" nil nil (number " " mark "U    Kaizhong Zhang    Sep  3   44/1245  " thread-indent "\"Faculty Introduction on Friday, Sept. 3\"\n") nil nil]
	nil)
Content-Length: 1245
Received: from spring.csd.uwo.ca by chaplin.csd.uwo.ca with SMTP;
	(id AAA11939) Fri, 3 Sep 1999 00:39:27 -0400 (EDT)
Message-Id: <199909030439.AAA25250@spring.csd.uwo.ca>
From: Kaizhong Zhang <kzhang@csd.uwo.ca>
To: faculty@csd.uwo.ca
Subject: Faculty Introduction on Friday, Sept. 3
Date: Fri, 3 Sep 1999 00:39:27 -0400

Dear Colleagues,

The following is the final schedule of
the faculty introduction to graduate
students for Friday, Sept. 3 at 1:00-3:00 in Room 320. 
Every faculty member who will teach a graduate course
and/or supervise graduate students in 1999-2000 will be
given a 5-minute period to talk about your research
and the graduate course(s) you will teach.
Please send me an e-mail as soon as possible if you
have time conflicts or you are unable to come.

Thanks,

Kaizhong
------------------------------------------------------
             Faculty Introduction
             --------------------
          1:00-3:00 Friday, Spet. 3 1999

1:00-1:10  Stephen Watt (Welcome)
1:10-1:15  Helmut Jurgensen
1:15-1:20  Jamie Andrews
1:20-1:25  John Barron
1:25-1:30  Robert Corless
1:30-1:35  Wade Holst
1:35-1:40  Mark Giesbrecht
1:40-1:45  Lila Kari
1:45-1:50  Charles Ling
1:50-1:55  Hanan Lutfiyya
1:55-2:00  Areski Nait Abdallah
2:00-2:05  Sylvia Osborn 
2:05-2:10  Mark Perry
2:10-2:15  Kai Salomaa
2:15-2:20  Kamran Sedighian
2:20-2:25  Alberto Solis-Oba
2:25-2:30  Bob Webber
2:30-2:35  David Wiseman
2:35-2:40  Xiaolin Wu      
2:40-2:45  Sheng Yu
2:45-2:50  Mahmoud El-Sakka
2:50-1:55  Irene Gargantini
2:55-3:05  Kaizhong Zhang (conclusion)

From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["2361" "Fri" "3" "September" "1999" "11:04:47" "-0400" "Janice Wiersma" "janice@csd.uwo.ca" nil "56" "Ph.D. defence in Geophysics - Mr. Haitao YANG" "^From:" nil nil "9" nil nil (number " " mark "U    Janice Wiersma    Sep  3   56/2361  " thread-indent "\"Ph.D. defence in Geophysics - Mr. Haitao YANG\"\n") nil nil]
	nil)
Content-Length: 2361
Received: from chandelier by chaplin.csd.uwo.ca with SMTP;
	(id LAA27713) Fri, 3 Sep 1999 11:05:16 -0400 (EDT)
Message-Id: <3.0.5.32.19990903110447.00bbf860@chaplin.csd.uwo.ca>
X-Sender: janice@chaplin.csd.uwo.ca
X-Mailer: QUALCOMM Windows Eudora Light Version 3.0.5 (32)
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
From: Janice Wiersma <janice@csd.uwo.ca>
To: faculty@csd.uwo.ca, grads@csd.uwo.ca
Subject: Ph.D. defence in Geophysics - Mr. Haitao YANG
Date: Fri, 03 Sep 1999 11:04:47 -0400

>
>PLEASE POST AS APPROPRIATE
>
>			DEPARTMENT OF EARTH SCIENCES
>
>			PH.D. PUBLIC LECTURE
>
>			CANDIDATE: Haitao YANG
>			Supervisor: Dr. Richard A. Secco
>
>		"Melting behavior, electrical resistivity, viscosity of an Fe-Si
>allooy at high pressures and implications for outer core dynamics"
>
>			Date: Monday September 20, 1999
>			Time: 1.00 p.m.
>			Place: Room 160, B&G Bldg. U.W.O. London, Canada
>
>Abstract:
>
>	The melting temperatures of an Fe-Si alloy at pressures up to 5.5 GPa
>have been determined using electrical resistivity measurements as a
>probe to identify the onset of melting.  The melting behavior of
>Fe-17%Si provides an estimate of core formation of not later than 42Ma
>after the start of accretion based on the results of Earth's thermal
>history modelling.
>	Using measured electrical resistivity values of liquid Fe-17%Si and the
>temperature and pressure coefficients of resistivity derived from
>experimental data, extrapolations of electrical resistivity to the CMB
>conditions yields a range of values of magnetic Reynolds number (R sub
>m) which span the entire range of acceptable R sub m values required by
>dynamo theories.  The extrapolation also shows the estimate of outer
>core resistivity in a range of 0.5-4.4 x 10 sup -5 OMEGA m.  Therefore,
>it can be concluded that Si is a viable outer core alloying element on
>the basis of geomagnetic considerations.  
>	Viscosity values for Fe-17%Si at pressures between 2.0GPa and 5.0GPa
>and at temperatures between 1450 deg C and 1550 deg C have been measured
>using electro-detection technique, and the values of activation
>parameters of energy and volume have been determined based on the
>pressure and temperature dependences of viscosity.  The extrapolated
>viscosity fo Fe-17%Si to the outer core conditions yields a range of
>viscosity values which spans 5 orders of magnitude, and corresponds to
>the upper end of outer core viscosity estimates derived from other
>geophysical methods.
>
>Keywords:  Outer core, Fe-Si alloy, electrical resistivity, melting,
>viscosity, dynamo.
>************************************************************************
>				Everyone welcome
>************************************************************************
>
>Oral examination to follow at 2.00 p.m. in room 142, SLB, U.W.O. London,
>Canada.
>				****************
>
>

From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["486" "Fri" "3" "September" "1999" "13:51:35" "-0400" "Janice Wiersma" "janice@csd.uwo.ca" nil "19" "grad student support" "^From:" nil nil "9" nil nil (number " " mark "U    Janice Wiersma    Sep  3   19/486   " thread-indent "\"grad student support\"\n") nil nil]
	nil)
Content-Length: 486
Received: from chandelier by chaplin.csd.uwo.ca with SMTP;
	(id NAA03139) Fri, 3 Sep 1999 13:52:03 -0400 (EDT)
Message-Id: <3.0.5.32.19990903135135.00ce5cc0@chaplin.csd.uwo.ca>
X-Sender: janice@chaplin.csd.uwo.ca
X-Mailer: QUALCOMM Windows Eudora Light Version 3.0.5 (32)
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
From: Janice Wiersma <janice@csd.uwo.ca>
To: faculty@csd.uwo.ca
Subject: grad student support
Date: Fri, 03 Sep 1999 13:51:35 -0400


For those of you who have MSc students going into their 4th term:

Could you please let me know how much (if any) funding you will be giving
your students this term.  Keep in mind that it looks like they will get a
TA but they will not be getting any SUS which would normally be $ 600 for
the term and you would also normally contribute $ 587.  

Could you please let me know today or Tuesday at the latest or
unfortunately they won't get the money in September.

thanks,

Janice





From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["37" "Fri" "3" "September" "1999" "22:32:14" "+0200" "mailadmin@zpr.uni-koeln.de" "mailadmin@zpr.uni-koeln.de" nil "4" "Majordomo results: subscribe dmanet" "^From:" nil nil "9" nil nil (number " " mark "U    mailadmin@zpr.uni Sep  3    4/37    " thread-indent "\"Majordomo results: subscribe dmanet\"\n") nil nil]
	nil)
Content-Length: 37
Received: from Octopussy.MI.Uni-Koeln.DE by chaplin.csd.uwo.ca with ESMTP;
	(id QAA07442) Fri, 3 Sep 1999 16:32:26 -0400 (EDT)
Received: (from majordom@localhost)
	by Octopussy.MI.Uni-Koeln.DE (8.9.1/8.9.1) id WAA06410;
	Fri, 3 Sep 1999 22:32:14 +0200 (MET DST)
Message-Id: <199909032032.WAA06410@Octopussy.MI.Uni-Koeln.DE>
Reply-To: mailadmin@zpr.uni-koeln.de
From: mailadmin@zpr.uni-koeln.de
To: solis@csd.uwo.ca
Subject: Majordomo results: subscribe dmanet
Date: Fri, 3 Sep 1999 22:32:14 +0200 (MET DST)

--

>>>> subscribe dmanet
Succeeded.
From VM Fri Sep  3 16:35:44 1999
X-VM-v5-Data: ([nil t nil nil nil nil nil nil nil]
	["2842" "Fri" "3" "September" "1999" "22:32:15" "+0200" "mailadmin@zpr.uni-koeln.de" "mailadmin@zpr.uni-koeln.de" nil "84" "Welcome to dmanet" "^From:" nil nil "9" nil nil (number " " mark "U    mailadmin@zpr.uni Sep  3   84/2842  " thread-indent "\"Welcome to dmanet\"\n") nil nil]
	nil)
Content-Length: 2842
Received: from Octopussy.MI.Uni-Koeln.DE by chaplin.csd.uwo.ca with ESMTP;
	(id QAA07443) Fri, 3 Sep 1999 16:32:27 -0400 (EDT)
Received: (from majordom@localhost)
	by Octopussy.MI.Uni-Koeln.DE (8.9.1/8.9.1) id WAA06411;
	Fri, 3 Sep 1999 22:32:15 +0200 (MET DST)
Message-Id: <199909032032.WAA06411@Octopussy.MI.Uni-Koeln.DE>
Reply-To: mailadmin@zpr.uni-koeln.de
From: mailadmin@zpr.uni-koeln.de
To: solis@csd.uwo.ca
Subject: Welcome to dmanet
Date: Fri, 3 Sep 1999 22:32:15 +0200 (MET DST)

--

Welcome to the dmanet mailing list!

Please save this message for future reference.  Thank you.

If you ever want to remove yourself from this mailing list,
you can send mail to <mailadmin@zpr.uni-koeln.de> with the following
command in the body of your email message:

    unsubscribe dmanet solis@csd.uwo.ca

 Here's the general information for the list you've subscribed to,
 in case you don't already have it:

DMANET: DISCRETE MATHEMATICS AND ALGORITHMS

Welcome to DMANET, an electronic news and research network for discrete 
mathematics and algorithms with about 900 members worldwide. DMANET is 
maintained at the Centre for Applied Informatics (ZAIK)
at the University of Cologne, Germany. 

The scope of the DMA-newsletter includes the mathematical analysis of 
discrete structures as well as the design of discrete algorithms and 
their applications in operations research, computer science and engineering. 

In particular, DMANET tries to address researchers and practitioners 
working in the following areas (in a wide sense): 

     deterministic algorithms 
     random algorithms 
     computational complexity 
     communication complexity 
     combinatorics 
     graph theory 
     combinatorial optimization 
     combinatorial game theory 
     learning theory 
     linear programming 
     mathematical programming 
     etc. 

DMANET spreads information on conferences, workshops, seminars etc. relating 
to discrete mathematics and algorithms. It is also meant to be a forum for 
questions regarding on-going research. 

One may announce new preprints and books on DMANET. There is furthermore 
room for advertising employment opportunities. 

Contributors to DMANET send their news item(s) to the central node 
DMANET@zpr.uni-koeln.de from where the information is forwarded to 
the members of DMANET. 

The DMANET-homepage in the World-Wide-Web can be found at

	http://www.zpr.Uni-Koeln.DE/ABS/dmanet

The messages to DMANET are archived on Michael Trick's OR-Page 

	http://math.gsia.cmu.edu/DMANET



DMANET will only screen but not edit the contribution before passing it on. 
Information should, therefore, come in a reader friendly format. It should: 

   1.contain the name and e-mail address of the original sender 
     (the header of the e-mail message is NOT sufficient as it may not be forwarded). 
   2.classify the nature of the information ("conference", "workshop", "book", 
     "problem", "position" etc.). 
   3.be clear and to the point. (A book announcement, for example, should include title, 
     name of the author(s), publisher etc., a brief list of the subjects ("keywords") and 
     the AMS subject classification. The interested reader
     may then contact the original sender for more detailed information). 

Your contribution may be submitted in ASCII and/or TeX. 








From VM Wed Sep 22 09:47:21 1999
X-VM-v5-Data: ([nil nil nil nil nil nil nil nil nil]
	["5778" "Tue" "21" "September" "1999" "16:01:23" "-0400" "Dianne McFadzean" "dianne@csd.uwo.ca" nil "138" "New Phone System" "^From:" nil nil "9" nil nil (number " " mark "     Dianne McFadzean  Sep 21  138/5778  " thread-indent "\"New Phone System\"\n") nil nil]
	nil)
Content-Length: 5778
Received: from light by chaplin.csd.uwo.ca with SMTP;
	(id QAA13576) Tue, 21 Sep 1999 16:01:20 -0400 (EDT)
Message-Id: <3.0.3.32.19990921160123.00980db0@chaplin.csd.uwo.ca>
X-Sender: dianne@chaplin.csd.uwo.ca
X-Mailer: QUALCOMM Windows Eudora Light Version 3.0.3 (32)
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
From: Dianne McFadzean <dianne@csd.uwo.ca>
To: allcs@csd.uwo.ca, grads@csd.uwo.ca
Subject: New Phone System
Date: Tue, 21 Sep 1999 16:01:23 -0400

>The following information was received today from Dr. M. Bauer, Senior
>Director of Information Technology Services.
>
>Please distribute to all personnel in your department. Thank you very much
>for your assistance.
>
>
>                         New Telephone System
>>                           ====================
>> 
>> The University of Western Ontario has entered into a partnership with Bell
>Canada and Nortel to provide
>> Telecommunications services to the Student Residences, the Corporate
>University and the UWO Research Park.
>> UWO purchased a Nortel MSL-100 telephone switch from Bell Canada to
>replace the existing Siemens Rolm
>> switch which has served the University community very well for the past 15
>years.
>> The Student Residences were successfully cutover on August 23rd, the UWO
>Corporate cutover is scheduled for
>> Thanksgiving Weekend and the UWO Research Park will be cutover on November
>20th.
>> 
>> When does this happen?
>> ======================
>> Telephone sets with end-user information will be distributed throughout
>campus beginning the week of
>> September 27th.
>> During the Thanksgiving weekend, the new telephone sets will be activated
>and the old Rolm phone will be
>> removed by an ITS team.  Special arrangements are being made for areas
>with restricted access.
>> What will the main University telephone number be?
>> The main University telephone number will be 661-2111.  Callers to
>679-2111 will be asked to hang up and dial
>> 661-2111.
>> 
>> What will my telephone number be?
>> =================================
>> All extensions will be 5 digit numbers created by placing an 8 in front of
>your existing extension number.  All
>> Direct-in-Dial numbers will remain unchanged.   The University greeting
>will also tell callers that the University
>> has moved to 5-digit extensions and to put an 8 in front of the 4 digit
>extension.
>> For example, in the current system, Telecommunications can be reached at
>661-3323 or extension 3323.  In the
>> new system, Telecommunications will be reached at 661-3323 or extension
>83323.  Extension numbers which
>> are not Direct-in-Dial numbers will be reached by dialing 661-2111 and the
>5-digit extension.
>> The new UWO Telephone Directory contains all the new 5-digit telephone
>numbers and will be available on
>> Thanksgiving weekend.
>> 
>> What will the new service include?
>> ==================================
>> Basic telephone service will be provided by a feature rich M2008 set which
>will have Voice Mail, Call Display,
>> Transfer, Forward, 3 Way Calling, 10 Number Speed Dial and, when needed,
>Pick.   This service will cost $27.25
>> per month.  A hands free version of the M2008 is available for $31.00. The
>M2616 will provide the basic feature
>> set plus additional capacity for line appearances and features at a cost
>of $45.00 per month.
>> Analog service will not change.  Analog line charges will be $27.00;
>analog set rental will be $2.75 and Voice
>> Mail on an analog line will be an additional $2.50.
>> 
>> Features such as paging, conference and intercom will be available at an
>additional cost.
>> Voice Mail will be provided by an Octel system similar to the one used to
>provide Bell Call Answer.  The first time
>> you login to your voicemail box you will be prompted through a short
tutorial.
>> Additional information is available at
>http://www.uwo.ca/its/services/telecom/new.
>> 
>> How will I be able to get help?
>> ===============================
>> General drop-in training sessions lasting 30 - 45 minutes and opened to
>any member of the University
>> Community have been scheduled for September 22nd, September 28th,
>September 30th and October 6th at
>> 10:00 am in Western Science Centre, Room 55.  More in-depth training has
>been scheduled for the Telephone
>> Coordinators beginning the week of September 20th.
>> WEB based training for both set feature and voice mail is available at
>http://www.uwo.ca/its/services/telecom/help.
>> In addition, a Telephone Help Line has been established at extension 84357.
>> 
>> Emergency Calls?
>> ================
>> Effective October 12, 1999, the Campus Emergency number will be 911. All
>phone sets will display this
>> information on the faceplate.
>> Call 9-1-1 anytime you need to report an emergency.
>> Emergencies are situations that require immediate attention by police,
>ambulance or Occupational Health &
>> Safety personnel. Examples include: an assault or immediate danger of
>assault: crime in progress: fires:
>> chemical spills or discovery of a person whois unconscious, having chest
>pain, not breathing, choking or coping
>> with other serious injury or illness.
>> UWO Police have been the primary answering agency and will answer the 911
>line. They will immediately
>> connect the caller to the appropriate emergency service. The UWO
>dispatcher will stay on the line to ensure that
>> emergency services have all the information needed to locate the emergency
>quickly. Where appropriate, they
>> will also dispatch a Campus police officer, the Student Emergency Response
>Team or other Campus emergency
>> response personnel.
>> 
>> For non-emergency situations, Campus Police can be reached at 661-3300 or
>extension 83300.
>
>-- 
>Fred J. Longstaffe
>Professor of Geology and Dean of Science
>Department of Earth Sciences
>University of Western Ontario
>London, Ontario Canada N6A 5B7
>
>Ph.:  519-661-3177 or 519-661-3041
>FAX:  519-661-3703Content-Type: application/msword; x-mac-type="5738424E";
>x-mac-creator="4D535744";
> name="Dean's Message -- 199909.doc"
>
>Content-Description: Unknown Document
>Content-Disposition: inline;
> filename="Dean's Message -- 199909.doc"
>
>Attachment Converted: C:\MYFILES\EUDORA\Dean'sMe.doc
>
>
>
>
From VM Wed Sep 22 09:47:21 1999
X-VM-v5-Data: ([nil nil nil nil nil nil nil nil nil]
	["616" "Tue" "21" "September" "1999" "16:57:56" "-0400" "John Barron" "barron@csd.uwo.ca" nil "9" "feedback from today's NSERC visit..." "^From:" nil nil "9" nil nil (number " " mark "     John Barron       Sep 21    9/616   " thread-indent "\"feedback from today's NSERC visit...\"\n") nil nil]
	nil)
Content-Length: 616
Received: from newfie.image.csd.uwo.ca by chaplin.csd.uwo.ca with SMTP;
	(id QAA16761) Tue, 21 Sep 1999 16:57:55 -0400 (EDT)
Message-Id: <199909212057.QAA17781@newfie.image.csd.uwo.ca>
From: John Barron <barron@csd.uwo.ca>
To: faculty@csd.uwo.ca
Subject: feedback from today's NSERC visit...
Date: Tue, 21 Sep 1999 16:57:56 -0400

Hi everybody, the feedback from today's NSERC visit is negative towards
a large equipment grant (such as the one we submitted for the last two years 
running) and positive for small equipment grants ($20,000-$40,000 range) that
are well focused and have only a few people as co-applicants. So, I guess
I will not be needing your form 100's after all...
Each group is responsible for writing their own small equipment grants
(and not the RPC). Too bad this visit wasn't a few weeks ago!!! We will
be submitting a CFI-ORCDF application, however. I will contact you again
about stuff I need for that application. John.
From VM Wed Sep 22 09:47:21 1999
X-VM-v5-Data: ([nil nil nil nil nil nil nil nil nil]
	["525" "Tue" "21" "September" "1999" "21:27:13" "-0400" "Wade Holst" "wade@csd.uwo.ca" nil "24" "Office Hours" "^From:" nil nil "9" nil nil (number " " mark "     Wade Holst        Sep 21   24/525   " thread-indent "\"Office Hours\"\n") nil nil]
	nil)
Content-Length: 525
Received: from brown.csd.uwo.ca by chaplin.csd.uwo.ca with SMTP;
	(id VAA28476) Tue, 21 Sep 1999 21:27:14 -0400 (EDT)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <14312.12401.389535.623888@brown.csd.uwo.ca>
In-Reply-To: <39401282@toto.iv>
X-Mailer: VM 6.72 under 21.1 (patch 6) "Big Bend" XEmacs Lucid
From: Wade Holst <wade@csd.uwo.ca>
To: dillon@csd.uwo.ca
Cc: faculty@csd.uwo.ca
Subject: Office Hours
Date: Tue, 21 Sep 1999 21:27:13 -0400 (EDT)


Hi Sandra,

dillon@csd.uwo.ca writes:
 > Hi 
 > 
 > Please email me your office hours so when students are looking for you I
 > can offer them something other than a blank stare 8-)

Tuesday and Thursday, 3-4pm in MC 417.

 > Also midterm exam time is looming, please let me know if you require exam
 > booklets.  They come in three sizes 4 page, 8 page and 28 page. 

Not yet.

 > Please also let me know if you need scantron sheet.

These are presumably the automatically marked "fill-in-the-dot" sheets?
Not yet.


Wade

From VM Wed Sep 22 09:47:21 1999
X-VM-v5-Data: ([nil nil nil nil nil nil nil nil nil]
	["785" "Wed" "22" "September" "1999" "10:09:16" "+0200" "Jansen, Klaus" "klaus@idsia.ch" nil "25" "Re: controllable processing times" "^From:" nil nil "9" nil nil (number " " mark "     Jansen, Klaus     Sep 22   25/785   " thread-indent "\"Re: controllable processing times\"\n") nil nil]
	nil)
Content-Length: 785
Received: from fava.idsia.ch by chaplin.csd.uwo.ca with ESMTP;
	(id GAA11505) Wed, 22 Sep 1999 06:30:38 -0400 (EDT)
Received: from cicoria.idsia.ch ([195.176.191.24]) by fava.idsia.ch
          (Post.Office MTA v3.1 release PO203a  ID# 114-37856U100L2S100)
          with SMTP id AAA18009 for <solis@csd.uwo.ca>;
          Wed, 22 Sep 1999 10:09:15 +0200
Received: from cicoria by cicoria.idsia.ch (SMI-8.6/SMI-SVR4)
	id KAA28502; Wed, 22 Sep 1999 10:09:16 +0200
Message-Id: <199909220809.KAA28502@cicoria.idsia.ch>
Reply-To: Klaus Jansen <klaus@idsia.ch>
MIME-Version: 1.0
Content-Type: TEXT/plain; charset=us-ascii
Content-MD5: qi8cpBUoeUyPXMqOiF9aDA==
X-Mailer: dtmail 1.2.1 CDE Version 1.2.1 SunOS 5.6 sun4u sparc 
From: klaus@idsia.ch (Jansen, Klaus)
To: solis@csd.uwo.ca
Subject: Re: controllable processing times
Date: Wed, 22 Sep 1999 10:09:16 +0200 (MET DST)



Dear Roberto,

thanks for the update of the Florida paper. Do you have heard
anything from Panos?

I am now packing my things here and at home for Kiel. On Monday
they pack a truck with all boxes and material.

One thing we should finish soon is the first draft on controllable
processing times. Schuurman and Woeginger have some results - on
flow shops and identical machines [but I do not know further details].

please send us  a correct version for the job shop part (if it is
not linear, then it is ok). After that Monaldo could merge all results
together in one paper (and then we can look at it and decide where).
There are a lot of poosible conferences.

Thanks, Klaus

PS. My new email address (starting October) will be: 

                       kj@informatik.uni-kiel.de

